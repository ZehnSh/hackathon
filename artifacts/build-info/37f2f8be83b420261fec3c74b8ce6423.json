{"id":"37f2f8be83b420261fec3c74b8ce6423","_format":"hh-sol-build-info-1","solcVersion":"0.8.9","solcLongVersion":"0.8.9+commit.e5eed63a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"contracts/insuranceRegistery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./Libraries/LibCalculations.sol\";\n\ncontract insuranceRegistery is ReentrancyGuard {\n    using Counters for Counters.Counter;\n    uint256 public InsuranceId;\n\n    struct insuranceData {\n        address userWalletAddress;\n        uint256 startDate;\n        uint256 maturityDate;\n        uint256 periodTime;\n        uint256 areaOfLand;\n        string seedsData;\n        uint256 seedQuantity;\n        string image;\n        string yourAddress;\n        uint256 Amount;\n        uint16 percent;\n    }\n\n    // InsuranceId => insuranceData\n    mapping(uint256 => insuranceData) public insuranceDetails;\n\n    // InsuranceId => installment\n    mapping(uint256 => uint8) public paidInstallments;\n\n    // InsuranceId => block.timestamp\n    mapping(uint256 => uint256) public lastInstallmentPaidTimestump;\n\n    // userAddress => InsuranceIds\n    mapping(address => uint256[]) public userInsurances;\n\n    event insuranceRegistered(uint256 InsuranceId, uint256 amount);\n\n    event Claimed(uint256 InsuranceId, string massage, uint256 amount);\n\n    function insuranceRegister(insuranceData memory _insuranceData)\n        external\n        returns (uint256 _insuranceId)\n    {\n        require(msg.sender != address(0), \"Fake Address\");\n\n        _insuranceId = ++InsuranceId;\n\n        insuranceDetails[_insuranceId] = _insuranceData;\n\n        userInsurances[msg.sender].push(_insuranceId);\n\n        emit insuranceRegistered(_insuranceId, _insuranceData.Amount);\n    }\n\n    function payInstallment(address ERC20Address, uint256 _insuranceId)\n        external\n        nonReentrant\n    {\n        insuranceData memory details = insuranceDetails[_insuranceId];\n        require(\n            details.userWalletAddress == msg.sender,\n            \"This is not your Insurance\"\n        );\n        require(\n            ERC20Address != address(0),\n            \"you can't do this with zero address\"\n        );\n\n        require(\n            details.startDate + details.maturityDate <= block.timestamp,\n            \"your maturity Date is over\"\n        );\n\n        paidInstallments[_insuranceId]++;\n        lastInstallmentPaidTimestump[_insuranceId] = block.timestamp;\n\n        require(\n            IERC20(ERC20Address).transferFrom(\n                msg.sender,\n                address(this),\n                details.Amount\n            ),\n            \"Unable to tansfer Fund\"\n        );\n    }\n\n    function dataFromChainLink(string memory date) external pure returns (bool) {\n        return true;\n    }\n\n    function claim(\n        address ERC20Address,\n        uint256 _insuranceId,\n        string memory image,\n        string memory date,\n        bool chainlink\n    ) external nonReentrant {\n        require(\n            lastInstallmentPaidTimestump[_insuranceId] < block.timestamp,\n            \"You are claiming at wrong timestamp\"\n        );\n        // janith you need to get the data from chain Link so you can check that data in this if condition\n        if (chainlink) {\n            insuranceData memory details = insuranceDetails[_insuranceId];\n            uint256 percent = LibCalculations.percent(\n                details.Amount,\n                details.percent\n            );\n            require(\n                details.userWalletAddress == msg.sender,\n                \"This is not your Insurance\"\n            );\n            require(\n                ERC20Address != address(0),\n                \"you can't do this with zero address\"\n            );\n            require(\n                IERC20(ERC20Address).transferFrom(\n                    msg.sender,\n                    address(this),\n                    details.Amount + percent\n                ),\n                \"Unable to tansfer Fund\"\n            );\n            emit Claimed(_insuranceId, \"success\", details.Amount + percent);\n        } else {\n            emit Claimed(_insuranceId, \"unsuccess\", 0);\n        }\n    }\n}\n"},"contracts/Libraries/LibCalculations.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nlibrary LibCalculations {\n    function percentFactor(uint256 decimals) internal pure returns (uint256) {\n        return 100 * (10**decimals);\n    }\n\n    /**\n     * Returns a percentage value of a number.\n     self The number to get a percentage of.\n     percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\n     */\n    function percent(uint256 self, uint16 percentage)\n        public\n        pure\n        returns (uint256)\n    {\n        return percent(self, percentage, 2);\n    }\n\n    /**\n     * Returns a percentage value of a number.\n     self The number to get a percentage of.\n     percentage The percentage value to calculate with.\n     decimals The number of decimals the percentage value is in.\n     */\n    function percent(\n        uint256 self,\n        uint256 percentage,\n        uint256 decimals\n    ) internal pure returns (uint256) {\n        return (self * percentage) / percentFactor(decimals);\n    }\n\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/insuranceRegistery.sol:91:32:\n   |\n91 |     function dataFromChainLink(string memory date) external pure returns (bool) {\n   |                                ^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2644,"file":"contracts/insuranceRegistery.sol","start":2626},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/insuranceRegistery.sol:98:9:\n   |\n98 |         string memory image,\n   |         ^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2812,"file":"contracts/insuranceRegistery.sol","start":2793},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/insuranceRegistery.sol:99:9:\n   |\n99 |         string memory date,\n   |         ^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2840,"file":"contracts/insuranceRegistery.sol","start":2822},"type":"Warning"}],"sources":{"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[64]},"id":65,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:0"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"137:750:0","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":64,"linearizedBaseContracts":[64],"name":"ReentrancyGuard","nameLocation":"906:15:0","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":5,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:0","nodeType":"VariableDeclaration","scope":64,"src":"1676:41:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":4,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":8,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:0","nodeType":"VariableDeclaration","scope":64,"src":"1723:37:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":7,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":10,"mutability":"mutable","name":"_status","nameLocation":"1783:7:0","nodeType":"VariableDeclaration","scope":64,"src":"1767:23:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":17,"nodeType":"Block","src":"1811:39:0","statements":[{"expression":{"id":15,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":13,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1821:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":14,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1831:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":16,"nodeType":"ExpressionStatement","src":"1821:22:0"}]},"id":18,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":11,"nodeType":"ParameterList","parameters":[],"src":"1808:2:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"1811:0:0"},"scope":64,"src":"1797:53:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":28,"nodeType":"Block","src":"2251:79:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":21,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"2261:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":22,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":23,"nodeType":"ExpressionStatement","src":"2261:21:0"},{"id":24,"nodeType":"PlaceholderStatement","src":"2292:1:0"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":25,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"2303:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":26,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2303:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":27,"nodeType":"ExpressionStatement","src":"2303:20:0"}]},"documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"1856:366:0","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":29,"name":"nonReentrant","nameLocation":"2236:12:0","nodeType":"ModifierDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"2248:2:0"},"src":"2227:103:0","virtual":false,"visibility":"internal"},{"body":{"id":43,"nodeType":"Block","src":"2375:248:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":33,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2468:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":34,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"2479:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":36,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":32,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":38,"nodeType":"ExpressionStatement","src":"2460:63:0"},{"expression":{"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":39,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2598:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":40,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"2608:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":42,"nodeType":"ExpressionStatement","src":"2598:18:0"}]},"id":44,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:0","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"2364:2:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[],"src":"2375:0:0"},"scope":64,"src":"2336:287:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":51,"nodeType":"Block","src":"2667:171:0","statements":[{"expression":{"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":47,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2809:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":48,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"2819:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":50,"nodeType":"ExpressionStatement","src":"2809:22:0"}]},"id":52,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:0","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[],"src":"2656:2:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"2667:0:0"},"scope":64,"src":"2629:209:0","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":62,"nodeType":"Block","src":"3081:43:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":58,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"3098:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":59,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"3109:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3098:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":57,"id":61,"nodeType":"Return","src":"3091:26:0"}]},"documentation":{"id":53,"nodeType":"StructuredDocumentation","src":"2844:168:0","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":63,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3026:23:0","nodeType":"FunctionDefinition","parameters":{"id":54,"nodeType":"ParameterList","parameters":[],"src":"3049:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63,"src":"3075:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":55,"name":"bool","nodeType":"ElementaryTypeName","src":"3075:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3074:6:0"},"scope":64,"src":"3017:107:0","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":65,"src":"888:2238:0","usedErrors":[]}],"src":"112:3015:0"},"id":0},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[142]},"id":143,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":66,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":67,"nodeType":"StructuredDocumentation","src":"131:70:1","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":142,"linearizedBaseContracts":[142],"name":"IERC20","nameLocation":"212:6:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"225:158:1","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":76,"name":"Transfer","nameLocation":"394:8:1","nodeType":"EventDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:1","nodeType":"VariableDeclaration","scope":76,"src":"403:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":72,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:1","nodeType":"VariableDeclaration","scope":76,"src":"425:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":74,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:1","nodeType":"VariableDeclaration","scope":76,"src":"445:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":73,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:1"},"src":"388:72:1"},{"anonymous":false,"documentation":{"id":77,"nodeType":"StructuredDocumentation","src":"466:148:1","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":85,"name":"Approval","nameLocation":"625:8:1","nodeType":"EventDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:1","nodeType":"VariableDeclaration","scope":85,"src":"634:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":81,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:1","nodeType":"VariableDeclaration","scope":85,"src":"657:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":83,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:1","nodeType":"VariableDeclaration","scope":85,"src":"682:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":82,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:1"},"src":"619:78:1"},{"documentation":{"id":86,"nodeType":"StructuredDocumentation","src":"703:66:1","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":91,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:1","nodeType":"FunctionDefinition","parameters":{"id":87,"nodeType":"ParameterList","parameters":[],"src":"794:2:1"},"returnParameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":91,"src":"820:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":88,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:1"},"scope":142,"src":"774:55:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"835:72:1","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":99,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:1","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"account","nameLocation":"939:7:1","nodeType":"VariableDeclaration","scope":99,"src":"931:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:1"},"returnParameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":99,"src":"971:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:1"},"scope":142,"src":"912:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"986:202:1","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":109,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:1","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"to","nameLocation":"1219:2:1","nodeType":"VariableDeclaration","scope":109,"src":"1211:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"amount","nameLocation":"1231:6:1","nodeType":"VariableDeclaration","scope":109,"src":"1223:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:1"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":109,"src":"1257:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":106,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:1"},"scope":142,"src":"1193:70:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"1269:264:1","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:1","nodeType":"FunctionDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112,"mutability":"mutable","name":"owner","nameLocation":"1565:5:1","nodeType":"VariableDeclaration","scope":119,"src":"1557:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":114,"mutability":"mutable","name":"spender","nameLocation":"1580:7:1","nodeType":"VariableDeclaration","scope":119,"src":"1572:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":113,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:1"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":119,"src":"1612:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:1"},"scope":142,"src":"1538:83:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"1627:642:1","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:1","nodeType":"FunctionDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"mutability":"mutable","name":"spender","nameLocation":"2299:7:1","nodeType":"VariableDeclaration","scope":129,"src":"2291:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"mutability":"mutable","name":"amount","nameLocation":"2316:6:1","nodeType":"VariableDeclaration","scope":129,"src":"2308:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":123,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":129,"src":"2342:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":126,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:1"},"scope":142,"src":"2274:74:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"2354:287:1","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":141,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:1","nodeType":"FunctionDefinition","parameters":{"id":137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"from","nameLocation":"2676:4:1","nodeType":"VariableDeclaration","scope":141,"src":"2668:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"to","nameLocation":"2690:2:1","nodeType":"VariableDeclaration","scope":141,"src":"2682:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":136,"mutability":"mutable","name":"amount","nameLocation":"2702:6:1","nodeType":"VariableDeclaration","scope":141,"src":"2694:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:1"},"returnParameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":141,"src":"2728:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":138,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:1"},"scope":142,"src":"2646:88:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":143,"src":"202:2534:1","usedErrors":[]}],"src":"106:2631:1"},"id":1},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[216]},"id":217,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":144,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"112:311:2","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":216,"linearizedBaseContracts":[216],"name":"Counters","nameLocation":"432:8:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":148,"members":[{"constant":false,"id":147,"mutability":"mutable","name":"_value","nameLocation":"794:6:2","nodeType":"VariableDeclaration","scope":148,"src":"786:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:2","nodeType":"StructDefinition","scope":216,"src":"447:374:2","visibility":"public"},{"body":{"id":159,"nodeType":"Block","src":"901:38:2","statements":[{"expression":{"expression":{"id":156,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"918:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":157,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":147,"src":"918:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":155,"id":158,"nodeType":"Return","src":"911:21:2"}]},"id":160,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:2","nodeType":"FunctionDefinition","parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"counter","nameLocation":"860:7:2","nodeType":"VariableDeclaration","scope":160,"src":"844:23:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":150,"nodeType":"UserDefinedTypeName","pathNode":{"id":149,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":148,"src":"844:7:2"},"referencedDeclaration":148,"src":"844:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:2"},"returnParameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":160,"src":"892:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":153,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:2"},"scope":216,"src":"827:112:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":173,"nodeType":"Block","src":"998:70:2","statements":[{"id":172,"nodeType":"UncheckedBlock","src":"1008:54:2","statements":[{"expression":{"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":166,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"1032:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":147,"src":"1032:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":171,"nodeType":"ExpressionStatement","src":"1032:19:2"}]}]},"id":174,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:2","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"counter","nameLocation":"980:7:2","nodeType":"VariableDeclaration","scope":174,"src":"964:23:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":162,"nodeType":"UserDefinedTypeName","pathNode":{"id":161,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":148,"src":"964:7:2"},"referencedDeclaration":148,"src":"964:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:2"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":216,"src":"945:123:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":201,"nodeType":"Block","src":"1127:176:2","statements":[{"assignments":[181],"declarations":[{"constant":false,"id":181,"mutability":"mutable","name":"value","nameLocation":"1145:5:2","nodeType":"VariableDeclaration","scope":201,"src":"1137:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":180,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":184,"initialValue":{"expression":{"id":182,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"1153:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":183,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":147,"src":"1153:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":186,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"1185:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":185,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":191,"nodeType":"ExpressionStatement","src":"1177:49:2"},{"id":200,"nodeType":"UncheckedBlock","src":"1236:61:2","statements":[{"expression":{"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":192,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"1260:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":194,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":147,"src":"1260:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"1277:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":199,"nodeType":"ExpressionStatement","src":"1260:26:2"}]}]},"id":202,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:2","nodeType":"FunctionDefinition","parameters":{"id":178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":177,"mutability":"mutable","name":"counter","nameLocation":"1109:7:2","nodeType":"VariableDeclaration","scope":202,"src":"1093:23:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":176,"nodeType":"UserDefinedTypeName","pathNode":{"id":175,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":148,"src":"1093:7:2"},"referencedDeclaration":148,"src":"1093:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:2"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"1127:0:2"},"scope":216,"src":"1074:229:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":214,"nodeType":"Block","src":"1358:35:2","statements":[{"expression":{"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":208,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"1368:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":147,"src":"1368:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":213,"nodeType":"ExpressionStatement","src":"1368:18:2"}]},"id":215,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:2","nodeType":"FunctionDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"counter","nameLocation":"1340:7:2","nodeType":"VariableDeclaration","scope":215,"src":"1324:23:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":204,"nodeType":"UserDefinedTypeName","pathNode":{"id":203,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":148,"src":"1324:7:2"},"referencedDeclaration":148,"src":"1324:7:2","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:2"},"returnParameters":{"id":207,"nodeType":"ParameterList","parameters":[],"src":"1358:0:2"},"scope":216,"src":"1309:84:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":217,"src":"424:971:2","usedErrors":[]}],"src":"87:1309:2"},"id":2},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1082]},"id":1083,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":218,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":219,"nodeType":"StructuredDocumentation","src":"128:73:3","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1082,"linearizedBaseContracts":[1082],"name":"Math","nameLocation":"210:4:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":223,"members":[{"id":220,"name":"Down","nameLocation":"245:4:3","nodeType":"EnumValue","src":"245:4:3"},{"id":221,"name":"Up","nameLocation":"287:2:3","nodeType":"EnumValue","src":"287:2:3"},{"id":222,"name":"Zero","nameLocation":"318:4:3","nodeType":"EnumValue","src":"318:4:3"}],"name":"Rounding","nameLocation":"226:8:3","nodeType":"EnumDefinition","src":"221:122:3"},{"body":{"id":240,"nodeType":"Block","src":"480:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":233,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"497:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":234,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"501:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":237,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"509:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:3","trueExpression":{"id":236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"505:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":232,"id":239,"nodeType":"Return","src":"490:20:3"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"349:59:3","text":" @dev Returns the largest of two numbers."},"id":241,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:3","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"a","nameLocation":"434:1:3","nodeType":"VariableDeclaration","scope":241,"src":"426:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":225,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"b","nameLocation":"445:1:3","nodeType":"VariableDeclaration","scope":241,"src":"437:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":227,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:3"},"returnParameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":241,"src":"471:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":230,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:3"},"scope":1082,"src":"413:104:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":258,"nodeType":"Block","src":"655:37:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":251,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"672:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":252,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"676:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":255,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"684:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:3","trueExpression":{"id":254,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"680:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":250,"id":257,"nodeType":"Return","src":"665:20:3"}]},"documentation":{"id":242,"nodeType":"StructuredDocumentation","src":"523:60:3","text":" @dev Returns the smallest of two numbers."},"id":259,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:3","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":244,"mutability":"mutable","name":"a","nameLocation":"609:1:3","nodeType":"VariableDeclaration","scope":259,"src":"601:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":243,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"b","nameLocation":"620:1:3","nodeType":"VariableDeclaration","scope":259,"src":"612:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:3"},"returnParameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":259,"src":"646:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:3"},"scope":1082,"src":"588:104:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":281,"nodeType":"Block","src":"876:82:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"931:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":270,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"935:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":272,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":273,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"941:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":274,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"945:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":268,"id":280,"nodeType":"Return","src":"923:28:3"}]},"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"698:102:3","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":282,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:3","nodeType":"FunctionDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"a","nameLocation":"830:1:3","nodeType":"VariableDeclaration","scope":282,"src":"822:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":261,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"b","nameLocation":"841:1:3","nodeType":"VariableDeclaration","scope":282,"src":"833:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":263,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:3"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":282,"src":"867:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:3"},"scope":1082,"src":"805:153:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":306,"nodeType":"Block","src":"1228:123:3","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":292,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"1316:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":296,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"1330:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":299,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":300,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"1339:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:3","trueExpression":{"hexValue":"30","id":295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":291,"id":305,"nodeType":"Return","src":"1309:35:3"}]},"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"964:188:3","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":307,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:3","nodeType":"FunctionDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"a","nameLocation":"1182:1:3","nodeType":"VariableDeclaration","scope":307,"src":"1174:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"b","nameLocation":"1193:1:3","nodeType":"VariableDeclaration","scope":307,"src":"1185:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:3"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":307,"src":"1219:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:3"},"scope":1082,"src":"1157:194:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":429,"nodeType":"Block","src":"1765:4115:3","statements":[{"id":428,"nodeType":"UncheckedBlock","src":"1775:4099:3","statements":[{"assignments":[320],"declarations":[{"constant":false,"id":320,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:3","nodeType":"VariableDeclaration","scope":428,"src":"2096:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":321,"nodeType":"VariableDeclarationStatement","src":"2096:13:3"},{"assignments":[323],"declarations":[{"constant":false,"id":323,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:3","nodeType":"VariableDeclaration","scope":428,"src":"2168:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":322,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":324,"nodeType":"VariableDeclarationStatement","src":"2168:13:3"},{"AST":{"nodeType":"YulBlock","src":"2248:157:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:3","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:3"},"nodeType":"YulFunctionCall","src":"2289:6:3"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:3"},"nodeType":"YulFunctionCall","src":"2276:20:3"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:3","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:3"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:3"},"nodeType":"YulFunctionCall","src":"2322:9:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:3"}]},{"nodeType":"YulAssignment","src":"2348:43:3","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:3"},"nodeType":"YulFunctionCall","src":"2361:14:3"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:3"},"nodeType":"YulFunctionCall","src":"2377:13:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:3"},"nodeType":"YulFunctionCall","src":"2357:34:3"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:3"}]}]},"evmVersion":"london","externalReferences":[{"declaration":320,"isOffset":false,"isSlot":false,"src":"2313:5:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"2369:5:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"2384:5:3","valueSize":1},{"declaration":323,"isOffset":false,"isSlot":false,"src":"2348:5:3","valueSize":1},{"declaration":310,"isOffset":false,"isSlot":false,"src":"2283:1:3","valueSize":1},{"declaration":310,"isOffset":false,"isSlot":false,"src":"2326:1:3","valueSize":1},{"declaration":312,"isOffset":false,"isSlot":false,"src":"2286:1:3","valueSize":1},{"declaration":312,"isOffset":false,"isSlot":false,"src":"2329:1:3","valueSize":1}],"id":325,"nodeType":"InlineAssembly","src":"2239:166:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":326,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"2486:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":334,"nodeType":"IfStatement","src":"2482:368:3","trueBody":{"id":333,"nodeType":"Block","src":"2498:352:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":329,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"2816:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":330,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2824:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":318,"id":332,"nodeType":"Return","src":"2809:26:3"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":336,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2960:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":337,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"2974:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":335,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2952:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":341,"nodeType":"ExpressionStatement","src":"2952:53:3"},{"assignments":[343],"declarations":[{"constant":false,"id":343,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:3","nodeType":"VariableDeclaration","scope":428,"src":"3261:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":342,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":344,"nodeType":"VariableDeclarationStatement","src":"3261:17:3"},{"AST":{"nodeType":"YulBlock","src":"3301:291:3","statements":[{"nodeType":"YulAssignment","src":"3370:38:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:3"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:3"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:3"},"nodeType":"YulFunctionCall","src":"3383:25:3"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:3"}]},{"nodeType":"YulAssignment","src":"3490:41:3","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:3"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:3"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:3"},"nodeType":"YulFunctionCall","src":"3510:20:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:3"},"nodeType":"YulFunctionCall","src":"3499:32:3"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:3"}]},{"nodeType":"YulAssignment","src":"3548:30:3","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:3"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:3"},"nodeType":"YulFunctionCall","src":"3557:21:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:3"}]}]},"evmVersion":"london","externalReferences":[{"declaration":314,"isOffset":false,"isSlot":false,"src":"3396:11:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"3524:5:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"3548:5:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"3561:5:3","valueSize":1},{"declaration":323,"isOffset":false,"isSlot":false,"src":"3490:5:3","valueSize":1},{"declaration":323,"isOffset":false,"isSlot":false,"src":"3503:5:3","valueSize":1},{"declaration":343,"isOffset":false,"isSlot":false,"src":"3370:9:3","valueSize":1},{"declaration":343,"isOffset":false,"isSlot":false,"src":"3513:9:3","valueSize":1},{"declaration":343,"isOffset":false,"isSlot":false,"src":"3568:9:3","valueSize":1},{"declaration":310,"isOffset":false,"isSlot":false,"src":"3390:1:3","valueSize":1},{"declaration":312,"isOffset":false,"isSlot":false,"src":"3393:1:3","valueSize":1}],"id":345,"nodeType":"InlineAssembly","src":"3292:300:3"},{"assignments":[347],"declarations":[{"constant":false,"id":347,"mutability":"mutable","name":"twos","nameLocation":"3907:4:3","nodeType":"VariableDeclaration","scope":428,"src":"3899:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":355,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3914:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:3","subExpression":{"id":349,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3930:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:3"},{"AST":{"nodeType":"YulBlock","src":"3969:362:3","statements":[{"nodeType":"YulAssignment","src":"4034:37:3","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:3"},"nodeType":"YulFunctionCall","src":"4049:22:3"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:3"}]},{"nodeType":"YulAssignment","src":"4138:25:3","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:3"},"nodeType":"YulFunctionCall","src":"4147:16:3"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:3"}]},{"nodeType":"YulAssignment","src":"4278:39:3","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:3","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:3"},"nodeType":"YulFunctionCall","src":"4294:12:3"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:3"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:3"},"nodeType":"YulFunctionCall","src":"4290:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:3"},"nodeType":"YulFunctionCall","src":"4286:31:3"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:3"}]}]},"evmVersion":"london","externalReferences":[{"declaration":314,"isOffset":false,"isSlot":false,"src":"4034:11:3","valueSize":1},{"declaration":314,"isOffset":false,"isSlot":false,"src":"4053:11:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"4138:5:3","valueSize":1},{"declaration":320,"isOffset":false,"isSlot":false,"src":"4151:5:3","valueSize":1},{"declaration":347,"isOffset":false,"isSlot":false,"src":"4066:4:3","valueSize":1},{"declaration":347,"isOffset":false,"isSlot":false,"src":"4158:4:3","valueSize":1},{"declaration":347,"isOffset":false,"isSlot":false,"src":"4278:4:3","valueSize":1},{"declaration":347,"isOffset":false,"isSlot":false,"src":"4301:4:3","valueSize":1},{"declaration":347,"isOffset":false,"isSlot":false,"src":"4308:4:3","valueSize":1}],"id":356,"nodeType":"InlineAssembly","src":"3960:371:3"},{"expression":{"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":357,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"4397:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":358,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"4406:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":359,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"4414:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":362,"nodeType":"ExpressionStatement","src":"4397:21:3"},{"assignments":[364],"declarations":[{"constant":false,"id":364,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:3","nodeType":"VariableDeclaration","scope":428,"src":"4736:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":371,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":366,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"4759:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":368,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:3"},{"expression":{"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":372,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"4992:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":374,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5007:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":375,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5021:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":379,"nodeType":"ExpressionStatement","src":"4992:36:3"},{"expression":{"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":380,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5061:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":382,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5076:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":383,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5090:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":387,"nodeType":"ExpressionStatement","src":"5061:36:3"},{"expression":{"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":388,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5131:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":390,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5146:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":391,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5160:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":395,"nodeType":"ExpressionStatement","src":"5131:36:3"},{"expression":{"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":396,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5201:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":398,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5216:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":399,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5230:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":403,"nodeType":"ExpressionStatement","src":"5201:36:3"},{"expression":{"id":410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":404,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5271:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":406,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5286:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":407,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5300:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":411,"nodeType":"ExpressionStatement","src":"5271:36:3"},{"expression":{"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":412,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5342:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":414,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5357:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":415,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5371:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":419,"nodeType":"ExpressionStatement","src":"5342:36:3"},{"expression":{"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":420,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5812:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":421,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":320,"src":"5821:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":422,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5829:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":425,"nodeType":"ExpressionStatement","src":"5812:24:3"},{"expression":{"id":426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5857:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":318,"id":427,"nodeType":"Return","src":"5850:13:3"}]}]},"documentation":{"id":308,"nodeType":"StructuredDocumentation","src":"1357:305:3","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":430,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:3","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"x","nameLocation":"1691:1:3","nodeType":"VariableDeclaration","scope":430,"src":"1683:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":309,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":312,"mutability":"mutable","name":"y","nameLocation":"1702:1:3","nodeType":"VariableDeclaration","scope":430,"src":"1694:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":311,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":314,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:3","nodeType":"VariableDeclaration","scope":430,"src":"1705:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:3"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"result","nameLocation":"1757:6:3","nodeType":"VariableDeclaration","scope":430,"src":"1749:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:3"},"scope":1082,"src":"1667:4213:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":473,"nodeType":"Block","src":"6122:189:3","statements":[{"assignments":[446],"declarations":[{"constant":false,"id":446,"mutability":"mutable","name":"result","nameLocation":"6140:6:3","nodeType":"VariableDeclaration","scope":473,"src":"6132:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":452,"initialValue":{"arguments":[{"id":448,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6156:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":449,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6159:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":450,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"6162:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":447,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[430,474],"referencedDeclaration":430,"src":"6149:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6149:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":453,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"6188:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":454,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"6200:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$223_$","typeString":"type(enum Math.Rounding)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":221,"src":"6200:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"src":"6188:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":458,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6222:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":459,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"6225:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":460,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"6228:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":457,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:3","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6215:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":470,"nodeType":"IfStatement","src":"6184:98:3","trueBody":{"id":469,"nodeType":"Block","src":"6246:36:3","statements":[{"expression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":465,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"6260:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":468,"nodeType":"ExpressionStatement","src":"6260:11:3"}]}},{"expression":{"id":471,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"6298:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":444,"id":472,"nodeType":"Return","src":"6291:13:3"}]},"documentation":{"id":431,"nodeType":"StructuredDocumentation","src":"5886:121:3","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":474,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:3","nodeType":"FunctionDefinition","parameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"x","nameLocation":"6036:1:3","nodeType":"VariableDeclaration","scope":474,"src":"6028:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":435,"mutability":"mutable","name":"y","nameLocation":"6047:1:3","nodeType":"VariableDeclaration","scope":474,"src":"6039:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:3","nodeType":"VariableDeclaration","scope":474,"src":"6050:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:3","nodeType":"VariableDeclaration","scope":474,"src":"6071:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"typeName":{"id":439,"nodeType":"UserDefinedTypeName","pathNode":{"id":438,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":223,"src":"6071:8:3"},"referencedDeclaration":223,"src":"6071:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:3"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":474,"src":"6113:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:3"},"scope":1082,"src":"6012:299:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":585,"nodeType":"Block","src":"6587:1585:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":482,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"6601:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":488,"nodeType":"IfStatement","src":"6597:45:3","trueBody":{"id":487,"nodeType":"Block","src":"6609:33:3","statements":[{"expression":{"hexValue":"30","id":485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":481,"id":486,"nodeType":"Return","src":"6623:8:3"}]}},{"assignments":[490],"declarations":[{"constant":false,"id":490,"mutability":"mutable","name":"result","nameLocation":"7329:6:3","nodeType":"VariableDeclaration","scope":585,"src":"7321:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":489,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":499,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":493,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7349:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":492,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[754,790],"referencedDeclaration":754,"src":"7344:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":497,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:3"},{"id":584,"nodeType":"UncheckedBlock","src":"7758:408:3","statements":[{"expression":{"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":500,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7782:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7792:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":502,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7801:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7805:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":510,"nodeType":"ExpressionStatement","src":"7782:35:3"},{"expression":{"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":511,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7831:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7841:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7850:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7854:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":521,"nodeType":"ExpressionStatement","src":"7831:35:3"},{"expression":{"id":531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":522,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7880:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7890:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":524,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7899:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":525,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7903:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":528,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":532,"nodeType":"ExpressionStatement","src":"7880:35:3"},{"expression":{"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":533,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7929:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7939:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":535,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7948:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7952:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":539,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":543,"nodeType":"ExpressionStatement","src":"7929:35:3"},{"expression":{"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":544,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7978:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":545,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"7988:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":546,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"7997:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8001:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":550,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":554,"nodeType":"ExpressionStatement","src":"7978:35:3"},{"expression":{"id":564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8027:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":556,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8037:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":557,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"8046:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":558,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8050:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":561,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":565,"nodeType":"ExpressionStatement","src":"8027:35:3"},{"expression":{"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":566,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8076:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8086:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":568,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"8095:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":569,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8099:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":572,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":576,"nodeType":"ExpressionStatement","src":"8076:35:3"},{"expression":{"arguments":[{"id":578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8136:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":579,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"8144:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"8148:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":577,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"8132:3:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8132:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":481,"id":583,"nodeType":"Return","src":"8125:30:3"}]}]},"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"6317:208:3","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":586,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:3","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"a","nameLocation":"6552:1:3","nodeType":"VariableDeclaration","scope":586,"src":"6544:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":586,"src":"6578:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:3"},"scope":1082,"src":"6530:1642:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":621,"nodeType":"Block","src":"8348:161:3","statements":[{"id":620,"nodeType":"UncheckedBlock","src":"8358:145:3","statements":[{"assignments":[598],"declarations":[{"constant":false,"id":598,"mutability":"mutable","name":"result","nameLocation":"8390:6:3","nodeType":"VariableDeclaration","scope":620,"src":"8382:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":597,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":602,"initialValue":{"arguments":[{"id":600,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8404:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":599,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[586,622],"referencedDeclaration":586,"src":"8399:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8399:7:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"8427:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":604,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"8437:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":605,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"8449:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$223_$","typeString":"type(enum Math.Rounding)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":221,"src":"8449:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"src":"8437:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":608,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"8464:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":609,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"8473:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":611,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"8482:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:3","trueExpression":{"hexValue":"31","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":596,"id":619,"nodeType":"Return","src":"8420:72:3"}]}]},"documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"8178:89:3","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":622,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:3","nodeType":"FunctionDefinition","parameters":{"id":593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"a","nameLocation":"8294:1:3","nodeType":"VariableDeclaration","scope":622,"src":"8286:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:3","nodeType":"VariableDeclaration","scope":622,"src":"8297:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"typeName":{"id":591,"nodeType":"UserDefinedTypeName","pathNode":{"id":590,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":223,"src":"8297:8:3"},"referencedDeclaration":223,"src":"8297:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:3"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":622,"src":"8339:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":594,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:3"},"scope":1082,"src":"8272:237:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":753,"nodeType":"Block","src":"8694:922:3","statements":[{"assignments":[631],"declarations":[{"constant":false,"id":631,"mutability":"mutable","name":"result","nameLocation":"8712:6:3","nodeType":"VariableDeclaration","scope":753,"src":"8704:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":630,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":633,"initialValue":{"hexValue":"30","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:3"},{"id":750,"nodeType":"UncheckedBlock","src":"8732:855:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8760:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":648,"nodeType":"IfStatement","src":"8756:99:3","trueBody":{"id":647,"nodeType":"Block","src":"8778:77:3","statements":[{"expression":{"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8796:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":642,"nodeType":"ExpressionStatement","src":"8796:13:3"},{"expression":{"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":643,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"8827:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":646,"nodeType":"ExpressionStatement","src":"8827:13:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8872:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":663,"nodeType":"IfStatement","src":"8868:96:3","trueBody":{"id":662,"nodeType":"Block","src":"8889:75:3","statements":[{"expression":{"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8907:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":657,"nodeType":"ExpressionStatement","src":"8907:12:3"},{"expression":{"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"8937:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":661,"nodeType":"ExpressionStatement","src":"8937:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":664,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"8981:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":678,"nodeType":"IfStatement","src":"8977:96:3","trueBody":{"id":677,"nodeType":"Block","src":"8998:75:3","statements":[{"expression":{"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9016:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":672,"nodeType":"ExpressionStatement","src":"9016:12:3"},{"expression":{"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9046:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":676,"nodeType":"ExpressionStatement","src":"9046:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9090:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":693,"nodeType":"IfStatement","src":"9086:96:3","trueBody":{"id":692,"nodeType":"Block","src":"9107:75:3","statements":[{"expression":{"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9125:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":687,"nodeType":"ExpressionStatement","src":"9125:12:3"},{"expression":{"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9155:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":691,"nodeType":"ExpressionStatement","src":"9155:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9199:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":708,"nodeType":"IfStatement","src":"9195:93:3","trueBody":{"id":707,"nodeType":"Block","src":"9215:73:3","statements":[{"expression":{"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":699,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9233:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":702,"nodeType":"ExpressionStatement","src":"9233:11:3"},{"expression":{"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9262:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":706,"nodeType":"ExpressionStatement","src":"9262:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9305:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":723,"nodeType":"IfStatement","src":"9301:93:3","trueBody":{"id":722,"nodeType":"Block","src":"9321:73:3","statements":[{"expression":{"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9339:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":717,"nodeType":"ExpressionStatement","src":"9339:11:3"},{"expression":{"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9368:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":721,"nodeType":"ExpressionStatement","src":"9368:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9411:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":738,"nodeType":"IfStatement","src":"9407:93:3","trueBody":{"id":737,"nodeType":"Block","src":"9427:73:3","statements":[{"expression":{"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9445:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":732,"nodeType":"ExpressionStatement","src":"9445:11:3"},{"expression":{"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9474:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":736,"nodeType":"ExpressionStatement","src":"9474:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"9517:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":749,"nodeType":"IfStatement","src":"9513:64:3","trueBody":{"id":748,"nodeType":"Block","src":"9533:44:3","statements":[{"expression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":744,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9551:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":747,"nodeType":"ExpressionStatement","src":"9551:11:3"}]}}]},{"expression":{"id":751,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"9603:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":629,"id":752,"nodeType":"Return","src":"9596:13:3"}]},"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"8515:113:3","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":754,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:3","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"value","nameLocation":"8655:5:3","nodeType":"VariableDeclaration","scope":754,"src":"8647:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":624,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:3"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":754,"src":"8685:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:3"},"scope":1082,"src":"8633:983:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":789,"nodeType":"Block","src":"9849:165:3","statements":[{"id":788,"nodeType":"UncheckedBlock","src":"9859:149:3","statements":[{"assignments":[766],"declarations":[{"constant":false,"id":766,"mutability":"mutable","name":"result","nameLocation":"9891:6:3","nodeType":"VariableDeclaration","scope":788,"src":"9883:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":770,"initialValue":{"arguments":[{"id":768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"9905:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":767,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[754,790],"referencedDeclaration":754,"src":"9900:4:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9900:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":771,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"9932:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":772,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"9942:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":773,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"9954:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$223_$","typeString":"type(enum Math.Rounding)"}},"id":774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":221,"src":"9954:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"src":"9942:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"9974:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":779,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"9983:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:3","trueExpression":{"hexValue":"31","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":785,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":764,"id":787,"nodeType":"Return","src":"9925:72:3"}]}]},"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"9622:142:3","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":790,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:3","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"value","nameLocation":"9791:5:3","nodeType":"VariableDeclaration","scope":790,"src":"9783:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:3","nodeType":"VariableDeclaration","scope":790,"src":"9798:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"typeName":{"id":759,"nodeType":"UserDefinedTypeName","pathNode":{"id":758,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":223,"src":"9798:8:3"},"referencedDeclaration":223,"src":"9798:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:3"},"returnParameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":790,"src":"9840:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:3"},"scope":1082,"src":"9769:245:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":918,"nodeType":"Block","src":"10201:854:3","statements":[{"assignments":[799],"declarations":[{"constant":false,"id":799,"mutability":"mutable","name":"result","nameLocation":"10219:6:3","nodeType":"VariableDeclaration","scope":918,"src":"10211:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":801,"initialValue":{"hexValue":"30","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:3"},{"id":915,"nodeType":"UncheckedBlock","src":"10239:787:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10267:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":818,"nodeType":"IfStatement","src":"10263:103:3","trueBody":{"id":817,"nodeType":"Block","src":"10286:80:3","statements":[{"expression":{"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10304:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":812,"nodeType":"ExpressionStatement","src":"10304:17:3"},{"expression":{"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":813,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10339:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":816,"nodeType":"ExpressionStatement","src":"10339:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10383:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":835,"nodeType":"IfStatement","src":"10379:103:3","trueBody":{"id":834,"nodeType":"Block","src":"10402:80:3","statements":[{"expression":{"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":824,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10420:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":829,"nodeType":"ExpressionStatement","src":"10420:17:3"},{"expression":{"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10455:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":833,"nodeType":"ExpressionStatement","src":"10455:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":836,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10499:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":839,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":852,"nodeType":"IfStatement","src":"10495:103:3","trueBody":{"id":851,"nodeType":"Block","src":"10518:80:3","statements":[{"expression":{"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":841,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10536:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:3","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":846,"nodeType":"ExpressionStatement","src":"10536:17:3"},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":847,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10571:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":850,"nodeType":"ExpressionStatement","src":"10571:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":853,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10615:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":869,"nodeType":"IfStatement","src":"10611:100:3","trueBody":{"id":868,"nodeType":"Block","src":"10633:78:3","statements":[{"expression":{"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10651:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":863,"nodeType":"ExpressionStatement","src":"10651:16:3"},{"expression":{"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10685:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":867,"nodeType":"ExpressionStatement","src":"10685:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10728:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":886,"nodeType":"IfStatement","src":"10724:100:3","trueBody":{"id":885,"nodeType":"Block","src":"10746:78:3","statements":[{"expression":{"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10764:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":880,"nodeType":"ExpressionStatement","src":"10764:16:3"},{"expression":{"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":881,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10798:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":884,"nodeType":"ExpressionStatement","src":"10798:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":887,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10841:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":890,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":903,"nodeType":"IfStatement","src":"10837:100:3","trueBody":{"id":902,"nodeType":"Block","src":"10859:78:3","statements":[{"expression":{"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10877:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:3","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":897,"nodeType":"ExpressionStatement","src":"10877:16:3"},{"expression":{"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":898,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10911:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":901,"nodeType":"ExpressionStatement","src":"10911:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":904,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"10954:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":914,"nodeType":"IfStatement","src":"10950:66:3","trueBody":{"id":913,"nodeType":"Block","src":"10972:44:3","statements":[{"expression":{"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":909,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"10990:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":912,"nodeType":"ExpressionStatement","src":"10990:11:3"}]}}]},{"expression":{"id":916,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"11042:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":797,"id":917,"nodeType":"Return","src":"11035:13:3"}]},"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"10020:114:3","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":919,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:3","nodeType":"FunctionDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":793,"mutability":"mutable","name":"value","nameLocation":"10162:5:3","nodeType":"VariableDeclaration","scope":919,"src":"10154:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":792,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:3"},"returnParameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":919,"src":"10192:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":795,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:3"},"scope":1082,"src":"10139:916:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":954,"nodeType":"Block","src":"11290:167:3","statements":[{"id":953,"nodeType":"UncheckedBlock","src":"11300:151:3","statements":[{"assignments":[931],"declarations":[{"constant":false,"id":931,"mutability":"mutable","name":"result","nameLocation":"11332:6:3","nodeType":"VariableDeclaration","scope":953,"src":"11324:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":930,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":935,"initialValue":{"arguments":[{"id":933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11347:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":932,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[919,955],"referencedDeclaration":919,"src":"11341:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11341:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"11374:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":937,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"11384:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":938,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"11396:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$223_$","typeString":"type(enum Math.Rounding)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":221,"src":"11396:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"src":"11384:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:3","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":942,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"11417:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":944,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"11426:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:3","trueExpression":{"hexValue":"31","id":947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":950,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":929,"id":952,"nodeType":"Return","src":"11367:73:3"}]}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"11061:143:3","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":955,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:3","nodeType":"FunctionDefinition","parameters":{"id":926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"value","nameLocation":"11232:5:3","nodeType":"VariableDeclaration","scope":955,"src":"11224:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":921,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":925,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:3","nodeType":"VariableDeclaration","scope":955,"src":"11239:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"typeName":{"id":924,"nodeType":"UserDefinedTypeName","pathNode":{"id":923,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":223,"src":"11239:8:3"},"referencedDeclaration":223,"src":"11239:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:3"},"returnParameters":{"id":929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":955,"src":"11281:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":927,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:3"},"scope":1082,"src":"11209:248:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1041,"nodeType":"Block","src":"11771:600:3","statements":[{"assignments":[964],"declarations":[{"constant":false,"id":964,"mutability":"mutable","name":"result","nameLocation":"11789:6:3","nodeType":"VariableDeclaration","scope":1041,"src":"11781:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":966,"initialValue":{"hexValue":"30","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:3"},{"id":1038,"nodeType":"UncheckedBlock","src":"11809:533:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"11837:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":981,"nodeType":"IfStatement","src":"11833:98:3","trueBody":{"id":980,"nodeType":"Block","src":"11855:76:3","statements":[{"expression":{"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":972,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"11873:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:3","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":975,"nodeType":"ExpressionStatement","src":"11873:13:3"},{"expression":{"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":976,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"11904:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":979,"nodeType":"ExpressionStatement","src":"11904:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"11948:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":996,"nodeType":"IfStatement","src":"11944:95:3","trueBody":{"id":995,"nodeType":"Block","src":"11965:74:3","statements":[{"expression":{"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"11983:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:3","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":990,"nodeType":"ExpressionStatement","src":"11983:12:3"},{"expression":{"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"12013:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":994,"nodeType":"ExpressionStatement","src":"12013:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"12056:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1011,"nodeType":"IfStatement","src":"12052:95:3","trueBody":{"id":1010,"nodeType":"Block","src":"12073:74:3","statements":[{"expression":{"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"12091:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:3","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1005,"nodeType":"ExpressionStatement","src":"12091:12:3"},{"expression":{"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"12121:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:3","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1009,"nodeType":"ExpressionStatement","src":"12121:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"12164:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1026,"nodeType":"IfStatement","src":"12160:95:3","trueBody":{"id":1025,"nodeType":"Block","src":"12181:74:3","statements":[{"expression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"12199:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:3","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1020,"nodeType":"ExpressionStatement","src":"12199:12:3"},{"expression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1021,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"12229:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1024,"nodeType":"ExpressionStatement","src":"12229:11:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"12272:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:3","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1037,"nodeType":"IfStatement","src":"12268:64:3","trueBody":{"id":1036,"nodeType":"Block","src":"12288:44:3","statements":[{"expression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"12306:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1035,"nodeType":"ExpressionStatement","src":"12306:11:3"}]}}]},{"expression":{"id":1039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"12358:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":962,"id":1040,"nodeType":"Return","src":"12351:13:3"}]},"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"11463:240:3","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1042,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:3","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"value","nameLocation":"11732:5:3","nodeType":"VariableDeclaration","scope":1042,"src":"11724:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":957,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:3"},"returnParameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1042,"src":"11762:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":960,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:3"},"scope":1082,"src":"11708:663:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1080,"nodeType":"Block","src":"12608:174:3","statements":[{"id":1079,"nodeType":"UncheckedBlock","src":"12618:158:3","statements":[{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"result","nameLocation":"12650:6:3","nodeType":"VariableDeclaration","scope":1079,"src":"12642:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1058,"initialValue":{"arguments":[{"id":1056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"12666:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1055,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1042,1081],"referencedDeclaration":1042,"src":"12659:6:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12659:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12693:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12703:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1061,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"12715:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$223_$","typeString":"type(enum Math.Rounding)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":221,"src":"12715:11:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"src":"12703:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1065,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12736:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:3","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1068,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"12751:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:3","trueExpression":{"hexValue":"31","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1076,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1052,"id":1078,"nodeType":"Return","src":"12686:79:3"}]}]},"documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"12377:144:3","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1081,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:3","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"value","nameLocation":"12550:5:3","nodeType":"VariableDeclaration","scope":1081,"src":"12542:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:3","nodeType":"VariableDeclaration","scope":1081,"src":"12557:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"},"typeName":{"id":1047,"nodeType":"UserDefinedTypeName","pathNode":{"id":1046,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":223,"src":"12557:8:3"},"referencedDeclaration":223,"src":"12557:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$223","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:3"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1081,"src":"12599:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:3"},"scope":1082,"src":"12526:256:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1083,"src":"202:12582:3","usedErrors":[]}],"src":"103:12682:3"},"id":3},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","exportedSymbols":{"SafeCast":[2623]},"id":2624,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1084,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"192:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeCast","contractDependencies":[],"contractKind":"library","documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"217:709:4","text":" @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n checks.\n Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n easily result in undesired exploitation or bugs, since developers usually\n assume that overflows raise errors. `SafeCast` restores this intuition by\n reverting the transaction when such an operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always.\n Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n all math on `uint256` and `int256` and then downcasting."},"fullyImplemented":true,"id":2623,"linearizedBaseContracts":[2623],"name":"SafeCast","nameLocation":"935:8:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1109,"nodeType":"Block","src":"1339:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"1357:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1371:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":1096,"name":"uint248","nodeType":"ElementaryTypeName","src":"1371:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"}],"id":1095,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1366:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1366:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint248","typeString":"type(uint248)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"1366:17:4","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"src":"1357:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234382062697473","id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1385:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""},"value":"SafeCast: value doesn't fit in 248 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""}],"id":1093,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1349:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1349:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1103,"nodeType":"ExpressionStatement","src":"1349:78:4"},{"expression":{"arguments":[{"id":1106,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"1452:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1444:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint248_$","typeString":"type(uint248)"},"typeName":{"id":1104,"name":"uint248","nodeType":"ElementaryTypeName","src":"1444:7:4","typeDescriptions":{}}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1444:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"functionReturnParameters":1092,"id":1108,"nodeType":"Return","src":"1437:21:4"}]},"documentation":{"id":1086,"nodeType":"StructuredDocumentation","src":"950:318:4","text":" @dev Returns the downcasted uint248 from uint256, reverting on\n overflow (when the input is greater than largest uint248).\n Counterpart to Solidity's `uint248` operator.\n Requirements:\n - input must fit into 248 bits\n _Available since v4.7._"},"id":1110,"implemented":true,"kind":"function","modifiers":[],"name":"toUint248","nameLocation":"1282:9:4","nodeType":"FunctionDefinition","parameters":{"id":1089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"value","nameLocation":"1300:5:4","nodeType":"VariableDeclaration","scope":1110,"src":"1292:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1087,"name":"uint256","nodeType":"ElementaryTypeName","src":"1292:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1291:15:4"},"returnParameters":{"id":1092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1110,"src":"1330:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"},"typeName":{"id":1090,"name":"uint248","nodeType":"ElementaryTypeName","src":"1330:7:4","typeDescriptions":{"typeIdentifier":"t_uint248","typeString":"uint248"}},"visibility":"internal"}],"src":"1329:9:4"},"scope":2623,"src":"1273:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1134,"nodeType":"Block","src":"1860:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"1878:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1892:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":1121,"name":"uint240","nodeType":"ElementaryTypeName","src":"1892:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"}],"id":1120,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1887:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1887:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint240","typeString":"type(uint240)"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"1887:17:4","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"src":"1878:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234302062697473","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1906:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""},"value":"SafeCast: value doesn't fit in 240 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""}],"id":1118,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1870:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1870:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1128,"nodeType":"ExpressionStatement","src":"1870:78:4"},{"expression":{"arguments":[{"id":1131,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"1973:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1965:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint240_$","typeString":"type(uint240)"},"typeName":{"id":1129,"name":"uint240","nodeType":"ElementaryTypeName","src":"1965:7:4","typeDescriptions":{}}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1965:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"functionReturnParameters":1117,"id":1133,"nodeType":"Return","src":"1958:21:4"}]},"documentation":{"id":1111,"nodeType":"StructuredDocumentation","src":"1471:318:4","text":" @dev Returns the downcasted uint240 from uint256, reverting on\n overflow (when the input is greater than largest uint240).\n Counterpart to Solidity's `uint240` operator.\n Requirements:\n - input must fit into 240 bits\n _Available since v4.7._"},"id":1135,"implemented":true,"kind":"function","modifiers":[],"name":"toUint240","nameLocation":"1803:9:4","nodeType":"FunctionDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1113,"mutability":"mutable","name":"value","nameLocation":"1821:5:4","nodeType":"VariableDeclaration","scope":1135,"src":"1813:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1812:15:4"},"returnParameters":{"id":1117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1135,"src":"1851:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"},"typeName":{"id":1115,"name":"uint240","nodeType":"ElementaryTypeName","src":"1851:7:4","typeDescriptions":{"typeIdentifier":"t_uint240","typeString":"uint240"}},"visibility":"internal"}],"src":"1850:9:4"},"scope":2623,"src":"1794:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1159,"nodeType":"Block","src":"2381:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"2399:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2413:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":1146,"name":"uint232","nodeType":"ElementaryTypeName","src":"2413:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"}],"id":1145,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2408:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2408:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint232","typeString":"type(uint232)"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2408:17:4","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"src":"2399:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203233322062697473","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2427:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""},"value":"SafeCast: value doesn't fit in 232 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""}],"id":1143,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2391:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2391:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1153,"nodeType":"ExpressionStatement","src":"2391:78:4"},{"expression":{"arguments":[{"id":1156,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"2494:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2486:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint232_$","typeString":"type(uint232)"},"typeName":{"id":1154,"name":"uint232","nodeType":"ElementaryTypeName","src":"2486:7:4","typeDescriptions":{}}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2486:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"functionReturnParameters":1142,"id":1158,"nodeType":"Return","src":"2479:21:4"}]},"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"1992:318:4","text":" @dev Returns the downcasted uint232 from uint256, reverting on\n overflow (when the input is greater than largest uint232).\n Counterpart to Solidity's `uint232` operator.\n Requirements:\n - input must fit into 232 bits\n _Available since v4.7._"},"id":1160,"implemented":true,"kind":"function","modifiers":[],"name":"toUint232","nameLocation":"2324:9:4","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"value","nameLocation":"2342:5:4","nodeType":"VariableDeclaration","scope":1160,"src":"2334:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2333:15:4"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1160,"src":"2372:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"},"typeName":{"id":1140,"name":"uint232","nodeType":"ElementaryTypeName","src":"2372:7:4","typeDescriptions":{"typeIdentifier":"t_uint232","typeString":"uint232"}},"visibility":"internal"}],"src":"2371:9:4"},"scope":2623,"src":"2315:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1184,"nodeType":"Block","src":"2902:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"2920:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2934:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":1171,"name":"uint224","nodeType":"ElementaryTypeName","src":"2934:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"}],"id":1170,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2929:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2929:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint224","typeString":"type(uint224)"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"2929:17:4","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"src":"2920:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203232342062697473","id":1176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2948:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""},"value":"SafeCast: value doesn't fit in 224 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""}],"id":1168,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2912:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2912:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1178,"nodeType":"ExpressionStatement","src":"2912:78:4"},{"expression":{"arguments":[{"id":1181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"3015:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3007:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":{"id":1179,"name":"uint224","nodeType":"ElementaryTypeName","src":"3007:7:4","typeDescriptions":{}}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3007:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":1167,"id":1183,"nodeType":"Return","src":"3000:21:4"}]},"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"2513:318:4","text":" @dev Returns the downcasted uint224 from uint256, reverting on\n overflow (when the input is greater than largest uint224).\n Counterpart to Solidity's `uint224` operator.\n Requirements:\n - input must fit into 224 bits\n _Available since v4.2._"},"id":1185,"implemented":true,"kind":"function","modifiers":[],"name":"toUint224","nameLocation":"2845:9:4","nodeType":"FunctionDefinition","parameters":{"id":1164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"value","nameLocation":"2863:5:4","nodeType":"VariableDeclaration","scope":1185,"src":"2855:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"2855:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2854:15:4"},"returnParameters":{"id":1167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1185,"src":"2893:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":1165,"name":"uint224","nodeType":"ElementaryTypeName","src":"2893:7:4","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"visibility":"internal"}],"src":"2892:9:4"},"scope":2623,"src":"2836:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1209,"nodeType":"Block","src":"3423:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"3441:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3455:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":1196,"name":"uint216","nodeType":"ElementaryTypeName","src":"3455:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"}],"id":1195,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3450:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3450:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint216","typeString":"type(uint216)"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3450:17:4","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"src":"3441:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203231362062697473","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3469:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""},"value":"SafeCast: value doesn't fit in 216 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""}],"id":1193,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3433:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3433:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1203,"nodeType":"ExpressionStatement","src":"3433:78:4"},{"expression":{"arguments":[{"id":1206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"3536:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3528:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint216_$","typeString":"type(uint216)"},"typeName":{"id":1204,"name":"uint216","nodeType":"ElementaryTypeName","src":"3528:7:4","typeDescriptions":{}}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3528:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"functionReturnParameters":1192,"id":1208,"nodeType":"Return","src":"3521:21:4"}]},"documentation":{"id":1186,"nodeType":"StructuredDocumentation","src":"3034:318:4","text":" @dev Returns the downcasted uint216 from uint256, reverting on\n overflow (when the input is greater than largest uint216).\n Counterpart to Solidity's `uint216` operator.\n Requirements:\n - input must fit into 216 bits\n _Available since v4.7._"},"id":1210,"implemented":true,"kind":"function","modifiers":[],"name":"toUint216","nameLocation":"3366:9:4","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1188,"mutability":"mutable","name":"value","nameLocation":"3384:5:4","nodeType":"VariableDeclaration","scope":1210,"src":"3376:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"3376:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3375:15:4"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"3414:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"},"typeName":{"id":1190,"name":"uint216","nodeType":"ElementaryTypeName","src":"3414:7:4","typeDescriptions":{"typeIdentifier":"t_uint216","typeString":"uint216"}},"visibility":"internal"}],"src":"3413:9:4"},"scope":2623,"src":"3357:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1234,"nodeType":"Block","src":"3944:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"3962:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3976:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":1221,"name":"uint208","nodeType":"ElementaryTypeName","src":"3976:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"}],"id":1220,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3971:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3971:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint208","typeString":"type(uint208)"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"3971:17:4","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"src":"3962:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230382062697473","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3990:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""},"value":"SafeCast: value doesn't fit in 208 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""}],"id":1218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3954:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3954:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1228,"nodeType":"ExpressionStatement","src":"3954:78:4"},{"expression":{"arguments":[{"id":1231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"4057:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4049:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint208_$","typeString":"type(uint208)"},"typeName":{"id":1229,"name":"uint208","nodeType":"ElementaryTypeName","src":"4049:7:4","typeDescriptions":{}}},"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4049:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"functionReturnParameters":1217,"id":1233,"nodeType":"Return","src":"4042:21:4"}]},"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"3555:318:4","text":" @dev Returns the downcasted uint208 from uint256, reverting on\n overflow (when the input is greater than largest uint208).\n Counterpart to Solidity's `uint208` operator.\n Requirements:\n - input must fit into 208 bits\n _Available since v4.7._"},"id":1235,"implemented":true,"kind":"function","modifiers":[],"name":"toUint208","nameLocation":"3887:9:4","nodeType":"FunctionDefinition","parameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"value","nameLocation":"3905:5:4","nodeType":"VariableDeclaration","scope":1235,"src":"3897:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1212,"name":"uint256","nodeType":"ElementaryTypeName","src":"3897:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3896:15:4"},"returnParameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1235,"src":"3935:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"},"typeName":{"id":1215,"name":"uint208","nodeType":"ElementaryTypeName","src":"3935:7:4","typeDescriptions":{"typeIdentifier":"t_uint208","typeString":"uint208"}},"visibility":"internal"}],"src":"3934:9:4"},"scope":2623,"src":"3878:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1259,"nodeType":"Block","src":"4465:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"4483:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4497:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":1246,"name":"uint200","nodeType":"ElementaryTypeName","src":"4497:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"}],"id":1245,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4492:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4492:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint200","typeString":"type(uint200)"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"4492:17:4","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"src":"4483:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230302062697473","id":1251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4511:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""},"value":"SafeCast: value doesn't fit in 200 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""}],"id":1243,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4475:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4475:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1253,"nodeType":"ExpressionStatement","src":"4475:78:4"},{"expression":{"arguments":[{"id":1256,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"4578:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4570:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint200_$","typeString":"type(uint200)"},"typeName":{"id":1254,"name":"uint200","nodeType":"ElementaryTypeName","src":"4570:7:4","typeDescriptions":{}}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4570:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"functionReturnParameters":1242,"id":1258,"nodeType":"Return","src":"4563:21:4"}]},"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"4076:318:4","text":" @dev Returns the downcasted uint200 from uint256, reverting on\n overflow (when the input is greater than largest uint200).\n Counterpart to Solidity's `uint200` operator.\n Requirements:\n - input must fit into 200 bits\n _Available since v4.7._"},"id":1260,"implemented":true,"kind":"function","modifiers":[],"name":"toUint200","nameLocation":"4408:9:4","nodeType":"FunctionDefinition","parameters":{"id":1239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"value","nameLocation":"4426:5:4","nodeType":"VariableDeclaration","scope":1260,"src":"4418:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"4418:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4417:15:4"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1260,"src":"4456:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"},"typeName":{"id":1240,"name":"uint200","nodeType":"ElementaryTypeName","src":"4456:7:4","typeDescriptions":{"typeIdentifier":"t_uint200","typeString":"uint200"}},"visibility":"internal"}],"src":"4455:9:4"},"scope":2623,"src":"4399:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1284,"nodeType":"Block","src":"4986:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"5004:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5018:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":1271,"name":"uint192","nodeType":"ElementaryTypeName","src":"5018:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"}],"id":1270,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5013:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5013:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint192","typeString":"type(uint192)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"5013:17:4","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"src":"5004:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203139322062697473","id":1276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5032:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""},"value":"SafeCast: value doesn't fit in 192 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""}],"id":1268,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4996:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4996:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1278,"nodeType":"ExpressionStatement","src":"4996:78:4"},{"expression":{"arguments":[{"id":1281,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1263,"src":"5099:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1280,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5091:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint192_$","typeString":"type(uint192)"},"typeName":{"id":1279,"name":"uint192","nodeType":"ElementaryTypeName","src":"5091:7:4","typeDescriptions":{}}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5091:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"functionReturnParameters":1267,"id":1283,"nodeType":"Return","src":"5084:21:4"}]},"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"4597:318:4","text":" @dev Returns the downcasted uint192 from uint256, reverting on\n overflow (when the input is greater than largest uint192).\n Counterpart to Solidity's `uint192` operator.\n Requirements:\n - input must fit into 192 bits\n _Available since v4.7._"},"id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"toUint192","nameLocation":"4929:9:4","nodeType":"FunctionDefinition","parameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"value","nameLocation":"4947:5:4","nodeType":"VariableDeclaration","scope":1285,"src":"4939:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1262,"name":"uint256","nodeType":"ElementaryTypeName","src":"4939:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4938:15:4"},"returnParameters":{"id":1267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1285,"src":"4977:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":1265,"name":"uint192","nodeType":"ElementaryTypeName","src":"4977:7:4","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"4976:9:4"},"scope":2623,"src":"4920:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1309,"nodeType":"Block","src":"5507:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5525:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5539:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":1296,"name":"uint184","nodeType":"ElementaryTypeName","src":"5539:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"}],"id":1295,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5534:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5534:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint184","typeString":"type(uint184)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"5534:17:4","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"src":"5525:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203138342062697473","id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5553:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""},"value":"SafeCast: value doesn't fit in 184 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""}],"id":1293,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5517:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5517:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1303,"nodeType":"ExpressionStatement","src":"5517:78:4"},{"expression":{"arguments":[{"id":1306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1288,"src":"5620:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5612:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint184_$","typeString":"type(uint184)"},"typeName":{"id":1304,"name":"uint184","nodeType":"ElementaryTypeName","src":"5612:7:4","typeDescriptions":{}}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5612:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"functionReturnParameters":1292,"id":1308,"nodeType":"Return","src":"5605:21:4"}]},"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"5118:318:4","text":" @dev Returns the downcasted uint184 from uint256, reverting on\n overflow (when the input is greater than largest uint184).\n Counterpart to Solidity's `uint184` operator.\n Requirements:\n - input must fit into 184 bits\n _Available since v4.7._"},"id":1310,"implemented":true,"kind":"function","modifiers":[],"name":"toUint184","nameLocation":"5450:9:4","nodeType":"FunctionDefinition","parameters":{"id":1289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"value","nameLocation":"5468:5:4","nodeType":"VariableDeclaration","scope":1310,"src":"5460:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1287,"name":"uint256","nodeType":"ElementaryTypeName","src":"5460:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5459:15:4"},"returnParameters":{"id":1292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1310,"src":"5498:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"},"typeName":{"id":1290,"name":"uint184","nodeType":"ElementaryTypeName","src":"5498:7:4","typeDescriptions":{"typeIdentifier":"t_uint184","typeString":"uint184"}},"visibility":"internal"}],"src":"5497:9:4"},"scope":2623,"src":"5441:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1334,"nodeType":"Block","src":"6028:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"6046:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6060:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":1321,"name":"uint176","nodeType":"ElementaryTypeName","src":"6060:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"}],"id":1320,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6055:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6055:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint176","typeString":"type(uint176)"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6055:17:4","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"src":"6046:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203137362062697473","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6074:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""},"value":"SafeCast: value doesn't fit in 176 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""}],"id":1318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6038:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6038:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1328,"nodeType":"ExpressionStatement","src":"6038:78:4"},{"expression":{"arguments":[{"id":1331,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"6141:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint176_$","typeString":"type(uint176)"},"typeName":{"id":1329,"name":"uint176","nodeType":"ElementaryTypeName","src":"6133:7:4","typeDescriptions":{}}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6133:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"functionReturnParameters":1317,"id":1333,"nodeType":"Return","src":"6126:21:4"}]},"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"5639:318:4","text":" @dev Returns the downcasted uint176 from uint256, reverting on\n overflow (when the input is greater than largest uint176).\n Counterpart to Solidity's `uint176` operator.\n Requirements:\n - input must fit into 176 bits\n _Available since v4.7._"},"id":1335,"implemented":true,"kind":"function","modifiers":[],"name":"toUint176","nameLocation":"5971:9:4","nodeType":"FunctionDefinition","parameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"value","nameLocation":"5989:5:4","nodeType":"VariableDeclaration","scope":1335,"src":"5981:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"5981:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5980:15:4"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1335,"src":"6019:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"},"typeName":{"id":1315,"name":"uint176","nodeType":"ElementaryTypeName","src":"6019:7:4","typeDescriptions":{"typeIdentifier":"t_uint176","typeString":"uint176"}},"visibility":"internal"}],"src":"6018:9:4"},"scope":2623,"src":"5962:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1359,"nodeType":"Block","src":"6549:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"6567:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6581:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":1346,"name":"uint168","nodeType":"ElementaryTypeName","src":"6581:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"}],"id":1345,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6576:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6576:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint168","typeString":"type(uint168)"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6576:17:4","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"src":"6567:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136382062697473","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6595:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""},"value":"SafeCast: value doesn't fit in 168 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""}],"id":1343,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6559:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6559:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1353,"nodeType":"ExpressionStatement","src":"6559:78:4"},{"expression":{"arguments":[{"id":1356,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"6662:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6654:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint168_$","typeString":"type(uint168)"},"typeName":{"id":1354,"name":"uint168","nodeType":"ElementaryTypeName","src":"6654:7:4","typeDescriptions":{}}},"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6654:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"functionReturnParameters":1342,"id":1358,"nodeType":"Return","src":"6647:21:4"}]},"documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"6160:318:4","text":" @dev Returns the downcasted uint168 from uint256, reverting on\n overflow (when the input is greater than largest uint168).\n Counterpart to Solidity's `uint168` operator.\n Requirements:\n - input must fit into 168 bits\n _Available since v4.7._"},"id":1360,"implemented":true,"kind":"function","modifiers":[],"name":"toUint168","nameLocation":"6492:9:4","nodeType":"FunctionDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1338,"mutability":"mutable","name":"value","nameLocation":"6510:5:4","nodeType":"VariableDeclaration","scope":1360,"src":"6502:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"6502:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6501:15:4"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1360,"src":"6540:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"},"typeName":{"id":1340,"name":"uint168","nodeType":"ElementaryTypeName","src":"6540:7:4","typeDescriptions":{"typeIdentifier":"t_uint168","typeString":"uint168"}},"visibility":"internal"}],"src":"6539:9:4"},"scope":2623,"src":"6483:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1384,"nodeType":"Block","src":"7070:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1369,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7088:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7102:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1371,"name":"uint160","nodeType":"ElementaryTypeName","src":"7102:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"}],"id":1370,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7097:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7097:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint160","typeString":"type(uint160)"}},"id":1374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"7097:17:4","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"src":"7088:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136302062697473","id":1376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7116:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""},"value":"SafeCast: value doesn't fit in 160 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""}],"id":1368,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7080:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7080:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1378,"nodeType":"ExpressionStatement","src":"7080:78:4"},{"expression":{"arguments":[{"id":1381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"7183:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7175:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1379,"name":"uint160","nodeType":"ElementaryTypeName","src":"7175:7:4","typeDescriptions":{}}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7175:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"functionReturnParameters":1367,"id":1383,"nodeType":"Return","src":"7168:21:4"}]},"documentation":{"id":1361,"nodeType":"StructuredDocumentation","src":"6681:318:4","text":" @dev Returns the downcasted uint160 from uint256, reverting on\n overflow (when the input is greater than largest uint160).\n Counterpart to Solidity's `uint160` operator.\n Requirements:\n - input must fit into 160 bits\n _Available since v4.7._"},"id":1385,"implemented":true,"kind":"function","modifiers":[],"name":"toUint160","nameLocation":"7013:9:4","nodeType":"FunctionDefinition","parameters":{"id":1364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1363,"mutability":"mutable","name":"value","nameLocation":"7031:5:4","nodeType":"VariableDeclaration","scope":1385,"src":"7023:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint256","nodeType":"ElementaryTypeName","src":"7023:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7022:15:4"},"returnParameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1385,"src":"7061:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1365,"name":"uint160","nodeType":"ElementaryTypeName","src":"7061:7:4","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"src":"7060:9:4"},"scope":2623,"src":"7004:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1409,"nodeType":"Block","src":"7591:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"7609:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7623:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":1396,"name":"uint152","nodeType":"ElementaryTypeName","src":"7623:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"}],"id":1395,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"7618:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7618:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint152","typeString":"type(uint152)"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"7618:17:4","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"src":"7609:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203135322062697473","id":1401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7637:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""},"value":"SafeCast: value doesn't fit in 152 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""}],"id":1393,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7601:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7601:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1403,"nodeType":"ExpressionStatement","src":"7601:78:4"},{"expression":{"arguments":[{"id":1406,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"7704:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7696:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint152_$","typeString":"type(uint152)"},"typeName":{"id":1404,"name":"uint152","nodeType":"ElementaryTypeName","src":"7696:7:4","typeDescriptions":{}}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7696:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"functionReturnParameters":1392,"id":1408,"nodeType":"Return","src":"7689:21:4"}]},"documentation":{"id":1386,"nodeType":"StructuredDocumentation","src":"7202:318:4","text":" @dev Returns the downcasted uint152 from uint256, reverting on\n overflow (when the input is greater than largest uint152).\n Counterpart to Solidity's `uint152` operator.\n Requirements:\n - input must fit into 152 bits\n _Available since v4.7._"},"id":1410,"implemented":true,"kind":"function","modifiers":[],"name":"toUint152","nameLocation":"7534:9:4","nodeType":"FunctionDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"value","nameLocation":"7552:5:4","nodeType":"VariableDeclaration","scope":1410,"src":"7544:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1387,"name":"uint256","nodeType":"ElementaryTypeName","src":"7544:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7543:15:4"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1410,"src":"7582:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"},"typeName":{"id":1390,"name":"uint152","nodeType":"ElementaryTypeName","src":"7582:7:4","typeDescriptions":{"typeIdentifier":"t_uint152","typeString":"uint152"}},"visibility":"internal"}],"src":"7581:9:4"},"scope":2623,"src":"7525:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"8112:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"8130:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8144:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":1421,"name":"uint144","nodeType":"ElementaryTypeName","src":"8144:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"}],"id":1420,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8139:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8139:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint144","typeString":"type(uint144)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"8139:17:4","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"src":"8130:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203134342062697473","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8158:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""},"value":"SafeCast: value doesn't fit in 144 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""}],"id":1418,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8122:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8122:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1428,"nodeType":"ExpressionStatement","src":"8122:78:4"},{"expression":{"arguments":[{"id":1431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"8225:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8217:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint144_$","typeString":"type(uint144)"},"typeName":{"id":1429,"name":"uint144","nodeType":"ElementaryTypeName","src":"8217:7:4","typeDescriptions":{}}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8217:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"functionReturnParameters":1417,"id":1433,"nodeType":"Return","src":"8210:21:4"}]},"documentation":{"id":1411,"nodeType":"StructuredDocumentation","src":"7723:318:4","text":" @dev Returns the downcasted uint144 from uint256, reverting on\n overflow (when the input is greater than largest uint144).\n Counterpart to Solidity's `uint144` operator.\n Requirements:\n - input must fit into 144 bits\n _Available since v4.7._"},"id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"toUint144","nameLocation":"8055:9:4","nodeType":"FunctionDefinition","parameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"value","nameLocation":"8073:5:4","nodeType":"VariableDeclaration","scope":1435,"src":"8065:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"8065:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8064:15:4"},"returnParameters":{"id":1417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1435,"src":"8103:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"},"typeName":{"id":1415,"name":"uint144","nodeType":"ElementaryTypeName","src":"8103:7:4","typeDescriptions":{"typeIdentifier":"t_uint144","typeString":"uint144"}},"visibility":"internal"}],"src":"8102:9:4"},"scope":2623,"src":"8046:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1459,"nodeType":"Block","src":"8633:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"8651:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8665:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":1446,"name":"uint136","nodeType":"ElementaryTypeName","src":"8665:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"}],"id":1445,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8660:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8660:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint136","typeString":"type(uint136)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"8660:17:4","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"src":"8651:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203133362062697473","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8679:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""},"value":"SafeCast: value doesn't fit in 136 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""}],"id":1443,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8643:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8643:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1453,"nodeType":"ExpressionStatement","src":"8643:78:4"},{"expression":{"arguments":[{"id":1456,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"8746:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8738:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint136_$","typeString":"type(uint136)"},"typeName":{"id":1454,"name":"uint136","nodeType":"ElementaryTypeName","src":"8738:7:4","typeDescriptions":{}}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8738:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"functionReturnParameters":1442,"id":1458,"nodeType":"Return","src":"8731:21:4"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"8244:318:4","text":" @dev Returns the downcasted uint136 from uint256, reverting on\n overflow (when the input is greater than largest uint136).\n Counterpart to Solidity's `uint136` operator.\n Requirements:\n - input must fit into 136 bits\n _Available since v4.7._"},"id":1460,"implemented":true,"kind":"function","modifiers":[],"name":"toUint136","nameLocation":"8576:9:4","nodeType":"FunctionDefinition","parameters":{"id":1439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"value","nameLocation":"8594:5:4","nodeType":"VariableDeclaration","scope":1460,"src":"8586:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"8586:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8585:15:4"},"returnParameters":{"id":1442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1441,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1460,"src":"8624:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"},"typeName":{"id":1440,"name":"uint136","nodeType":"ElementaryTypeName","src":"8624:7:4","typeDescriptions":{"typeIdentifier":"t_uint136","typeString":"uint136"}},"visibility":"internal"}],"src":"8623:9:4"},"scope":2623,"src":"8567:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1484,"nodeType":"Block","src":"9154:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"9172:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9186:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1471,"name":"uint128","nodeType":"ElementaryTypeName","src":"9186:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"}],"id":1470,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9181:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9181:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint128","typeString":"type(uint128)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"9181:17:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"9172:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473","id":1476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9200:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""},"value":"SafeCast: value doesn't fit in 128 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""}],"id":1468,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9164:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9164:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1478,"nodeType":"ExpressionStatement","src":"9164:78:4"},{"expression":{"arguments":[{"id":1481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"9267:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9259:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1479,"name":"uint128","nodeType":"ElementaryTypeName","src":"9259:7:4","typeDescriptions":{}}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9259:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"functionReturnParameters":1467,"id":1483,"nodeType":"Return","src":"9252:21:4"}]},"documentation":{"id":1461,"nodeType":"StructuredDocumentation","src":"8765:318:4","text":" @dev Returns the downcasted uint128 from uint256, reverting on\n overflow (when the input is greater than largest uint128).\n Counterpart to Solidity's `uint128` operator.\n Requirements:\n - input must fit into 128 bits\n _Available since v2.5._"},"id":1485,"implemented":true,"kind":"function","modifiers":[],"name":"toUint128","nameLocation":"9097:9:4","nodeType":"FunctionDefinition","parameters":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"value","nameLocation":"9115:5:4","nodeType":"VariableDeclaration","scope":1485,"src":"9107:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1462,"name":"uint256","nodeType":"ElementaryTypeName","src":"9107:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9106:15:4"},"returnParameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1485,"src":"9145:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":1465,"name":"uint128","nodeType":"ElementaryTypeName","src":"9145:7:4","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"9144:9:4"},"scope":2623,"src":"9088:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"9675:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"9693:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9707:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":1496,"name":"uint120","nodeType":"ElementaryTypeName","src":"9707:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"}],"id":1495,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"9702:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9702:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint120","typeString":"type(uint120)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"9702:17:4","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"src":"9693:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132302062697473","id":1501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9721:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""},"value":"SafeCast: value doesn't fit in 120 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""}],"id":1493,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9685:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9685:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1503,"nodeType":"ExpressionStatement","src":"9685:78:4"},{"expression":{"arguments":[{"id":1506,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"9788:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9780:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint120_$","typeString":"type(uint120)"},"typeName":{"id":1504,"name":"uint120","nodeType":"ElementaryTypeName","src":"9780:7:4","typeDescriptions":{}}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9780:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"functionReturnParameters":1492,"id":1508,"nodeType":"Return","src":"9773:21:4"}]},"documentation":{"id":1486,"nodeType":"StructuredDocumentation","src":"9286:318:4","text":" @dev Returns the downcasted uint120 from uint256, reverting on\n overflow (when the input is greater than largest uint120).\n Counterpart to Solidity's `uint120` operator.\n Requirements:\n - input must fit into 120 bits\n _Available since v4.7._"},"id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"toUint120","nameLocation":"9618:9:4","nodeType":"FunctionDefinition","parameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"value","nameLocation":"9636:5:4","nodeType":"VariableDeclaration","scope":1510,"src":"9628:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1487,"name":"uint256","nodeType":"ElementaryTypeName","src":"9628:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9627:15:4"},"returnParameters":{"id":1492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1510,"src":"9666:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"},"typeName":{"id":1490,"name":"uint120","nodeType":"ElementaryTypeName","src":"9666:7:4","typeDescriptions":{"typeIdentifier":"t_uint120","typeString":"uint120"}},"visibility":"internal"}],"src":"9665:9:4"},"scope":2623,"src":"9609:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1534,"nodeType":"Block","src":"10196:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"10214:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10228:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":1521,"name":"uint112","nodeType":"ElementaryTypeName","src":"10228:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"}],"id":1520,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10223:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10223:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint112","typeString":"type(uint112)"}},"id":1524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"10223:17:4","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"src":"10214:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203131322062697473","id":1526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10242:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""},"value":"SafeCast: value doesn't fit in 112 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""}],"id":1518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10206:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10206:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1528,"nodeType":"ExpressionStatement","src":"10206:78:4"},{"expression":{"arguments":[{"id":1531,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"10309:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10301:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint112_$","typeString":"type(uint112)"},"typeName":{"id":1529,"name":"uint112","nodeType":"ElementaryTypeName","src":"10301:7:4","typeDescriptions":{}}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10301:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"functionReturnParameters":1517,"id":1533,"nodeType":"Return","src":"10294:21:4"}]},"documentation":{"id":1511,"nodeType":"StructuredDocumentation","src":"9807:318:4","text":" @dev Returns the downcasted uint112 from uint256, reverting on\n overflow (when the input is greater than largest uint112).\n Counterpart to Solidity's `uint112` operator.\n Requirements:\n - input must fit into 112 bits\n _Available since v4.7._"},"id":1535,"implemented":true,"kind":"function","modifiers":[],"name":"toUint112","nameLocation":"10139:9:4","nodeType":"FunctionDefinition","parameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"value","nameLocation":"10157:5:4","nodeType":"VariableDeclaration","scope":1535,"src":"10149:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1512,"name":"uint256","nodeType":"ElementaryTypeName","src":"10149:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10148:15:4"},"returnParameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1535,"src":"10187:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1515,"name":"uint112","nodeType":"ElementaryTypeName","src":"10187:7:4","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"}],"src":"10186:9:4"},"scope":2623,"src":"10130:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1559,"nodeType":"Block","src":"10717:126:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"10735:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10749:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":1546,"name":"uint104","nodeType":"ElementaryTypeName","src":"10749:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"}],"id":1545,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10744:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10744:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint104","typeString":"type(uint104)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"10744:17:4","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"src":"10735:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203130342062697473","id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10763:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""},"value":"SafeCast: value doesn't fit in 104 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""}],"id":1543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10727:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10727:78:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1553,"nodeType":"ExpressionStatement","src":"10727:78:4"},{"expression":{"arguments":[{"id":1556,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"10830:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10822:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint104_$","typeString":"type(uint104)"},"typeName":{"id":1554,"name":"uint104","nodeType":"ElementaryTypeName","src":"10822:7:4","typeDescriptions":{}}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10822:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"functionReturnParameters":1542,"id":1558,"nodeType":"Return","src":"10815:21:4"}]},"documentation":{"id":1536,"nodeType":"StructuredDocumentation","src":"10328:318:4","text":" @dev Returns the downcasted uint104 from uint256, reverting on\n overflow (when the input is greater than largest uint104).\n Counterpart to Solidity's `uint104` operator.\n Requirements:\n - input must fit into 104 bits\n _Available since v4.7._"},"id":1560,"implemented":true,"kind":"function","modifiers":[],"name":"toUint104","nameLocation":"10660:9:4","nodeType":"FunctionDefinition","parameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1538,"mutability":"mutable","name":"value","nameLocation":"10678:5:4","nodeType":"VariableDeclaration","scope":1560,"src":"10670:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1537,"name":"uint256","nodeType":"ElementaryTypeName","src":"10670:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10669:15:4"},"returnParameters":{"id":1542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1560,"src":"10708:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"},"typeName":{"id":1540,"name":"uint104","nodeType":"ElementaryTypeName","src":"10708:7:4","typeDescriptions":{"typeIdentifier":"t_uint104","typeString":"uint104"}},"visibility":"internal"}],"src":"10707:9:4"},"scope":2623,"src":"10651:192:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1584,"nodeType":"Block","src":"11232:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"11250:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11264:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":1571,"name":"uint96","nodeType":"ElementaryTypeName","src":"11264:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"}],"id":1570,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11259:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11259:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint96","typeString":"type(uint96)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"11259:16:4","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"11250:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2039362062697473","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11277:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""},"value":"SafeCast: value doesn't fit in 96 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""}],"id":1568,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11242:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11242:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1578,"nodeType":"ExpressionStatement","src":"11242:76:4"},{"expression":{"arguments":[{"id":1581,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"11342:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11335:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":1579,"name":"uint96","nodeType":"ElementaryTypeName","src":"11335:6:4","typeDescriptions":{}}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11335:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"functionReturnParameters":1567,"id":1583,"nodeType":"Return","src":"11328:20:4"}]},"documentation":{"id":1561,"nodeType":"StructuredDocumentation","src":"10849:314:4","text":" @dev Returns the downcasted uint96 from uint256, reverting on\n overflow (when the input is greater than largest uint96).\n Counterpart to Solidity's `uint96` operator.\n Requirements:\n - input must fit into 96 bits\n _Available since v4.2._"},"id":1585,"implemented":true,"kind":"function","modifiers":[],"name":"toUint96","nameLocation":"11177:8:4","nodeType":"FunctionDefinition","parameters":{"id":1564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1563,"mutability":"mutable","name":"value","nameLocation":"11194:5:4","nodeType":"VariableDeclaration","scope":1585,"src":"11186:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1562,"name":"uint256","nodeType":"ElementaryTypeName","src":"11186:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11185:15:4"},"returnParameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1585,"src":"11224:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":1565,"name":"uint96","nodeType":"ElementaryTypeName","src":"11224:6:4","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"11223:8:4"},"scope":2623,"src":"11168:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1609,"nodeType":"Block","src":"11744:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1594,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"11762:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11776:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":1596,"name":"uint88","nodeType":"ElementaryTypeName","src":"11776:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"}],"id":1595,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11771:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11771:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint88","typeString":"type(uint88)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"11771:16:4","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"src":"11762:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038382062697473","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11789:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""},"value":"SafeCast: value doesn't fit in 88 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""}],"id":1593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11754:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11754:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1603,"nodeType":"ExpressionStatement","src":"11754:76:4"},{"expression":{"arguments":[{"id":1606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"11854:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11847:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint88_$","typeString":"type(uint88)"},"typeName":{"id":1604,"name":"uint88","nodeType":"ElementaryTypeName","src":"11847:6:4","typeDescriptions":{}}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11847:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"functionReturnParameters":1592,"id":1608,"nodeType":"Return","src":"11840:20:4"}]},"documentation":{"id":1586,"nodeType":"StructuredDocumentation","src":"11361:314:4","text":" @dev Returns the downcasted uint88 from uint256, reverting on\n overflow (when the input is greater than largest uint88).\n Counterpart to Solidity's `uint88` operator.\n Requirements:\n - input must fit into 88 bits\n _Available since v4.7._"},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"toUint88","nameLocation":"11689:8:4","nodeType":"FunctionDefinition","parameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"value","nameLocation":"11706:5:4","nodeType":"VariableDeclaration","scope":1610,"src":"11698:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"11698:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11697:15:4"},"returnParameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1610,"src":"11736:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"},"typeName":{"id":1590,"name":"uint88","nodeType":"ElementaryTypeName","src":"11736:6:4","typeDescriptions":{"typeIdentifier":"t_uint88","typeString":"uint88"}},"visibility":"internal"}],"src":"11735:8:4"},"scope":2623,"src":"11680:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1634,"nodeType":"Block","src":"12256:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"12274:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12288:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":1621,"name":"uint80","nodeType":"ElementaryTypeName","src":"12288:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"}],"id":1620,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12283:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12283:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint80","typeString":"type(uint80)"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"12283:16:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"src":"12274:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038302062697473","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12301:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""},"value":"SafeCast: value doesn't fit in 80 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""}],"id":1618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12266:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12266:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1628,"nodeType":"ExpressionStatement","src":"12266:76:4"},{"expression":{"arguments":[{"id":1631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"12366:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12359:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint80_$","typeString":"type(uint80)"},"typeName":{"id":1629,"name":"uint80","nodeType":"ElementaryTypeName","src":"12359:6:4","typeDescriptions":{}}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12359:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"functionReturnParameters":1617,"id":1633,"nodeType":"Return","src":"12352:20:4"}]},"documentation":{"id":1611,"nodeType":"StructuredDocumentation","src":"11873:314:4","text":" @dev Returns the downcasted uint80 from uint256, reverting on\n overflow (when the input is greater than largest uint80).\n Counterpart to Solidity's `uint80` operator.\n Requirements:\n - input must fit into 80 bits\n _Available since v4.7._"},"id":1635,"implemented":true,"kind":"function","modifiers":[],"name":"toUint80","nameLocation":"12201:8:4","nodeType":"FunctionDefinition","parameters":{"id":1614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"value","nameLocation":"12218:5:4","nodeType":"VariableDeclaration","scope":1635,"src":"12210:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"12210:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:15:4"},"returnParameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1635,"src":"12248:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"},"typeName":{"id":1615,"name":"uint80","nodeType":"ElementaryTypeName","src":"12248:6:4","typeDescriptions":{"typeIdentifier":"t_uint80","typeString":"uint80"}},"visibility":"internal"}],"src":"12247:8:4"},"scope":2623,"src":"12192:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1659,"nodeType":"Block","src":"12768:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1644,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12786:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12800:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":1646,"name":"uint72","nodeType":"ElementaryTypeName","src":"12800:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"}],"id":1645,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"12795:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12795:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint72","typeString":"type(uint72)"}},"id":1649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"12795:16:4","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"src":"12786:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2037322062697473","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12813:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""},"value":"SafeCast: value doesn't fit in 72 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""}],"id":1643,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12778:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12778:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1653,"nodeType":"ExpressionStatement","src":"12778:76:4"},{"expression":{"arguments":[{"id":1656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"12878:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12871:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint72_$","typeString":"type(uint72)"},"typeName":{"id":1654,"name":"uint72","nodeType":"ElementaryTypeName","src":"12871:6:4","typeDescriptions":{}}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12871:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"functionReturnParameters":1642,"id":1658,"nodeType":"Return","src":"12864:20:4"}]},"documentation":{"id":1636,"nodeType":"StructuredDocumentation","src":"12385:314:4","text":" @dev Returns the downcasted uint72 from uint256, reverting on\n overflow (when the input is greater than largest uint72).\n Counterpart to Solidity's `uint72` operator.\n Requirements:\n - input must fit into 72 bits\n _Available since v4.7._"},"id":1660,"implemented":true,"kind":"function","modifiers":[],"name":"toUint72","nameLocation":"12713:8:4","nodeType":"FunctionDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"value","nameLocation":"12730:5:4","nodeType":"VariableDeclaration","scope":1660,"src":"12722:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1637,"name":"uint256","nodeType":"ElementaryTypeName","src":"12722:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12721:15:4"},"returnParameters":{"id":1642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1660,"src":"12760:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":1640,"name":"uint72","nodeType":"ElementaryTypeName","src":"12760:6:4","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"12759:8:4"},"scope":2623,"src":"12704:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1684,"nodeType":"Block","src":"13280:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"13298:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13312:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1671,"name":"uint64","nodeType":"ElementaryTypeName","src":"13312:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":1670,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13307:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13307:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"13307:16:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"13298:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473","id":1676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13325:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""},"value":"SafeCast: value doesn't fit in 64 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""}],"id":1668,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13290:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13290:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1678,"nodeType":"ExpressionStatement","src":"13290:76:4"},{"expression":{"arguments":[{"id":1681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1663,"src":"13390:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13383:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1679,"name":"uint64","nodeType":"ElementaryTypeName","src":"13383:6:4","typeDescriptions":{}}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13383:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":1667,"id":1683,"nodeType":"Return","src":"13376:20:4"}]},"documentation":{"id":1661,"nodeType":"StructuredDocumentation","src":"12897:314:4","text":" @dev Returns the downcasted uint64 from uint256, reverting on\n overflow (when the input is greater than largest uint64).\n Counterpart to Solidity's `uint64` operator.\n Requirements:\n - input must fit into 64 bits\n _Available since v2.5._"},"id":1685,"implemented":true,"kind":"function","modifiers":[],"name":"toUint64","nameLocation":"13225:8:4","nodeType":"FunctionDefinition","parameters":{"id":1664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1663,"mutability":"mutable","name":"value","nameLocation":"13242:5:4","nodeType":"VariableDeclaration","scope":1685,"src":"13234:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1662,"name":"uint256","nodeType":"ElementaryTypeName","src":"13234:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13233:15:4"},"returnParameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1685,"src":"13272:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1665,"name":"uint64","nodeType":"ElementaryTypeName","src":"13272:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"13271:8:4"},"scope":2623,"src":"13216:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1709,"nodeType":"Block","src":"13792:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"13810:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13824:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":1696,"name":"uint56","nodeType":"ElementaryTypeName","src":"13824:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"}],"id":1695,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"13819:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13819:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint56","typeString":"type(uint56)"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"13819:16:4","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"src":"13810:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2035362062697473","id":1701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13837:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""},"value":"SafeCast: value doesn't fit in 56 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""}],"id":1693,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13802:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13802:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1703,"nodeType":"ExpressionStatement","src":"13802:76:4"},{"expression":{"arguments":[{"id":1706,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"13902:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13895:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint56_$","typeString":"type(uint56)"},"typeName":{"id":1704,"name":"uint56","nodeType":"ElementaryTypeName","src":"13895:6:4","typeDescriptions":{}}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13895:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"functionReturnParameters":1692,"id":1708,"nodeType":"Return","src":"13888:20:4"}]},"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"13409:314:4","text":" @dev Returns the downcasted uint56 from uint256, reverting on\n overflow (when the input is greater than largest uint56).\n Counterpart to Solidity's `uint56` operator.\n Requirements:\n - input must fit into 56 bits\n _Available since v4.7._"},"id":1710,"implemented":true,"kind":"function","modifiers":[],"name":"toUint56","nameLocation":"13737:8:4","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"value","nameLocation":"13754:5:4","nodeType":"VariableDeclaration","scope":1710,"src":"13746:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"13746:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13745:15:4"},"returnParameters":{"id":1692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1710,"src":"13784:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"},"typeName":{"id":1690,"name":"uint56","nodeType":"ElementaryTypeName","src":"13784:6:4","typeDescriptions":{"typeIdentifier":"t_uint56","typeString":"uint56"}},"visibility":"internal"}],"src":"13783:8:4"},"scope":2623,"src":"13728:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1734,"nodeType":"Block","src":"14304:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1719,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"14322:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14336:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":1721,"name":"uint48","nodeType":"ElementaryTypeName","src":"14336:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":1720,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14331:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14331:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":1724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"14331:16:4","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"14322:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034382062697473","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14349:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""},"value":"SafeCast: value doesn't fit in 48 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""}],"id":1718,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14314:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14314:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1728,"nodeType":"ExpressionStatement","src":"14314:76:4"},{"expression":{"arguments":[{"id":1731,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"14414:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14407:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":1729,"name":"uint48","nodeType":"ElementaryTypeName","src":"14407:6:4","typeDescriptions":{}}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14407:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"functionReturnParameters":1717,"id":1733,"nodeType":"Return","src":"14400:20:4"}]},"documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"13921:314:4","text":" @dev Returns the downcasted uint48 from uint256, reverting on\n overflow (when the input is greater than largest uint48).\n Counterpart to Solidity's `uint48` operator.\n Requirements:\n - input must fit into 48 bits\n _Available since v4.7._"},"id":1735,"implemented":true,"kind":"function","modifiers":[],"name":"toUint48","nameLocation":"14249:8:4","nodeType":"FunctionDefinition","parameters":{"id":1714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1713,"mutability":"mutable","name":"value","nameLocation":"14266:5:4","nodeType":"VariableDeclaration","scope":1735,"src":"14258:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1712,"name":"uint256","nodeType":"ElementaryTypeName","src":"14258:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14257:15:4"},"returnParameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1716,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1735,"src":"14296:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1715,"name":"uint48","nodeType":"ElementaryTypeName","src":"14296:6:4","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"14295:8:4"},"scope":2623,"src":"14240:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1759,"nodeType":"Block","src":"14816:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"14834:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14848:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":1746,"name":"uint40","nodeType":"ElementaryTypeName","src":"14848:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"}],"id":1745,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"14843:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14843:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint40","typeString":"type(uint40)"}},"id":1749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"14843:16:4","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"src":"14834:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034302062697473","id":1751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14861:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""},"value":"SafeCast: value doesn't fit in 40 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""}],"id":1743,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14826:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14826:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1753,"nodeType":"ExpressionStatement","src":"14826:76:4"},{"expression":{"arguments":[{"id":1756,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"14926:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14919:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint40_$","typeString":"type(uint40)"},"typeName":{"id":1754,"name":"uint40","nodeType":"ElementaryTypeName","src":"14919:6:4","typeDescriptions":{}}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14919:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"functionReturnParameters":1742,"id":1758,"nodeType":"Return","src":"14912:20:4"}]},"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"14433:314:4","text":" @dev Returns the downcasted uint40 from uint256, reverting on\n overflow (when the input is greater than largest uint40).\n Counterpart to Solidity's `uint40` operator.\n Requirements:\n - input must fit into 40 bits\n _Available since v4.7._"},"id":1760,"implemented":true,"kind":"function","modifiers":[],"name":"toUint40","nameLocation":"14761:8:4","nodeType":"FunctionDefinition","parameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"value","nameLocation":"14778:5:4","nodeType":"VariableDeclaration","scope":1760,"src":"14770:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"14770:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14769:15:4"},"returnParameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1760,"src":"14808:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":1740,"name":"uint40","nodeType":"ElementaryTypeName","src":"14808:6:4","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"}],"src":"14807:8:4"},"scope":2623,"src":"14752:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1784,"nodeType":"Block","src":"15328:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"15346:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15360:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1771,"name":"uint32","nodeType":"ElementaryTypeName","src":"15360:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"}],"id":1770,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15355:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15355:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint32","typeString":"type(uint32)"}},"id":1774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"15355:16:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"15346:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15373:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""},"value":"SafeCast: value doesn't fit in 32 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""}],"id":1768,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15338:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15338:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1778,"nodeType":"ExpressionStatement","src":"15338:76:4"},{"expression":{"arguments":[{"id":1781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"15438:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15431:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":1779,"name":"uint32","nodeType":"ElementaryTypeName","src":"15431:6:4","typeDescriptions":{}}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15431:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":1767,"id":1783,"nodeType":"Return","src":"15424:20:4"}]},"documentation":{"id":1761,"nodeType":"StructuredDocumentation","src":"14945:314:4","text":" @dev Returns the downcasted uint32 from uint256, reverting on\n overflow (when the input is greater than largest uint32).\n Counterpart to Solidity's `uint32` operator.\n Requirements:\n - input must fit into 32 bits\n _Available since v2.5._"},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"toUint32","nameLocation":"15273:8:4","nodeType":"FunctionDefinition","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1763,"mutability":"mutable","name":"value","nameLocation":"15290:5:4","nodeType":"VariableDeclaration","scope":1785,"src":"15282:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1762,"name":"uint256","nodeType":"ElementaryTypeName","src":"15282:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15281:15:4"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1785,"src":"15320:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1765,"name":"uint32","nodeType":"ElementaryTypeName","src":"15320:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"15319:8:4"},"scope":2623,"src":"15264:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1809,"nodeType":"Block","src":"15840:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1794,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"15858:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15872:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":1796,"name":"uint24","nodeType":"ElementaryTypeName","src":"15872:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"}],"id":1795,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"15867:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15867:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint24","typeString":"type(uint24)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"15867:16:4","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"15858:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473","id":1801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15885:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""},"value":"SafeCast: value doesn't fit in 24 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""}],"id":1793,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15850:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15850:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1803,"nodeType":"ExpressionStatement","src":"15850:76:4"},{"expression":{"arguments":[{"id":1806,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"15950:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15943:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint24_$","typeString":"type(uint24)"},"typeName":{"id":1804,"name":"uint24","nodeType":"ElementaryTypeName","src":"15943:6:4","typeDescriptions":{}}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15943:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":1792,"id":1808,"nodeType":"Return","src":"15936:20:4"}]},"documentation":{"id":1786,"nodeType":"StructuredDocumentation","src":"15457:314:4","text":" @dev Returns the downcasted uint24 from uint256, reverting on\n overflow (when the input is greater than largest uint24).\n Counterpart to Solidity's `uint24` operator.\n Requirements:\n - input must fit into 24 bits\n _Available since v4.7._"},"id":1810,"implemented":true,"kind":"function","modifiers":[],"name":"toUint24","nameLocation":"15785:8:4","nodeType":"FunctionDefinition","parameters":{"id":1789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1788,"mutability":"mutable","name":"value","nameLocation":"15802:5:4","nodeType":"VariableDeclaration","scope":1810,"src":"15794:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1787,"name":"uint256","nodeType":"ElementaryTypeName","src":"15794:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15793:15:4"},"returnParameters":{"id":1792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1810,"src":"15832:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1790,"name":"uint24","nodeType":"ElementaryTypeName","src":"15832:6:4","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"15831:8:4"},"scope":2623,"src":"15776:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1834,"nodeType":"Block","src":"16352:123:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"16370:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16384:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":1821,"name":"uint16","nodeType":"ElementaryTypeName","src":"16384:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"}],"id":1820,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16379:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16379:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint16","typeString":"type(uint16)"}},"id":1824,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"16379:16:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"16370:25:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031362062697473","id":1826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16397:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""},"value":"SafeCast: value doesn't fit in 16 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""}],"id":1818,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16362:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16362:76:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1828,"nodeType":"ExpressionStatement","src":"16362:76:4"},{"expression":{"arguments":[{"id":1831,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"16462:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16455:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint16_$","typeString":"type(uint16)"},"typeName":{"id":1829,"name":"uint16","nodeType":"ElementaryTypeName","src":"16455:6:4","typeDescriptions":{}}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16455:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":1817,"id":1833,"nodeType":"Return","src":"16448:20:4"}]},"documentation":{"id":1811,"nodeType":"StructuredDocumentation","src":"15969:314:4","text":" @dev Returns the downcasted uint16 from uint256, reverting on\n overflow (when the input is greater than largest uint16).\n Counterpart to Solidity's `uint16` operator.\n Requirements:\n - input must fit into 16 bits\n _Available since v2.5._"},"id":1835,"implemented":true,"kind":"function","modifiers":[],"name":"toUint16","nameLocation":"16297:8:4","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"value","nameLocation":"16314:5:4","nodeType":"VariableDeclaration","scope":1835,"src":"16306:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1812,"name":"uint256","nodeType":"ElementaryTypeName","src":"16306:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16305:15:4"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1835,"src":"16344:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1815,"name":"uint16","nodeType":"ElementaryTypeName","src":"16344:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"16343:8:4"},"scope":2623,"src":"16288:187:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1859,"nodeType":"Block","src":"16858:120:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"16876:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"arguments":[{"id":1847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16890:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1846,"name":"uint8","nodeType":"ElementaryTypeName","src":"16890:5:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":1845,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"16885:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16885:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"16885:15:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"16876:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20382062697473","id":1851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16902:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""},"value":"SafeCast: value doesn't fit in 8 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""}],"id":1843,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16868:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16868:74:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1853,"nodeType":"ExpressionStatement","src":"16868:74:4"},{"expression":{"arguments":[{"id":1856,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"16965:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16959:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1854,"name":"uint8","nodeType":"ElementaryTypeName","src":"16959:5:4","typeDescriptions":{}}},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16959:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1842,"id":1858,"nodeType":"Return","src":"16952:19:4"}]},"documentation":{"id":1836,"nodeType":"StructuredDocumentation","src":"16481:310:4","text":" @dev Returns the downcasted uint8 from uint256, reverting on\n overflow (when the input is greater than largest uint8).\n Counterpart to Solidity's `uint8` operator.\n Requirements:\n - input must fit into 8 bits\n _Available since v2.5._"},"id":1860,"implemented":true,"kind":"function","modifiers":[],"name":"toUint8","nameLocation":"16805:7:4","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"mutability":"mutable","name":"value","nameLocation":"16821:5:4","nodeType":"VariableDeclaration","scope":1860,"src":"16813:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1837,"name":"uint256","nodeType":"ElementaryTypeName","src":"16813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16812:15:4"},"returnParameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1860,"src":"16851:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1840,"name":"uint8","nodeType":"ElementaryTypeName","src":"16851:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"16850:7:4"},"scope":2623,"src":"16796:182:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1880,"nodeType":"Block","src":"17252:103:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"17270:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17279:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17270:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c7565206d75737420626520706f736974697665","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17282:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_74e6d3a4204092bea305532ded31d3763fc378e46be3884a93ceff08a0761807","typeString":"literal_string \"SafeCast: value must be positive\""},"value":"SafeCast: value must be positive"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_74e6d3a4204092bea305532ded31d3763fc378e46be3884a93ceff08a0761807","typeString":"literal_string \"SafeCast: value must be positive\""}],"id":1868,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17262:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17262:55:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1874,"nodeType":"ExpressionStatement","src":"17262:55:4"},{"expression":{"arguments":[{"id":1877,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"17342:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1876,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17334:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1875,"name":"uint256","nodeType":"ElementaryTypeName","src":"17334:7:4","typeDescriptions":{}}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17334:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1867,"id":1879,"nodeType":"Return","src":"17327:21:4"}]},"documentation":{"id":1861,"nodeType":"StructuredDocumentation","src":"16984:198:4","text":" @dev Converts a signed int256 into an unsigned uint256.\n Requirements:\n - input must be greater than or equal to 0.\n _Available since v3.0._"},"id":1881,"implemented":true,"kind":"function","modifiers":[],"name":"toUint256","nameLocation":"17196:9:4","nodeType":"FunctionDefinition","parameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"value","nameLocation":"17213:5:4","nodeType":"VariableDeclaration","scope":1881,"src":"17206:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1862,"name":"int256","nodeType":"ElementaryTypeName","src":"17206:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17205:14:4"},"returnParameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1881,"src":"17243:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1865,"name":"uint256","nodeType":"ElementaryTypeName","src":"17243:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17242:9:4"},"scope":2623,"src":"17187:168:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1903,"nodeType":"Block","src":"17790:124:4","statements":[{"expression":{"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1889,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"17800:10:4","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"17820:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1891,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17813:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int248_$","typeString":"type(int248)"},"typeName":{"id":1890,"name":"int248","nodeType":"ElementaryTypeName","src":"17813:6:4","typeDescriptions":{}}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17813:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"src":"17800:26:4","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"id":1895,"nodeType":"ExpressionStatement","src":"17800:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1897,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"17844:10:4","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1898,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"17858:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"17844:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234382062697473","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"17865:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""},"value":"SafeCast: value doesn't fit in 248 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6ac19bba4607c9b45ff35f54fbc4ca64c29c7457109a16fa180ea77cdbda8593","typeString":"literal_string \"SafeCast: value doesn't fit in 248 bits\""}],"id":1896,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"17836:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17836:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1902,"nodeType":"ExpressionStatement","src":"17836:71:4"}]},"documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"17361:350:4","text":" @dev Returns the downcasted int248 from int256, reverting on\n overflow (when the input is less than smallest int248 or\n greater than largest int248).\n Counterpart to Solidity's `int248` operator.\n Requirements:\n - input must fit into 248 bits\n _Available since v4.7._"},"id":1904,"implemented":true,"kind":"function","modifiers":[],"name":"toInt248","nameLocation":"17725:8:4","nodeType":"FunctionDefinition","parameters":{"id":1885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1884,"mutability":"mutable","name":"value","nameLocation":"17741:5:4","nodeType":"VariableDeclaration","scope":1904,"src":"17734:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1883,"name":"int256","nodeType":"ElementaryTypeName","src":"17734:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"17733:14:4"},"returnParameters":{"id":1888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"downcasted","nameLocation":"17778:10:4","nodeType":"VariableDeclaration","scope":1904,"src":"17771:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"},"typeName":{"id":1886,"name":"int248","nodeType":"ElementaryTypeName","src":"17771:6:4","typeDescriptions":{"typeIdentifier":"t_int248","typeString":"int248"}},"visibility":"internal"}],"src":"17770:19:4"},"scope":2623,"src":"17716:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1926,"nodeType":"Block","src":"18349:124:4","statements":[{"expression":{"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1912,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"18359:10:4","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"18379:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18372:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int240_$","typeString":"type(int240)"},"typeName":{"id":1913,"name":"int240","nodeType":"ElementaryTypeName","src":"18372:6:4","typeDescriptions":{}}},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18372:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"src":"18359:26:4","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"id":1918,"nodeType":"ExpressionStatement","src":"18359:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1920,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"18403:10:4","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"18417:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18403:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203234302062697473","id":1923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18424:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""},"value":"SafeCast: value doesn't fit in 240 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_375fa0f6cb9fb5845d214c630920cedf4424913ed6dc32c297d430efa3d61a87","typeString":"literal_string \"SafeCast: value doesn't fit in 240 bits\""}],"id":1919,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18395:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18395:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1925,"nodeType":"ExpressionStatement","src":"18395:71:4"}]},"documentation":{"id":1905,"nodeType":"StructuredDocumentation","src":"17920:350:4","text":" @dev Returns the downcasted int240 from int256, reverting on\n overflow (when the input is less than smallest int240 or\n greater than largest int240).\n Counterpart to Solidity's `int240` operator.\n Requirements:\n - input must fit into 240 bits\n _Available since v4.7._"},"id":1927,"implemented":true,"kind":"function","modifiers":[],"name":"toInt240","nameLocation":"18284:8:4","nodeType":"FunctionDefinition","parameters":{"id":1908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1907,"mutability":"mutable","name":"value","nameLocation":"18300:5:4","nodeType":"VariableDeclaration","scope":1927,"src":"18293:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1906,"name":"int256","nodeType":"ElementaryTypeName","src":"18293:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18292:14:4"},"returnParameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"downcasted","nameLocation":"18337:10:4","nodeType":"VariableDeclaration","scope":1927,"src":"18330:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"},"typeName":{"id":1909,"name":"int240","nodeType":"ElementaryTypeName","src":"18330:6:4","typeDescriptions":{"typeIdentifier":"t_int240","typeString":"int240"}},"visibility":"internal"}],"src":"18329:19:4"},"scope":2623,"src":"18275:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1949,"nodeType":"Block","src":"18908:124:4","statements":[{"expression":{"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1935,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"18918:10:4","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1938,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"18938:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18931:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int232_$","typeString":"type(int232)"},"typeName":{"id":1936,"name":"int232","nodeType":"ElementaryTypeName","src":"18931:6:4","typeDescriptions":{}}},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18931:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"src":"18918:26:4","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"id":1941,"nodeType":"ExpressionStatement","src":"18918:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1943,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"18962:10:4","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1944,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"18976:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"18962:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203233322062697473","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18983:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""},"value":"SafeCast: value doesn't fit in 232 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5797fb2c4589bd6a92752ce0eacaac67341e37ab28c96c2284ab897e7ac77957","typeString":"literal_string \"SafeCast: value doesn't fit in 232 bits\""}],"id":1942,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18954:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18954:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1948,"nodeType":"ExpressionStatement","src":"18954:71:4"}]},"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"18479:350:4","text":" @dev Returns the downcasted int232 from int256, reverting on\n overflow (when the input is less than smallest int232 or\n greater than largest int232).\n Counterpart to Solidity's `int232` operator.\n Requirements:\n - input must fit into 232 bits\n _Available since v4.7._"},"id":1950,"implemented":true,"kind":"function","modifiers":[],"name":"toInt232","nameLocation":"18843:8:4","nodeType":"FunctionDefinition","parameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"value","nameLocation":"18859:5:4","nodeType":"VariableDeclaration","scope":1950,"src":"18852:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1929,"name":"int256","nodeType":"ElementaryTypeName","src":"18852:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"18851:14:4"},"returnParameters":{"id":1934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1933,"mutability":"mutable","name":"downcasted","nameLocation":"18896:10:4","nodeType":"VariableDeclaration","scope":1950,"src":"18889:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"},"typeName":{"id":1932,"name":"int232","nodeType":"ElementaryTypeName","src":"18889:6:4","typeDescriptions":{"typeIdentifier":"t_int232","typeString":"int232"}},"visibility":"internal"}],"src":"18888:19:4"},"scope":2623,"src":"18834:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1972,"nodeType":"Block","src":"19467:124:4","statements":[{"expression":{"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1958,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"19477:10:4","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1961,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"19497:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1960,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19490:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int224_$","typeString":"type(int224)"},"typeName":{"id":1959,"name":"int224","nodeType":"ElementaryTypeName","src":"19490:6:4","typeDescriptions":{}}},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19490:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"src":"19477:26:4","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"id":1964,"nodeType":"ExpressionStatement","src":"19477:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1966,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"19521:10:4","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"19535:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"19521:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203232342062697473","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"19542:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""},"value":"SafeCast: value doesn't fit in 224 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79","typeString":"literal_string \"SafeCast: value doesn't fit in 224 bits\""}],"id":1965,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"19513:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19513:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1971,"nodeType":"ExpressionStatement","src":"19513:71:4"}]},"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"19038:350:4","text":" @dev Returns the downcasted int224 from int256, reverting on\n overflow (when the input is less than smallest int224 or\n greater than largest int224).\n Counterpart to Solidity's `int224` operator.\n Requirements:\n - input must fit into 224 bits\n _Available since v4.7._"},"id":1973,"implemented":true,"kind":"function","modifiers":[],"name":"toInt224","nameLocation":"19402:8:4","nodeType":"FunctionDefinition","parameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"value","nameLocation":"19418:5:4","nodeType":"VariableDeclaration","scope":1973,"src":"19411:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1952,"name":"int256","nodeType":"ElementaryTypeName","src":"19411:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19410:14:4"},"returnParameters":{"id":1957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1956,"mutability":"mutable","name":"downcasted","nameLocation":"19455:10:4","nodeType":"VariableDeclaration","scope":1973,"src":"19448:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"},"typeName":{"id":1955,"name":"int224","nodeType":"ElementaryTypeName","src":"19448:6:4","typeDescriptions":{"typeIdentifier":"t_int224","typeString":"int224"}},"visibility":"internal"}],"src":"19447:19:4"},"scope":2623,"src":"19393:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1995,"nodeType":"Block","src":"20026:124:4","statements":[{"expression":{"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1981,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"20036:10:4","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"20056:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20049:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int216_$","typeString":"type(int216)"},"typeName":{"id":1982,"name":"int216","nodeType":"ElementaryTypeName","src":"20049:6:4","typeDescriptions":{}}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20049:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"src":"20036:26:4","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"id":1987,"nodeType":"ExpressionStatement","src":"20036:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1989,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"20080:10:4","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1990,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"20094:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20080:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203231362062697473","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20101:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""},"value":"SafeCast: value doesn't fit in 216 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8966adc0aad8dc91b207c69c3eb4937e498af8cc706cfe7edd55f3a6ea53488d","typeString":"literal_string \"SafeCast: value doesn't fit in 216 bits\""}],"id":1988,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20072:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20072:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1994,"nodeType":"ExpressionStatement","src":"20072:71:4"}]},"documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"19597:350:4","text":" @dev Returns the downcasted int216 from int256, reverting on\n overflow (when the input is less than smallest int216 or\n greater than largest int216).\n Counterpart to Solidity's `int216` operator.\n Requirements:\n - input must fit into 216 bits\n _Available since v4.7._"},"id":1996,"implemented":true,"kind":"function","modifiers":[],"name":"toInt216","nameLocation":"19961:8:4","nodeType":"FunctionDefinition","parameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"value","nameLocation":"19977:5:4","nodeType":"VariableDeclaration","scope":1996,"src":"19970:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1975,"name":"int256","nodeType":"ElementaryTypeName","src":"19970:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"19969:14:4"},"returnParameters":{"id":1980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1979,"mutability":"mutable","name":"downcasted","nameLocation":"20014:10:4","nodeType":"VariableDeclaration","scope":1996,"src":"20007:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"},"typeName":{"id":1978,"name":"int216","nodeType":"ElementaryTypeName","src":"20007:6:4","typeDescriptions":{"typeIdentifier":"t_int216","typeString":"int216"}},"visibility":"internal"}],"src":"20006:19:4"},"scope":2623,"src":"19952:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2018,"nodeType":"Block","src":"20585:124:4","statements":[{"expression":{"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2004,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"20595:10:4","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"20615:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2006,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20608:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int208_$","typeString":"type(int208)"},"typeName":{"id":2005,"name":"int208","nodeType":"ElementaryTypeName","src":"20608:6:4","typeDescriptions":{}}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20608:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"src":"20595:26:4","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"id":2010,"nodeType":"ExpressionStatement","src":"20595:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2012,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"20639:10:4","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2013,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"20653:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"20639:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230382062697473","id":2015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"20660:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""},"value":"SafeCast: value doesn't fit in 208 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_43d81217fa633fa1c6e88855de94fb990f5831ac266b0a90afa660e986ab5e23","typeString":"literal_string \"SafeCast: value doesn't fit in 208 bits\""}],"id":2011,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"20631:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20631:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2017,"nodeType":"ExpressionStatement","src":"20631:71:4"}]},"documentation":{"id":1997,"nodeType":"StructuredDocumentation","src":"20156:350:4","text":" @dev Returns the downcasted int208 from int256, reverting on\n overflow (when the input is less than smallest int208 or\n greater than largest int208).\n Counterpart to Solidity's `int208` operator.\n Requirements:\n - input must fit into 208 bits\n _Available since v4.7._"},"id":2019,"implemented":true,"kind":"function","modifiers":[],"name":"toInt208","nameLocation":"20520:8:4","nodeType":"FunctionDefinition","parameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1999,"mutability":"mutable","name":"value","nameLocation":"20536:5:4","nodeType":"VariableDeclaration","scope":2019,"src":"20529:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1998,"name":"int256","nodeType":"ElementaryTypeName","src":"20529:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"20528:14:4"},"returnParameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"downcasted","nameLocation":"20573:10:4","nodeType":"VariableDeclaration","scope":2019,"src":"20566:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"},"typeName":{"id":2001,"name":"int208","nodeType":"ElementaryTypeName","src":"20566:6:4","typeDescriptions":{"typeIdentifier":"t_int208","typeString":"int208"}},"visibility":"internal"}],"src":"20565:19:4"},"scope":2623,"src":"20511:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2041,"nodeType":"Block","src":"21144:124:4","statements":[{"expression":{"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2027,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"21154:10:4","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2030,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"21174:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21167:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int200_$","typeString":"type(int200)"},"typeName":{"id":2028,"name":"int200","nodeType":"ElementaryTypeName","src":"21167:6:4","typeDescriptions":{}}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21167:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"src":"21154:26:4","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"id":2033,"nodeType":"ExpressionStatement","src":"21154:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2035,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"21198:10:4","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"21212:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21198:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203230302062697473","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21219:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""},"value":"SafeCast: value doesn't fit in 200 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df8130f294fe2698967ea9ead82c4da9454490567d976d00551e0174e655314c","typeString":"literal_string \"SafeCast: value doesn't fit in 200 bits\""}],"id":2034,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21190:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21190:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2040,"nodeType":"ExpressionStatement","src":"21190:71:4"}]},"documentation":{"id":2020,"nodeType":"StructuredDocumentation","src":"20715:350:4","text":" @dev Returns the downcasted int200 from int256, reverting on\n overflow (when the input is less than smallest int200 or\n greater than largest int200).\n Counterpart to Solidity's `int200` operator.\n Requirements:\n - input must fit into 200 bits\n _Available since v4.7._"},"id":2042,"implemented":true,"kind":"function","modifiers":[],"name":"toInt200","nameLocation":"21079:8:4","nodeType":"FunctionDefinition","parameters":{"id":2023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2022,"mutability":"mutable","name":"value","nameLocation":"21095:5:4","nodeType":"VariableDeclaration","scope":2042,"src":"21088:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2021,"name":"int256","nodeType":"ElementaryTypeName","src":"21088:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21087:14:4"},"returnParameters":{"id":2026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2025,"mutability":"mutable","name":"downcasted","nameLocation":"21132:10:4","nodeType":"VariableDeclaration","scope":2042,"src":"21125:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"},"typeName":{"id":2024,"name":"int200","nodeType":"ElementaryTypeName","src":"21125:6:4","typeDescriptions":{"typeIdentifier":"t_int200","typeString":"int200"}},"visibility":"internal"}],"src":"21124:19:4"},"scope":2623,"src":"21070:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2064,"nodeType":"Block","src":"21703:124:4","statements":[{"expression":{"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2050,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"21713:10:4","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"21733:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21726:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int192_$","typeString":"type(int192)"},"typeName":{"id":2051,"name":"int192","nodeType":"ElementaryTypeName","src":"21726:6:4","typeDescriptions":{}}},"id":2054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21726:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"src":"21713:26:4","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"id":2056,"nodeType":"ExpressionStatement","src":"21713:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2058,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2048,"src":"21757:10:4","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"21771:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"21757:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203139322062697473","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"21778:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""},"value":"SafeCast: value doesn't fit in 192 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_112978800f12a1c4f1eab82789f7b6defd49dc1c17ba270a84ffc28392fb05ae","typeString":"literal_string \"SafeCast: value doesn't fit in 192 bits\""}],"id":2057,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"21749:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21749:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2063,"nodeType":"ExpressionStatement","src":"21749:71:4"}]},"documentation":{"id":2043,"nodeType":"StructuredDocumentation","src":"21274:350:4","text":" @dev Returns the downcasted int192 from int256, reverting on\n overflow (when the input is less than smallest int192 or\n greater than largest int192).\n Counterpart to Solidity's `int192` operator.\n Requirements:\n - input must fit into 192 bits\n _Available since v4.7._"},"id":2065,"implemented":true,"kind":"function","modifiers":[],"name":"toInt192","nameLocation":"21638:8:4","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2045,"mutability":"mutable","name":"value","nameLocation":"21654:5:4","nodeType":"VariableDeclaration","scope":2065,"src":"21647:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2044,"name":"int256","nodeType":"ElementaryTypeName","src":"21647:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"21646:14:4"},"returnParameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"downcasted","nameLocation":"21691:10:4","nodeType":"VariableDeclaration","scope":2065,"src":"21684:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"},"typeName":{"id":2047,"name":"int192","nodeType":"ElementaryTypeName","src":"21684:6:4","typeDescriptions":{"typeIdentifier":"t_int192","typeString":"int192"}},"visibility":"internal"}],"src":"21683:19:4"},"scope":2623,"src":"21629:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2087,"nodeType":"Block","src":"22262:124:4","statements":[{"expression":{"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2073,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"22272:10:4","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"22292:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22285:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int184_$","typeString":"type(int184)"},"typeName":{"id":2074,"name":"int184","nodeType":"ElementaryTypeName","src":"22285:6:4","typeDescriptions":{}}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22285:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"src":"22272:26:4","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"id":2079,"nodeType":"ExpressionStatement","src":"22272:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2081,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"22316:10:4","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"22330:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22316:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203138342062697473","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22337:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""},"value":"SafeCast: value doesn't fit in 184 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_86c53d89b1944d561ecfa42e859033241d1df6ea8d42a57ae02f79d45de4aa75","typeString":"literal_string \"SafeCast: value doesn't fit in 184 bits\""}],"id":2080,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22308:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22308:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2086,"nodeType":"ExpressionStatement","src":"22308:71:4"}]},"documentation":{"id":2066,"nodeType":"StructuredDocumentation","src":"21833:350:4","text":" @dev Returns the downcasted int184 from int256, reverting on\n overflow (when the input is less than smallest int184 or\n greater than largest int184).\n Counterpart to Solidity's `int184` operator.\n Requirements:\n - input must fit into 184 bits\n _Available since v4.7._"},"id":2088,"implemented":true,"kind":"function","modifiers":[],"name":"toInt184","nameLocation":"22197:8:4","nodeType":"FunctionDefinition","parameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"value","nameLocation":"22213:5:4","nodeType":"VariableDeclaration","scope":2088,"src":"22206:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2067,"name":"int256","nodeType":"ElementaryTypeName","src":"22206:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22205:14:4"},"returnParameters":{"id":2072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2071,"mutability":"mutable","name":"downcasted","nameLocation":"22250:10:4","nodeType":"VariableDeclaration","scope":2088,"src":"22243:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"},"typeName":{"id":2070,"name":"int184","nodeType":"ElementaryTypeName","src":"22243:6:4","typeDescriptions":{"typeIdentifier":"t_int184","typeString":"int184"}},"visibility":"internal"}],"src":"22242:19:4"},"scope":2623,"src":"22188:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2110,"nodeType":"Block","src":"22821:124:4","statements":[{"expression":{"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2096,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"22831:10:4","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2099,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"22851:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22844:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int176_$","typeString":"type(int176)"},"typeName":{"id":2097,"name":"int176","nodeType":"ElementaryTypeName","src":"22844:6:4","typeDescriptions":{}}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22844:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"src":"22831:26:4","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"id":2102,"nodeType":"ExpressionStatement","src":"22831:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2104,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"22875:10:4","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"22889:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"22875:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203137362062697473","id":2107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22896:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""},"value":"SafeCast: value doesn't fit in 176 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4069e970f734339c7841e84a1b26f503bff22b76884c1168dc24e2e6af9b1e30","typeString":"literal_string \"SafeCast: value doesn't fit in 176 bits\""}],"id":2103,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22867:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22867:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"ExpressionStatement","src":"22867:71:4"}]},"documentation":{"id":2089,"nodeType":"StructuredDocumentation","src":"22392:350:4","text":" @dev Returns the downcasted int176 from int256, reverting on\n overflow (when the input is less than smallest int176 or\n greater than largest int176).\n Counterpart to Solidity's `int176` operator.\n Requirements:\n - input must fit into 176 bits\n _Available since v4.7._"},"id":2111,"implemented":true,"kind":"function","modifiers":[],"name":"toInt176","nameLocation":"22756:8:4","nodeType":"FunctionDefinition","parameters":{"id":2092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"value","nameLocation":"22772:5:4","nodeType":"VariableDeclaration","scope":2111,"src":"22765:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2090,"name":"int256","nodeType":"ElementaryTypeName","src":"22765:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"22764:14:4"},"returnParameters":{"id":2095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"downcasted","nameLocation":"22809:10:4","nodeType":"VariableDeclaration","scope":2111,"src":"22802:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"},"typeName":{"id":2093,"name":"int176","nodeType":"ElementaryTypeName","src":"22802:6:4","typeDescriptions":{"typeIdentifier":"t_int176","typeString":"int176"}},"visibility":"internal"}],"src":"22801:19:4"},"scope":2623,"src":"22747:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2133,"nodeType":"Block","src":"23380:124:4","statements":[{"expression":{"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2119,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"23390:10:4","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"23410:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23403:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int168_$","typeString":"type(int168)"},"typeName":{"id":2120,"name":"int168","nodeType":"ElementaryTypeName","src":"23403:6:4","typeDescriptions":{}}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23403:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"src":"23390:26:4","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"id":2125,"nodeType":"ExpressionStatement","src":"23390:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"23434:10:4","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2128,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"23448:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23434:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136382062697473","id":2130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23455:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""},"value":"SafeCast: value doesn't fit in 168 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67ef32a3cbe7b34392347d335b0a7ae95c74a34ca40e4efb58f6c9a3154e85a1","typeString":"literal_string \"SafeCast: value doesn't fit in 168 bits\""}],"id":2126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23426:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23426:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2132,"nodeType":"ExpressionStatement","src":"23426:71:4"}]},"documentation":{"id":2112,"nodeType":"StructuredDocumentation","src":"22951:350:4","text":" @dev Returns the downcasted int168 from int256, reverting on\n overflow (when the input is less than smallest int168 or\n greater than largest int168).\n Counterpart to Solidity's `int168` operator.\n Requirements:\n - input must fit into 168 bits\n _Available since v4.7._"},"id":2134,"implemented":true,"kind":"function","modifiers":[],"name":"toInt168","nameLocation":"23315:8:4","nodeType":"FunctionDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2114,"mutability":"mutable","name":"value","nameLocation":"23331:5:4","nodeType":"VariableDeclaration","scope":2134,"src":"23324:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2113,"name":"int256","nodeType":"ElementaryTypeName","src":"23324:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23323:14:4"},"returnParameters":{"id":2118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2117,"mutability":"mutable","name":"downcasted","nameLocation":"23368:10:4","nodeType":"VariableDeclaration","scope":2134,"src":"23361:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"},"typeName":{"id":2116,"name":"int168","nodeType":"ElementaryTypeName","src":"23361:6:4","typeDescriptions":{"typeIdentifier":"t_int168","typeString":"int168"}},"visibility":"internal"}],"src":"23360:19:4"},"scope":2623,"src":"23306:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2156,"nodeType":"Block","src":"23939:124:4","statements":[{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2142,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"23949:10:4","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"23969:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23962:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int160_$","typeString":"type(int160)"},"typeName":{"id":2143,"name":"int160","nodeType":"ElementaryTypeName","src":"23962:6:4","typeDescriptions":{}}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23962:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"src":"23949:26:4","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"id":2148,"nodeType":"ExpressionStatement","src":"23949:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2150,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2140,"src":"23993:10:4","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"24007:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"23993:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203136302062697473","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24014:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""},"value":"SafeCast: value doesn't fit in 160 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_976ecce9083debfe29d3a99b955facf24b8725f1b964d1a5bb4197ffcd60ab9d","typeString":"literal_string \"SafeCast: value doesn't fit in 160 bits\""}],"id":2149,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"23985:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23985:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2155,"nodeType":"ExpressionStatement","src":"23985:71:4"}]},"documentation":{"id":2135,"nodeType":"StructuredDocumentation","src":"23510:350:4","text":" @dev Returns the downcasted int160 from int256, reverting on\n overflow (when the input is less than smallest int160 or\n greater than largest int160).\n Counterpart to Solidity's `int160` operator.\n Requirements:\n - input must fit into 160 bits\n _Available since v4.7._"},"id":2157,"implemented":true,"kind":"function","modifiers":[],"name":"toInt160","nameLocation":"23874:8:4","nodeType":"FunctionDefinition","parameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2137,"mutability":"mutable","name":"value","nameLocation":"23890:5:4","nodeType":"VariableDeclaration","scope":2157,"src":"23883:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2136,"name":"int256","nodeType":"ElementaryTypeName","src":"23883:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"23882:14:4"},"returnParameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"downcasted","nameLocation":"23927:10:4","nodeType":"VariableDeclaration","scope":2157,"src":"23920:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"},"typeName":{"id":2139,"name":"int160","nodeType":"ElementaryTypeName","src":"23920:6:4","typeDescriptions":{"typeIdentifier":"t_int160","typeString":"int160"}},"visibility":"internal"}],"src":"23919:19:4"},"scope":2623,"src":"23865:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2179,"nodeType":"Block","src":"24498:124:4","statements":[{"expression":{"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2165,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"24508:10:4","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2168,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"24528:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24521:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int152_$","typeString":"type(int152)"},"typeName":{"id":2166,"name":"int152","nodeType":"ElementaryTypeName","src":"24521:6:4","typeDescriptions":{}}},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24521:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"src":"24508:26:4","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"id":2171,"nodeType":"ExpressionStatement","src":"24508:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2173,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"24552:10:4","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"24566:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"24552:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203135322062697473","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"24573:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""},"value":"SafeCast: value doesn't fit in 152 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_211cad43a2caf5f01e34af51190b8a7b6f3d9c195bd25586ea12242191b97831","typeString":"literal_string \"SafeCast: value doesn't fit in 152 bits\""}],"id":2172,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"24544:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24544:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2178,"nodeType":"ExpressionStatement","src":"24544:71:4"}]},"documentation":{"id":2158,"nodeType":"StructuredDocumentation","src":"24069:350:4","text":" @dev Returns the downcasted int152 from int256, reverting on\n overflow (when the input is less than smallest int152 or\n greater than largest int152).\n Counterpart to Solidity's `int152` operator.\n Requirements:\n - input must fit into 152 bits\n _Available since v4.7._"},"id":2180,"implemented":true,"kind":"function","modifiers":[],"name":"toInt152","nameLocation":"24433:8:4","nodeType":"FunctionDefinition","parameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2160,"mutability":"mutable","name":"value","nameLocation":"24449:5:4","nodeType":"VariableDeclaration","scope":2180,"src":"24442:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2159,"name":"int256","nodeType":"ElementaryTypeName","src":"24442:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"24441:14:4"},"returnParameters":{"id":2164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2163,"mutability":"mutable","name":"downcasted","nameLocation":"24486:10:4","nodeType":"VariableDeclaration","scope":2180,"src":"24479:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"},"typeName":{"id":2162,"name":"int152","nodeType":"ElementaryTypeName","src":"24479:6:4","typeDescriptions":{"typeIdentifier":"t_int152","typeString":"int152"}},"visibility":"internal"}],"src":"24478:19:4"},"scope":2623,"src":"24424:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2202,"nodeType":"Block","src":"25057:124:4","statements":[{"expression":{"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2188,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"25067:10:4","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2191,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"25087:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25080:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int144_$","typeString":"type(int144)"},"typeName":{"id":2189,"name":"int144","nodeType":"ElementaryTypeName","src":"25080:6:4","typeDescriptions":{}}},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25080:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"src":"25067:26:4","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"id":2194,"nodeType":"ExpressionStatement","src":"25067:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2196,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"25111:10:4","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"25125:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25111:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203134342062697473","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25132:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""},"value":"SafeCast: value doesn't fit in 144 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_17d8c5a6d3b2fd2517ba2e4a2ac70a3367cd362448f8338aaa6edf8bfd812bab","typeString":"literal_string \"SafeCast: value doesn't fit in 144 bits\""}],"id":2195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25103:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25103:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2201,"nodeType":"ExpressionStatement","src":"25103:71:4"}]},"documentation":{"id":2181,"nodeType":"StructuredDocumentation","src":"24628:350:4","text":" @dev Returns the downcasted int144 from int256, reverting on\n overflow (when the input is less than smallest int144 or\n greater than largest int144).\n Counterpart to Solidity's `int144` operator.\n Requirements:\n - input must fit into 144 bits\n _Available since v4.7._"},"id":2203,"implemented":true,"kind":"function","modifiers":[],"name":"toInt144","nameLocation":"24992:8:4","nodeType":"FunctionDefinition","parameters":{"id":2184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2183,"mutability":"mutable","name":"value","nameLocation":"25008:5:4","nodeType":"VariableDeclaration","scope":2203,"src":"25001:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2182,"name":"int256","nodeType":"ElementaryTypeName","src":"25001:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25000:14:4"},"returnParameters":{"id":2187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"downcasted","nameLocation":"25045:10:4","nodeType":"VariableDeclaration","scope":2203,"src":"25038:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"},"typeName":{"id":2185,"name":"int144","nodeType":"ElementaryTypeName","src":"25038:6:4","typeDescriptions":{"typeIdentifier":"t_int144","typeString":"int144"}},"visibility":"internal"}],"src":"25037:19:4"},"scope":2623,"src":"24983:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2225,"nodeType":"Block","src":"25616:124:4","statements":[{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2211,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"25626:10:4","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"25646:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25639:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int136_$","typeString":"type(int136)"},"typeName":{"id":2212,"name":"int136","nodeType":"ElementaryTypeName","src":"25639:6:4","typeDescriptions":{}}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25639:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"src":"25626:26:4","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"id":2217,"nodeType":"ExpressionStatement","src":"25626:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2219,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"25670:10:4","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"25684:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"25670:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203133362062697473","id":2222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"25691:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""},"value":"SafeCast: value doesn't fit in 136 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8b1f81e2e2913e1cee9dba7bcd9837bbf8a8122edaac4afc578271db3c25a56a","typeString":"literal_string \"SafeCast: value doesn't fit in 136 bits\""}],"id":2218,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"25662:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25662:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2224,"nodeType":"ExpressionStatement","src":"25662:71:4"}]},"documentation":{"id":2204,"nodeType":"StructuredDocumentation","src":"25187:350:4","text":" @dev Returns the downcasted int136 from int256, reverting on\n overflow (when the input is less than smallest int136 or\n greater than largest int136).\n Counterpart to Solidity's `int136` operator.\n Requirements:\n - input must fit into 136 bits\n _Available since v4.7._"},"id":2226,"implemented":true,"kind":"function","modifiers":[],"name":"toInt136","nameLocation":"25551:8:4","nodeType":"FunctionDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"value","nameLocation":"25567:5:4","nodeType":"VariableDeclaration","scope":2226,"src":"25560:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2205,"name":"int256","nodeType":"ElementaryTypeName","src":"25560:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"25559:14:4"},"returnParameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"downcasted","nameLocation":"25604:10:4","nodeType":"VariableDeclaration","scope":2226,"src":"25597:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"},"typeName":{"id":2208,"name":"int136","nodeType":"ElementaryTypeName","src":"25597:6:4","typeDescriptions":{"typeIdentifier":"t_int136","typeString":"int136"}},"visibility":"internal"}],"src":"25596:19:4"},"scope":2623,"src":"25542:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2248,"nodeType":"Block","src":"26175:124:4","statements":[{"expression":{"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2234,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"26185:10:4","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2237,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"26205:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26198:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int128_$","typeString":"type(int128)"},"typeName":{"id":2235,"name":"int128","nodeType":"ElementaryTypeName","src":"26198:6:4","typeDescriptions":{}}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26198:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"src":"26185:26:4","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"id":2240,"nodeType":"ExpressionStatement","src":"26185:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2242,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"26229:10:4","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2243,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"26243:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26229:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26250:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""},"value":"SafeCast: value doesn't fit in 128 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47a1e201974f94d3d1a31c8b08ae18c6966c758bdcd4400020012b98cc55426c","typeString":"literal_string \"SafeCast: value doesn't fit in 128 bits\""}],"id":2241,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26221:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26221:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2247,"nodeType":"ExpressionStatement","src":"26221:71:4"}]},"documentation":{"id":2227,"nodeType":"StructuredDocumentation","src":"25746:350:4","text":" @dev Returns the downcasted int128 from int256, reverting on\n overflow (when the input is less than smallest int128 or\n greater than largest int128).\n Counterpart to Solidity's `int128` operator.\n Requirements:\n - input must fit into 128 bits\n _Available since v3.1._"},"id":2249,"implemented":true,"kind":"function","modifiers":[],"name":"toInt128","nameLocation":"26110:8:4","nodeType":"FunctionDefinition","parameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"value","nameLocation":"26126:5:4","nodeType":"VariableDeclaration","scope":2249,"src":"26119:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2228,"name":"int256","nodeType":"ElementaryTypeName","src":"26119:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26118:14:4"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2232,"mutability":"mutable","name":"downcasted","nameLocation":"26163:10:4","nodeType":"VariableDeclaration","scope":2249,"src":"26156:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"},"typeName":{"id":2231,"name":"int128","nodeType":"ElementaryTypeName","src":"26156:6:4","typeDescriptions":{"typeIdentifier":"t_int128","typeString":"int128"}},"visibility":"internal"}],"src":"26155:19:4"},"scope":2623,"src":"26101:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2271,"nodeType":"Block","src":"26734:124:4","statements":[{"expression":{"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2257,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"26744:10:4","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"26764:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26757:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int120_$","typeString":"type(int120)"},"typeName":{"id":2258,"name":"int120","nodeType":"ElementaryTypeName","src":"26757:6:4","typeDescriptions":{}}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26757:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"src":"26744:26:4","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"id":2263,"nodeType":"ExpressionStatement","src":"26744:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"26788:10:4","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2266,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"26802:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"26788:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203132302062697473","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26809:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""},"value":"SafeCast: value doesn't fit in 120 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3c40c26bb27060cce77002ca0c426dcc1bef2d367c195ca2eb24bd8b2cc1bb09","typeString":"literal_string \"SafeCast: value doesn't fit in 120 bits\""}],"id":2264,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"26780:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26780:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2270,"nodeType":"ExpressionStatement","src":"26780:71:4"}]},"documentation":{"id":2250,"nodeType":"StructuredDocumentation","src":"26305:350:4","text":" @dev Returns the downcasted int120 from int256, reverting on\n overflow (when the input is less than smallest int120 or\n greater than largest int120).\n Counterpart to Solidity's `int120` operator.\n Requirements:\n - input must fit into 120 bits\n _Available since v4.7._"},"id":2272,"implemented":true,"kind":"function","modifiers":[],"name":"toInt120","nameLocation":"26669:8:4","nodeType":"FunctionDefinition","parameters":{"id":2253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2252,"mutability":"mutable","name":"value","nameLocation":"26685:5:4","nodeType":"VariableDeclaration","scope":2272,"src":"26678:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2251,"name":"int256","nodeType":"ElementaryTypeName","src":"26678:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"26677:14:4"},"returnParameters":{"id":2256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"mutability":"mutable","name":"downcasted","nameLocation":"26722:10:4","nodeType":"VariableDeclaration","scope":2272,"src":"26715:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"},"typeName":{"id":2254,"name":"int120","nodeType":"ElementaryTypeName","src":"26715:6:4","typeDescriptions":{"typeIdentifier":"t_int120","typeString":"int120"}},"visibility":"internal"}],"src":"26714:19:4"},"scope":2623,"src":"26660:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"27293:124:4","statements":[{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2280,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"27303:10:4","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"27323:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27316:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int112_$","typeString":"type(int112)"},"typeName":{"id":2281,"name":"int112","nodeType":"ElementaryTypeName","src":"27316:6:4","typeDescriptions":{}}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27316:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"src":"27303:26:4","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"id":2286,"nodeType":"ExpressionStatement","src":"27303:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2288,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"27347:10:4","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"27361:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27347:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203131322062697473","id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27368:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""},"value":"SafeCast: value doesn't fit in 112 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45659ae152ef697531e1c1115de07c87af91ac22466c3e76b808821799776efd","typeString":"literal_string \"SafeCast: value doesn't fit in 112 bits\""}],"id":2287,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"27339:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27339:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"27339:71:4"}]},"documentation":{"id":2273,"nodeType":"StructuredDocumentation","src":"26864:350:4","text":" @dev Returns the downcasted int112 from int256, reverting on\n overflow (when the input is less than smallest int112 or\n greater than largest int112).\n Counterpart to Solidity's `int112` operator.\n Requirements:\n - input must fit into 112 bits\n _Available since v4.7._"},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"toInt112","nameLocation":"27228:8:4","nodeType":"FunctionDefinition","parameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2275,"mutability":"mutable","name":"value","nameLocation":"27244:5:4","nodeType":"VariableDeclaration","scope":2295,"src":"27237:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2274,"name":"int256","nodeType":"ElementaryTypeName","src":"27237:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27236:14:4"},"returnParameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"downcasted","nameLocation":"27281:10:4","nodeType":"VariableDeclaration","scope":2295,"src":"27274:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"},"typeName":{"id":2277,"name":"int112","nodeType":"ElementaryTypeName","src":"27274:6:4","typeDescriptions":{"typeIdentifier":"t_int112","typeString":"int112"}},"visibility":"internal"}],"src":"27273:19:4"},"scope":2623,"src":"27219:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2317,"nodeType":"Block","src":"27852:124:4","statements":[{"expression":{"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2303,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"27862:10:4","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2306,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"27882:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27875:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int104_$","typeString":"type(int104)"},"typeName":{"id":2304,"name":"int104","nodeType":"ElementaryTypeName","src":"27875:6:4","typeDescriptions":{}}},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27875:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"src":"27862:26:4","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"id":2309,"nodeType":"ExpressionStatement","src":"27862:26:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2311,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"27906:10:4","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2312,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"27920:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"27906:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e203130342062697473","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"27927:41:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""},"value":"SafeCast: value doesn't fit in 104 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d7f3e1b7e9f9a06fded6b093c6fd1473ca0a14cc4bb683db904e803e2482981","typeString":"literal_string \"SafeCast: value doesn't fit in 104 bits\""}],"id":2310,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"27898:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27898:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2316,"nodeType":"ExpressionStatement","src":"27898:71:4"}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"27423:350:4","text":" @dev Returns the downcasted int104 from int256, reverting on\n overflow (when the input is less than smallest int104 or\n greater than largest int104).\n Counterpart to Solidity's `int104` operator.\n Requirements:\n - input must fit into 104 bits\n _Available since v4.7._"},"id":2318,"implemented":true,"kind":"function","modifiers":[],"name":"toInt104","nameLocation":"27787:8:4","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"value","nameLocation":"27803:5:4","nodeType":"VariableDeclaration","scope":2318,"src":"27796:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2297,"name":"int256","nodeType":"ElementaryTypeName","src":"27796:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"27795:14:4"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"downcasted","nameLocation":"27840:10:4","nodeType":"VariableDeclaration","scope":2318,"src":"27833:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"},"typeName":{"id":2300,"name":"int104","nodeType":"ElementaryTypeName","src":"27833:6:4","typeDescriptions":{"typeIdentifier":"t_int104","typeString":"int104"}},"visibility":"internal"}],"src":"27832:19:4"},"scope":2623,"src":"27778:198:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2340,"nodeType":"Block","src":"28404:122:4","statements":[{"expression":{"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2326,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"28414:10:4","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"28433:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28427:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int96_$","typeString":"type(int96)"},"typeName":{"id":2327,"name":"int96","nodeType":"ElementaryTypeName","src":"28427:5:4","typeDescriptions":{}}},"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28427:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"src":"28414:25:4","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"id":2332,"nodeType":"ExpressionStatement","src":"28414:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"28457:10:4","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"28471:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"28457:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2039362062697473","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"28478:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""},"value":"SafeCast: value doesn't fit in 96 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_06d20189090e973729391526269baef79c35dd621633195648e5f8309eef9e19","typeString":"literal_string \"SafeCast: value doesn't fit in 96 bits\""}],"id":2333,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"28449:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28449:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2339,"nodeType":"ExpressionStatement","src":"28449:70:4"}]},"documentation":{"id":2319,"nodeType":"StructuredDocumentation","src":"27982:345:4","text":" @dev Returns the downcasted int96 from int256, reverting on\n overflow (when the input is less than smallest int96 or\n greater than largest int96).\n Counterpart to Solidity's `int96` operator.\n Requirements:\n - input must fit into 96 bits\n _Available since v4.7._"},"id":2341,"implemented":true,"kind":"function","modifiers":[],"name":"toInt96","nameLocation":"28341:7:4","nodeType":"FunctionDefinition","parameters":{"id":2322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2321,"mutability":"mutable","name":"value","nameLocation":"28356:5:4","nodeType":"VariableDeclaration","scope":2341,"src":"28349:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2320,"name":"int256","nodeType":"ElementaryTypeName","src":"28349:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28348:14:4"},"returnParameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"downcasted","nameLocation":"28392:10:4","nodeType":"VariableDeclaration","scope":2341,"src":"28386:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"},"typeName":{"id":2323,"name":"int96","nodeType":"ElementaryTypeName","src":"28386:5:4","typeDescriptions":{"typeIdentifier":"t_int96","typeString":"int96"}},"visibility":"internal"}],"src":"28385:18:4"},"scope":2623,"src":"28332:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2363,"nodeType":"Block","src":"28954:122:4","statements":[{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2349,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"28964:10:4","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"28983:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28977:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int88_$","typeString":"type(int88)"},"typeName":{"id":2350,"name":"int88","nodeType":"ElementaryTypeName","src":"28977:5:4","typeDescriptions":{}}},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28977:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"src":"28964:25:4","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"id":2355,"nodeType":"ExpressionStatement","src":"28964:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2357,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"29007:10:4","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2358,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2344,"src":"29021:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29007:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038382062697473","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29028:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""},"value":"SafeCast: value doesn't fit in 88 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae080bd7a76a46f0a0caf00941bc2cdf6002799ca2813a3af7295019576d715d","typeString":"literal_string \"SafeCast: value doesn't fit in 88 bits\""}],"id":2356,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"28999:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28999:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2362,"nodeType":"ExpressionStatement","src":"28999:70:4"}]},"documentation":{"id":2342,"nodeType":"StructuredDocumentation","src":"28532:345:4","text":" @dev Returns the downcasted int88 from int256, reverting on\n overflow (when the input is less than smallest int88 or\n greater than largest int88).\n Counterpart to Solidity's `int88` operator.\n Requirements:\n - input must fit into 88 bits\n _Available since v4.7._"},"id":2364,"implemented":true,"kind":"function","modifiers":[],"name":"toInt88","nameLocation":"28891:7:4","nodeType":"FunctionDefinition","parameters":{"id":2345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2344,"mutability":"mutable","name":"value","nameLocation":"28906:5:4","nodeType":"VariableDeclaration","scope":2364,"src":"28899:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2343,"name":"int256","nodeType":"ElementaryTypeName","src":"28899:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"28898:14:4"},"returnParameters":{"id":2348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2347,"mutability":"mutable","name":"downcasted","nameLocation":"28942:10:4","nodeType":"VariableDeclaration","scope":2364,"src":"28936:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"},"typeName":{"id":2346,"name":"int88","nodeType":"ElementaryTypeName","src":"28936:5:4","typeDescriptions":{"typeIdentifier":"t_int88","typeString":"int88"}},"visibility":"internal"}],"src":"28935:18:4"},"scope":2623,"src":"28882:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2386,"nodeType":"Block","src":"29504:122:4","statements":[{"expression":{"id":2377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2372,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"29514:10:4","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2375,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"29533:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29527:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int80_$","typeString":"type(int80)"},"typeName":{"id":2373,"name":"int80","nodeType":"ElementaryTypeName","src":"29527:5:4","typeDescriptions":{}}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29527:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"src":"29514:25:4","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"id":2378,"nodeType":"ExpressionStatement","src":"29514:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2380,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2370,"src":"29557:10:4","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2381,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2367,"src":"29571:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"29557:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2038302062697473","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"29578:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""},"value":"SafeCast: value doesn't fit in 80 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3cba87c71fade7d3cd7b673c159aab98afc040a5369691a33559d905d20ab5d1","typeString":"literal_string \"SafeCast: value doesn't fit in 80 bits\""}],"id":2379,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"29549:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29549:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2385,"nodeType":"ExpressionStatement","src":"29549:70:4"}]},"documentation":{"id":2365,"nodeType":"StructuredDocumentation","src":"29082:345:4","text":" @dev Returns the downcasted int80 from int256, reverting on\n overflow (when the input is less than smallest int80 or\n greater than largest int80).\n Counterpart to Solidity's `int80` operator.\n Requirements:\n - input must fit into 80 bits\n _Available since v4.7._"},"id":2387,"implemented":true,"kind":"function","modifiers":[],"name":"toInt80","nameLocation":"29441:7:4","nodeType":"FunctionDefinition","parameters":{"id":2368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2367,"mutability":"mutable","name":"value","nameLocation":"29456:5:4","nodeType":"VariableDeclaration","scope":2387,"src":"29449:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2366,"name":"int256","nodeType":"ElementaryTypeName","src":"29449:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29448:14:4"},"returnParameters":{"id":2371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2370,"mutability":"mutable","name":"downcasted","nameLocation":"29492:10:4","nodeType":"VariableDeclaration","scope":2387,"src":"29486:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"},"typeName":{"id":2369,"name":"int80","nodeType":"ElementaryTypeName","src":"29486:5:4","typeDescriptions":{"typeIdentifier":"t_int80","typeString":"int80"}},"visibility":"internal"}],"src":"29485:18:4"},"scope":2623,"src":"29432:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2409,"nodeType":"Block","src":"30054:122:4","statements":[{"expression":{"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2395,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"30064:10:4","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2398,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"30083:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30077:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int72_$","typeString":"type(int72)"},"typeName":{"id":2396,"name":"int72","nodeType":"ElementaryTypeName","src":"30077:5:4","typeDescriptions":{}}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30077:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"src":"30064:25:4","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"id":2401,"nodeType":"ExpressionStatement","src":"30064:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"30107:10:4","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"30121:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30107:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2037322062697473","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"30128:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""},"value":"SafeCast: value doesn't fit in 72 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_71584237cc5250b8f417982144a947efe8f4c76feba008ff32ac480e69d60606","typeString":"literal_string \"SafeCast: value doesn't fit in 72 bits\""}],"id":2402,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"30099:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30099:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2408,"nodeType":"ExpressionStatement","src":"30099:70:4"}]},"documentation":{"id":2388,"nodeType":"StructuredDocumentation","src":"29632:345:4","text":" @dev Returns the downcasted int72 from int256, reverting on\n overflow (when the input is less than smallest int72 or\n greater than largest int72).\n Counterpart to Solidity's `int72` operator.\n Requirements:\n - input must fit into 72 bits\n _Available since v4.7._"},"id":2410,"implemented":true,"kind":"function","modifiers":[],"name":"toInt72","nameLocation":"29991:7:4","nodeType":"FunctionDefinition","parameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"value","nameLocation":"30006:5:4","nodeType":"VariableDeclaration","scope":2410,"src":"29999:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2389,"name":"int256","nodeType":"ElementaryTypeName","src":"29999:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"29998:14:4"},"returnParameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"downcasted","nameLocation":"30042:10:4","nodeType":"VariableDeclaration","scope":2410,"src":"30036:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"},"typeName":{"id":2392,"name":"int72","nodeType":"ElementaryTypeName","src":"30036:5:4","typeDescriptions":{"typeIdentifier":"t_int72","typeString":"int72"}},"visibility":"internal"}],"src":"30035:18:4"},"scope":2623,"src":"29982:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2432,"nodeType":"Block","src":"30604:122:4","statements":[{"expression":{"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2418,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"30614:10:4","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2421,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"30633:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30627:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int64_$","typeString":"type(int64)"},"typeName":{"id":2419,"name":"int64","nodeType":"ElementaryTypeName","src":"30627:5:4","typeDescriptions":{}}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30627:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"30614:25:4","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"id":2424,"nodeType":"ExpressionStatement","src":"30614:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2426,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2416,"src":"30657:10:4","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2413,"src":"30671:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"30657:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2036342062697473","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"30678:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""},"value":"SafeCast: value doesn't fit in 64 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939","typeString":"literal_string \"SafeCast: value doesn't fit in 64 bits\""}],"id":2425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"30649:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30649:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2431,"nodeType":"ExpressionStatement","src":"30649:70:4"}]},"documentation":{"id":2411,"nodeType":"StructuredDocumentation","src":"30182:345:4","text":" @dev Returns the downcasted int64 from int256, reverting on\n overflow (when the input is less than smallest int64 or\n greater than largest int64).\n Counterpart to Solidity's `int64` operator.\n Requirements:\n - input must fit into 64 bits\n _Available since v3.1._"},"id":2433,"implemented":true,"kind":"function","modifiers":[],"name":"toInt64","nameLocation":"30541:7:4","nodeType":"FunctionDefinition","parameters":{"id":2414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2413,"mutability":"mutable","name":"value","nameLocation":"30556:5:4","nodeType":"VariableDeclaration","scope":2433,"src":"30549:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2412,"name":"int256","nodeType":"ElementaryTypeName","src":"30549:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"30548:14:4"},"returnParameters":{"id":2417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"downcasted","nameLocation":"30592:10:4","nodeType":"VariableDeclaration","scope":2433,"src":"30586:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":2415,"name":"int64","nodeType":"ElementaryTypeName","src":"30586:5:4","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"30585:18:4"},"scope":2623,"src":"30532:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2455,"nodeType":"Block","src":"31154:122:4","statements":[{"expression":{"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2441,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"31164:10:4","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"31183:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31177:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int56_$","typeString":"type(int56)"},"typeName":{"id":2442,"name":"int56","nodeType":"ElementaryTypeName","src":"31177:5:4","typeDescriptions":{}}},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31177:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"src":"31164:25:4","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"id":2447,"nodeType":"ExpressionStatement","src":"31164:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2449,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"31207:10:4","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"31221:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31207:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2035362062697473","id":2452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31228:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""},"value":"SafeCast: value doesn't fit in 56 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656ad93b5ff6665bfe05d97d51fad7c02ad79e6c43bef066c042a6900f450bc5","typeString":"literal_string \"SafeCast: value doesn't fit in 56 bits\""}],"id":2448,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"31199:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31199:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2454,"nodeType":"ExpressionStatement","src":"31199:70:4"}]},"documentation":{"id":2434,"nodeType":"StructuredDocumentation","src":"30732:345:4","text":" @dev Returns the downcasted int56 from int256, reverting on\n overflow (when the input is less than smallest int56 or\n greater than largest int56).\n Counterpart to Solidity's `int56` operator.\n Requirements:\n - input must fit into 56 bits\n _Available since v4.7._"},"id":2456,"implemented":true,"kind":"function","modifiers":[],"name":"toInt56","nameLocation":"31091:7:4","nodeType":"FunctionDefinition","parameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"value","nameLocation":"31106:5:4","nodeType":"VariableDeclaration","scope":2456,"src":"31099:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2435,"name":"int256","nodeType":"ElementaryTypeName","src":"31099:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31098:14:4"},"returnParameters":{"id":2440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"downcasted","nameLocation":"31142:10:4","nodeType":"VariableDeclaration","scope":2456,"src":"31136:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"},"typeName":{"id":2438,"name":"int56","nodeType":"ElementaryTypeName","src":"31136:5:4","typeDescriptions":{"typeIdentifier":"t_int56","typeString":"int56"}},"visibility":"internal"}],"src":"31135:18:4"},"scope":2623,"src":"31082:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2478,"nodeType":"Block","src":"31704:122:4","statements":[{"expression":{"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2464,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"31714:10:4","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2467,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"31733:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31727:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int48_$","typeString":"type(int48)"},"typeName":{"id":2465,"name":"int48","nodeType":"ElementaryTypeName","src":"31727:5:4","typeDescriptions":{}}},"id":2468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31727:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"src":"31714:25:4","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"id":2470,"nodeType":"ExpressionStatement","src":"31714:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2472,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"31757:10:4","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2473,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"31771:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"31757:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034382062697473","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"31778:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""},"value":"SafeCast: value doesn't fit in 48 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_599034f9324dd4e988c6cea5a00a30f53147fec1b01559682f18cd840028f495","typeString":"literal_string \"SafeCast: value doesn't fit in 48 bits\""}],"id":2471,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"31749:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31749:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2477,"nodeType":"ExpressionStatement","src":"31749:70:4"}]},"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"31282:345:4","text":" @dev Returns the downcasted int48 from int256, reverting on\n overflow (when the input is less than smallest int48 or\n greater than largest int48).\n Counterpart to Solidity's `int48` operator.\n Requirements:\n - input must fit into 48 bits\n _Available since v4.7._"},"id":2479,"implemented":true,"kind":"function","modifiers":[],"name":"toInt48","nameLocation":"31641:7:4","nodeType":"FunctionDefinition","parameters":{"id":2460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"value","nameLocation":"31656:5:4","nodeType":"VariableDeclaration","scope":2479,"src":"31649:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2458,"name":"int256","nodeType":"ElementaryTypeName","src":"31649:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"31648:14:4"},"returnParameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"downcasted","nameLocation":"31692:10:4","nodeType":"VariableDeclaration","scope":2479,"src":"31686:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"},"typeName":{"id":2461,"name":"int48","nodeType":"ElementaryTypeName","src":"31686:5:4","typeDescriptions":{"typeIdentifier":"t_int48","typeString":"int48"}},"visibility":"internal"}],"src":"31685:18:4"},"scope":2623,"src":"31632:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2501,"nodeType":"Block","src":"32254:122:4","statements":[{"expression":{"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2487,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"32264:10:4","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2490,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"32283:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32277:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int40_$","typeString":"type(int40)"},"typeName":{"id":2488,"name":"int40","nodeType":"ElementaryTypeName","src":"32277:5:4","typeDescriptions":{}}},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32277:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"src":"32264:25:4","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"id":2493,"nodeType":"ExpressionStatement","src":"32264:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"32307:10:4","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2496,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2482,"src":"32321:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32307:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2034302062697473","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"32328:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""},"value":"SafeCast: value doesn't fit in 40 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b23559c58b98a5d3ed7016699c7171ac8defa5a1d180f9a9ffa60468a5701d37","typeString":"literal_string \"SafeCast: value doesn't fit in 40 bits\""}],"id":2494,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"32299:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32299:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2500,"nodeType":"ExpressionStatement","src":"32299:70:4"}]},"documentation":{"id":2480,"nodeType":"StructuredDocumentation","src":"31832:345:4","text":" @dev Returns the downcasted int40 from int256, reverting on\n overflow (when the input is less than smallest int40 or\n greater than largest int40).\n Counterpart to Solidity's `int40` operator.\n Requirements:\n - input must fit into 40 bits\n _Available since v4.7._"},"id":2502,"implemented":true,"kind":"function","modifiers":[],"name":"toInt40","nameLocation":"32191:7:4","nodeType":"FunctionDefinition","parameters":{"id":2483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2482,"mutability":"mutable","name":"value","nameLocation":"32206:5:4","nodeType":"VariableDeclaration","scope":2502,"src":"32199:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2481,"name":"int256","nodeType":"ElementaryTypeName","src":"32199:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32198:14:4"},"returnParameters":{"id":2486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2485,"mutability":"mutable","name":"downcasted","nameLocation":"32242:10:4","nodeType":"VariableDeclaration","scope":2502,"src":"32236:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"},"typeName":{"id":2484,"name":"int40","nodeType":"ElementaryTypeName","src":"32236:5:4","typeDescriptions":{"typeIdentifier":"t_int40","typeString":"int40"}},"visibility":"internal"}],"src":"32235:18:4"},"scope":2623,"src":"32182:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2524,"nodeType":"Block","src":"32804:122:4","statements":[{"expression":{"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2510,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"32814:10:4","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"32833:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32827:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int32_$","typeString":"type(int32)"},"typeName":{"id":2511,"name":"int32","nodeType":"ElementaryTypeName","src":"32827:5:4","typeDescriptions":{}}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32827:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"src":"32814:25:4","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"id":2516,"nodeType":"ExpressionStatement","src":"32814:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2518,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"32857:10:4","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"32871:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"32857:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2033322062697473","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"32878:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""},"value":"SafeCast: value doesn't fit in 32 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19","typeString":"literal_string \"SafeCast: value doesn't fit in 32 bits\""}],"id":2517,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"32849:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32849:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2523,"nodeType":"ExpressionStatement","src":"32849:70:4"}]},"documentation":{"id":2503,"nodeType":"StructuredDocumentation","src":"32382:345:4","text":" @dev Returns the downcasted int32 from int256, reverting on\n overflow (when the input is less than smallest int32 or\n greater than largest int32).\n Counterpart to Solidity's `int32` operator.\n Requirements:\n - input must fit into 32 bits\n _Available since v3.1._"},"id":2525,"implemented":true,"kind":"function","modifiers":[],"name":"toInt32","nameLocation":"32741:7:4","nodeType":"FunctionDefinition","parameters":{"id":2506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2505,"mutability":"mutable","name":"value","nameLocation":"32756:5:4","nodeType":"VariableDeclaration","scope":2525,"src":"32749:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2504,"name":"int256","nodeType":"ElementaryTypeName","src":"32749:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"32748:14:4"},"returnParameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"downcasted","nameLocation":"32792:10:4","nodeType":"VariableDeclaration","scope":2525,"src":"32786:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"},"typeName":{"id":2507,"name":"int32","nodeType":"ElementaryTypeName","src":"32786:5:4","typeDescriptions":{"typeIdentifier":"t_int32","typeString":"int32"}},"visibility":"internal"}],"src":"32785:18:4"},"scope":2623,"src":"32732:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2547,"nodeType":"Block","src":"33354:122:4","statements":[{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2533,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"33364:10:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"33383:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33377:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int24_$","typeString":"type(int24)"},"typeName":{"id":2534,"name":"int24","nodeType":"ElementaryTypeName","src":"33377:5:4","typeDescriptions":{}}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33377:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"src":"33364:25:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"id":2539,"nodeType":"ExpressionStatement","src":"33364:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2541,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"33407:10:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2528,"src":"33421:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33407:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2032342062697473","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33428:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""},"value":"SafeCast: value doesn't fit in 24 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f68b65aaf4574c34e9b9d1442d19636c6608b8c4dbd9331c7245f7915c8b2f55","typeString":"literal_string \"SafeCast: value doesn't fit in 24 bits\""}],"id":2540,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"33399:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33399:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2546,"nodeType":"ExpressionStatement","src":"33399:70:4"}]},"documentation":{"id":2526,"nodeType":"StructuredDocumentation","src":"32932:345:4","text":" @dev Returns the downcasted int24 from int256, reverting on\n overflow (when the input is less than smallest int24 or\n greater than largest int24).\n Counterpart to Solidity's `int24` operator.\n Requirements:\n - input must fit into 24 bits\n _Available since v4.7._"},"id":2548,"implemented":true,"kind":"function","modifiers":[],"name":"toInt24","nameLocation":"33291:7:4","nodeType":"FunctionDefinition","parameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2528,"mutability":"mutable","name":"value","nameLocation":"33306:5:4","nodeType":"VariableDeclaration","scope":2548,"src":"33299:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2527,"name":"int256","nodeType":"ElementaryTypeName","src":"33299:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33298:14:4"},"returnParameters":{"id":2532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"downcasted","nameLocation":"33342:10:4","nodeType":"VariableDeclaration","scope":2548,"src":"33336:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"},"typeName":{"id":2530,"name":"int24","nodeType":"ElementaryTypeName","src":"33336:5:4","typeDescriptions":{"typeIdentifier":"t_int24","typeString":"int24"}},"visibility":"internal"}],"src":"33335:18:4"},"scope":2623,"src":"33282:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2570,"nodeType":"Block","src":"33904:122:4","statements":[{"expression":{"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2556,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"33914:10:4","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2559,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"33933:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2558,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33927:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int16_$","typeString":"type(int16)"},"typeName":{"id":2557,"name":"int16","nodeType":"ElementaryTypeName","src":"33927:5:4","typeDescriptions":{}}},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33927:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"src":"33914:25:4","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"id":2562,"nodeType":"ExpressionStatement","src":"33914:25:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2564,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"33957:10:4","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2565,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"33971:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"33957:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e2031362062697473","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"33978:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""},"value":"SafeCast: value doesn't fit in 16 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_13d3a66f9e0e5c92bbe7743bcd3bdb4695009d5f3a96e5ff49718d715b484033","typeString":"literal_string \"SafeCast: value doesn't fit in 16 bits\""}],"id":2563,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"33949:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33949:70:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2569,"nodeType":"ExpressionStatement","src":"33949:70:4"}]},"documentation":{"id":2549,"nodeType":"StructuredDocumentation","src":"33482:345:4","text":" @dev Returns the downcasted int16 from int256, reverting on\n overflow (when the input is less than smallest int16 or\n greater than largest int16).\n Counterpart to Solidity's `int16` operator.\n Requirements:\n - input must fit into 16 bits\n _Available since v3.1._"},"id":2571,"implemented":true,"kind":"function","modifiers":[],"name":"toInt16","nameLocation":"33841:7:4","nodeType":"FunctionDefinition","parameters":{"id":2552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2551,"mutability":"mutable","name":"value","nameLocation":"33856:5:4","nodeType":"VariableDeclaration","scope":2571,"src":"33849:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2550,"name":"int256","nodeType":"ElementaryTypeName","src":"33849:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"33848:14:4"},"returnParameters":{"id":2555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"downcasted","nameLocation":"33892:10:4","nodeType":"VariableDeclaration","scope":2571,"src":"33886:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"},"typeName":{"id":2553,"name":"int16","nodeType":"ElementaryTypeName","src":"33886:5:4","typeDescriptions":{"typeIdentifier":"t_int16","typeString":"int16"}},"visibility":"internal"}],"src":"33885:18:4"},"scope":2623,"src":"33832:194:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2593,"nodeType":"Block","src":"34447:120:4","statements":[{"expression":{"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2579,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"34457:10:4","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"34475:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34470:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int8_$","typeString":"type(int8)"},"typeName":{"id":2580,"name":"int8","nodeType":"ElementaryTypeName","src":"34470:4:4","typeDescriptions":{}}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34470:11:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"src":"34457:24:4","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"id":2585,"nodeType":"ExpressionStatement","src":"34457:24:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2587,"name":"downcasted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"34499:10:4","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2588,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"34513:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"34499:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20382062697473","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34520:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""},"value":"SafeCast: value doesn't fit in 8 bits"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2610961ba53259047cd57c60366c5ad0b8aabf5eb4132487619b736715a740d1","typeString":"literal_string \"SafeCast: value doesn't fit in 8 bits\""}],"id":2586,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34491:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34491:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2592,"nodeType":"ExpressionStatement","src":"34491:69:4"}]},"documentation":{"id":2572,"nodeType":"StructuredDocumentation","src":"34032:340:4","text":" @dev Returns the downcasted int8 from int256, reverting on\n overflow (when the input is less than smallest int8 or\n greater than largest int8).\n Counterpart to Solidity's `int8` operator.\n Requirements:\n - input must fit into 8 bits\n _Available since v3.1._"},"id":2594,"implemented":true,"kind":"function","modifiers":[],"name":"toInt8","nameLocation":"34386:6:4","nodeType":"FunctionDefinition","parameters":{"id":2575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"value","nameLocation":"34400:5:4","nodeType":"VariableDeclaration","scope":2594,"src":"34393:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2573,"name":"int256","nodeType":"ElementaryTypeName","src":"34393:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34392:14:4"},"returnParameters":{"id":2578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2577,"mutability":"mutable","name":"downcasted","nameLocation":"34435:10:4","nodeType":"VariableDeclaration","scope":2594,"src":"34430:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"},"typeName":{"id":2576,"name":"int8","nodeType":"ElementaryTypeName","src":"34430:4:4","typeDescriptions":{"typeIdentifier":"t_int8","typeString":"int8"}},"visibility":"internal"}],"src":"34429:17:4"},"scope":2623,"src":"34377:190:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2621,"nodeType":"Block","src":"34845:233:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2603,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"34962:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"arguments":[{"expression":{"arguments":[{"id":2608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34984:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2607,"name":"int256","nodeType":"ElementaryTypeName","src":"34984:6:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"}],"id":2606,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"34979:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34979:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_int256","typeString":"type(int256)"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"34979:16:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34971:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2604,"name":"uint256","nodeType":"ElementaryTypeName","src":"34971:7:4","typeDescriptions":{}}},"id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34971:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34962:34:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e74323536","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"34998:42:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_d70dcf21692b3c91b4c5fbb89ed57f464aa42efbe5b0ea96c4acb7c080144227","typeString":"literal_string \"SafeCast: value doesn't fit in an int256\""},"value":"SafeCast: value doesn't fit in an int256"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d70dcf21692b3c91b4c5fbb89ed57f464aa42efbe5b0ea96c4acb7c080144227","typeString":"literal_string \"SafeCast: value doesn't fit in an int256\""}],"id":2602,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"34954:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34954:87:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2615,"nodeType":"ExpressionStatement","src":"34954:87:4"},{"expression":{"arguments":[{"id":2618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"35065:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35058:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2616,"name":"int256","nodeType":"ElementaryTypeName","src":"35058:6:4","typeDescriptions":{}}},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35058:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2601,"id":2620,"nodeType":"Return","src":"35051:20:4"}]},"documentation":{"id":2595,"nodeType":"StructuredDocumentation","src":"34573:203:4","text":" @dev Converts an unsigned uint256 into a signed int256.\n Requirements:\n - input must be less than or equal to maxInt256.\n _Available since v3.0._"},"id":2622,"implemented":true,"kind":"function","modifiers":[],"name":"toInt256","nameLocation":"34790:8:4","nodeType":"FunctionDefinition","parameters":{"id":2598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2597,"mutability":"mutable","name":"value","nameLocation":"34807:5:4","nodeType":"VariableDeclaration","scope":2622,"src":"34799:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2596,"name":"uint256","nodeType":"ElementaryTypeName","src":"34799:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"34798:15:4"},"returnParameters":{"id":2601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2622,"src":"34837:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2599,"name":"int256","nodeType":"ElementaryTypeName","src":"34837:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"34836:8:4"},"scope":2623,"src":"34781:297:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2624,"src":"927:34153:4","usedErrors":[]}],"src":"192:34889:4"},"id":4},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[2935]},"id":2936,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2625,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"285:196:5","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":2935,"linearizedBaseContracts":[2935],"name":"SafeMath","nameLocation":"490:8:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":2657,"nodeType":"Block","src":"717:140:5","statements":[{"id":2656,"nodeType":"UncheckedBlock","src":"727:124:5","statements":[{"assignments":[2639],"declarations":[{"constant":false,"id":2639,"mutability":"mutable","name":"c","nameLocation":"759:1:5","nodeType":"VariableDeclaration","scope":2656,"src":"751:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2643,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2640,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"763:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2641,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"767:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2644,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"786:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2645,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"790:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2651,"nodeType":"IfStatement","src":"782:28:5","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2649,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2637,"id":2650,"nodeType":"Return","src":"793:17:5"}},{"expression":{"components":[{"hexValue":"74727565","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2653,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"838:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2654,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2637,"id":2655,"nodeType":"Return","src":"824:16:5"}]}]},"documentation":{"id":2627,"nodeType":"StructuredDocumentation","src":"505:131:5","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2658,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:5","nodeType":"FunctionDefinition","parameters":{"id":2632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"a","nameLocation":"665:1:5","nodeType":"VariableDeclaration","scope":2658,"src":"657:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2628,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2631,"mutability":"mutable","name":"b","nameLocation":"676:1:5","nodeType":"VariableDeclaration","scope":2658,"src":"668:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2630,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:5"},"returnParameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2658,"src":"702:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2633,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2658,"src":"708:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2635,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:5"},"scope":2935,"src":"641:216:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2685,"nodeType":"Block","src":"1078:113:5","statements":[{"id":2684,"nodeType":"UncheckedBlock","src":"1088:97:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2670,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"1116:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2671,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"1120:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2677,"nodeType":"IfStatement","src":"1112:28:5","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2675,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2669,"id":2676,"nodeType":"Return","src":"1123:17:5"}},{"expression":{"components":[{"hexValue":"74727565","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2679,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"1168:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2680,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"1172:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2682,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2669,"id":2683,"nodeType":"Return","src":"1154:20:5"}]}]},"documentation":{"id":2659,"nodeType":"StructuredDocumentation","src":"863:134:5","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2686,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:5","nodeType":"FunctionDefinition","parameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2661,"mutability":"mutable","name":"a","nameLocation":"1026:1:5","nodeType":"VariableDeclaration","scope":2686,"src":"1018:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2660,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"b","nameLocation":"1037:1:5","nodeType":"VariableDeclaration","scope":2686,"src":"1029:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2662,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:5"},"returnParameters":{"id":2669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2666,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2686,"src":"1063:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2665,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2686,"src":"1069:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2667,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:5"},"scope":2935,"src":"1002:189:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2727,"nodeType":"Block","src":"1415:417:5","statements":[{"id":2726,"nodeType":"UncheckedBlock","src":"1425:401:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2698,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1683:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2705,"nodeType":"IfStatement","src":"1679:28:5","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":2701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":2702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2703,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2697,"id":2704,"nodeType":"Return","src":"1691:16:5"}},{"assignments":[2707],"declarations":[{"constant":false,"id":2707,"mutability":"mutable","name":"c","nameLocation":"1729:1:5","nodeType":"VariableDeclaration","scope":2726,"src":"1721:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2706,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2711,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2708,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1733:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2709,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"1737:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2712,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1756:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2713,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"1760:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2715,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"1765:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2721,"nodeType":"IfStatement","src":"1752:33:5","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2719,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2697,"id":2720,"nodeType":"Return","src":"1768:17:5"}},{"expression":{"components":[{"hexValue":"74727565","id":2722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":2723,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1813:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2724,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2697,"id":2725,"nodeType":"Return","src":"1799:16:5"}]}]},"documentation":{"id":2687,"nodeType":"StructuredDocumentation","src":"1197:137:5","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":2728,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:5","nodeType":"FunctionDefinition","parameters":{"id":2692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2689,"mutability":"mutable","name":"a","nameLocation":"1363:1:5","nodeType":"VariableDeclaration","scope":2728,"src":"1355:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2691,"mutability":"mutable","name":"b","nameLocation":"1374:1:5","nodeType":"VariableDeclaration","scope":2728,"src":"1366:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:5"},"returnParameters":{"id":2697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2728,"src":"1400:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2693,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2728,"src":"1406:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:5"},"scope":2935,"src":"1339:493:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2755,"nodeType":"Block","src":"2057:114:5","statements":[{"id":2754,"nodeType":"UncheckedBlock","src":"2067:98:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2740,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"2095:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2747,"nodeType":"IfStatement","src":"2091:29:5","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2745,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2739,"id":2746,"nodeType":"Return","src":"2103:17:5"}},{"expression":{"components":[{"hexValue":"74727565","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2749,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"2148:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2750,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"2152:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2752,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2739,"id":2753,"nodeType":"Return","src":"2134:20:5"}]}]},"documentation":{"id":2729,"nodeType":"StructuredDocumentation","src":"1838:138:5","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":2756,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:5","nodeType":"FunctionDefinition","parameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"a","nameLocation":"2005:1:5","nodeType":"VariableDeclaration","scope":2756,"src":"1997:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2730,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"b","nameLocation":"2016:1:5","nodeType":"VariableDeclaration","scope":2756,"src":"2008:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:5"},"returnParameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2756,"src":"2042:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2735,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2756,"src":"2048:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2737,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:5"},"scope":2935,"src":"1981:190:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2783,"nodeType":"Block","src":"2406:114:5","statements":[{"id":2782,"nodeType":"UncheckedBlock","src":"2416:98:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2768,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2444:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2775,"nodeType":"IfStatement","src":"2440:29:5","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":2771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2773,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":2767,"id":2774,"nodeType":"Return","src":"2452:17:5"}},{"expression":{"components":[{"hexValue":"74727565","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2777,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"2497:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2778,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2501:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2780,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:5","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":2767,"id":2781,"nodeType":"Return","src":"2483:20:5"}]}]},"documentation":{"id":2757,"nodeType":"StructuredDocumentation","src":"2177:148:5","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":2784,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:5","nodeType":"FunctionDefinition","parameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2759,"mutability":"mutable","name":"a","nameLocation":"2354:1:5","nodeType":"VariableDeclaration","scope":2784,"src":"2346:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2758,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2761,"mutability":"mutable","name":"b","nameLocation":"2365:1:5","nodeType":"VariableDeclaration","scope":2784,"src":"2357:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2760,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:5"},"returnParameters":{"id":2767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2784,"src":"2391:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2763,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2766,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2784,"src":"2397:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:5"},"scope":2935,"src":"2330:190:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2798,"nodeType":"Block","src":"2822:29:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2794,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"2839:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2795,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"2843:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2793,"id":2797,"nodeType":"Return","src":"2832:12:5"}]},"documentation":{"id":2785,"nodeType":"StructuredDocumentation","src":"2526:224:5","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":2799,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:5","nodeType":"FunctionDefinition","parameters":{"id":2790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2787,"mutability":"mutable","name":"a","nameLocation":"2776:1:5","nodeType":"VariableDeclaration","scope":2799,"src":"2768:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2786,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"b","nameLocation":"2787:1:5","nodeType":"VariableDeclaration","scope":2799,"src":"2779:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:5"},"returnParameters":{"id":2793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2799,"src":"2813:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2791,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:5"},"scope":2935,"src":"2755:96:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2813,"nodeType":"Block","src":"3189:29:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2809,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"3206:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2810,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"3210:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2808,"id":2812,"nodeType":"Return","src":"3199:12:5"}]},"documentation":{"id":2800,"nodeType":"StructuredDocumentation","src":"2857:260:5","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":2814,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:5","nodeType":"FunctionDefinition","parameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2802,"mutability":"mutable","name":"a","nameLocation":"3143:1:5","nodeType":"VariableDeclaration","scope":2814,"src":"3135:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2801,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2804,"mutability":"mutable","name":"b","nameLocation":"3154:1:5","nodeType":"VariableDeclaration","scope":2814,"src":"3146:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:5"},"returnParameters":{"id":2808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2814,"src":"3180:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:5"},"scope":2935,"src":"3122:96:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2828,"nodeType":"Block","src":"3532:29:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2824,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2817,"src":"3549:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2825,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"3553:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2823,"id":2827,"nodeType":"Return","src":"3542:12:5"}]},"documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"3224:236:5","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":2829,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:5","nodeType":"FunctionDefinition","parameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2817,"mutability":"mutable","name":"a","nameLocation":"3486:1:5","nodeType":"VariableDeclaration","scope":2829,"src":"3478:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2816,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2819,"mutability":"mutable","name":"b","nameLocation":"3497:1:5","nodeType":"VariableDeclaration","scope":2829,"src":"3489:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2818,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:5"},"returnParameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2829,"src":"3523:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2821,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:5"},"scope":2935,"src":"3465:96:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2843,"nodeType":"Block","src":"3917:29:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2839,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2832,"src":"3934:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2840,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"3938:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2838,"id":2842,"nodeType":"Return","src":"3927:12:5"}]},"documentation":{"id":2830,"nodeType":"StructuredDocumentation","src":"3567:278:5","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":2844,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:5","nodeType":"FunctionDefinition","parameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"a","nameLocation":"3871:1:5","nodeType":"VariableDeclaration","scope":2844,"src":"3863:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2831,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2834,"mutability":"mutable","name":"b","nameLocation":"3882:1:5","nodeType":"VariableDeclaration","scope":2844,"src":"3874:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2833,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:5"},"returnParameters":{"id":2838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2844,"src":"3908:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2836,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:5"},"scope":2935,"src":"3850:96:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2858,"nodeType":"Block","src":"4466:29:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2854,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2847,"src":"4483:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2855,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"4487:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2853,"id":2857,"nodeType":"Return","src":"4476:12:5"}]},"documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"3952:442:5","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":2859,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:5","nodeType":"FunctionDefinition","parameters":{"id":2850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2847,"mutability":"mutable","name":"a","nameLocation":"4420:1:5","nodeType":"VariableDeclaration","scope":2859,"src":"4412:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2849,"mutability":"mutable","name":"b","nameLocation":"4431:1:5","nodeType":"VariableDeclaration","scope":2859,"src":"4423:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2848,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:5"},"returnParameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2859,"src":"4457:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2851,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:5"},"scope":2935,"src":"4399:96:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2883,"nodeType":"Block","src":"5054:106:5","statements":[{"id":2882,"nodeType":"UncheckedBlock","src":"5064:90:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2872,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"5096:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2873,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"5101:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5096:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2875,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2866,"src":"5104:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2871,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5088:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5088:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2877,"nodeType":"ExpressionStatement","src":"5088:29:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2878,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"5138:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2879,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"5142:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5138:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2870,"id":2881,"nodeType":"Return","src":"5131:12:5"}]}]},"documentation":{"id":2860,"nodeType":"StructuredDocumentation","src":"4501:453:5","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":2884,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:5","nodeType":"FunctionDefinition","parameters":{"id":2867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2862,"mutability":"mutable","name":"a","nameLocation":"4980:1:5","nodeType":"VariableDeclaration","scope":2884,"src":"4972:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2861,"name":"uint256","nodeType":"ElementaryTypeName","src":"4972:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2864,"mutability":"mutable","name":"b","nameLocation":"4991:1:5","nodeType":"VariableDeclaration","scope":2884,"src":"4983:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2863,"name":"uint256","nodeType":"ElementaryTypeName","src":"4983:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2866,"mutability":"mutable","name":"errorMessage","nameLocation":"5008:12:5","nodeType":"VariableDeclaration","scope":2884,"src":"4994:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2865,"name":"string","nodeType":"ElementaryTypeName","src":"4994:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:50:5"},"returnParameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2884,"src":"5045:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"5045:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5044:9:5"},"scope":2935,"src":"4959:201:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2908,"nodeType":"Block","src":"5739:105:5","statements":[{"id":2907,"nodeType":"UncheckedBlock","src":"5749:89:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2897,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"5781:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5785:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5781:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2900,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"5788:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2896,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5773:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5773:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2902,"nodeType":"ExpressionStatement","src":"5773:28:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"5822:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2904,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"5826:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5822:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2895,"id":2906,"nodeType":"Return","src":"5815:12:5"}]}]},"documentation":{"id":2885,"nodeType":"StructuredDocumentation","src":"5166:473:5","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":2909,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5653:3:5","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2887,"mutability":"mutable","name":"a","nameLocation":"5665:1:5","nodeType":"VariableDeclaration","scope":2909,"src":"5657:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2886,"name":"uint256","nodeType":"ElementaryTypeName","src":"5657:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2889,"mutability":"mutable","name":"b","nameLocation":"5676:1:5","nodeType":"VariableDeclaration","scope":2909,"src":"5668:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2888,"name":"uint256","nodeType":"ElementaryTypeName","src":"5668:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"errorMessage","nameLocation":"5693:12:5","nodeType":"VariableDeclaration","scope":2909,"src":"5679:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2890,"name":"string","nodeType":"ElementaryTypeName","src":"5679:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5656:50:5"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2909,"src":"5730:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"5730:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5729:9:5"},"scope":2935,"src":"5644:200:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2933,"nodeType":"Block","src":"6585:105:5","statements":[{"id":2932,"nodeType":"UncheckedBlock","src":"6595:89:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"6627:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6627:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2925,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"6634:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2921,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6619:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6619:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2927,"nodeType":"ExpressionStatement","src":"6619:28:5"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2928,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"6668:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2929,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"6672:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6668:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2920,"id":2931,"nodeType":"Return","src":"6661:12:5"}]}]},"documentation":{"id":2910,"nodeType":"StructuredDocumentation","src":"5850:635:5","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":2934,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6499:3:5","nodeType":"FunctionDefinition","parameters":{"id":2917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2912,"mutability":"mutable","name":"a","nameLocation":"6511:1:5","nodeType":"VariableDeclaration","scope":2934,"src":"6503:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"6503:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2914,"mutability":"mutable","name":"b","nameLocation":"6522:1:5","nodeType":"VariableDeclaration","scope":2934,"src":"6514:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"errorMessage","nameLocation":"6539:12:5","nodeType":"VariableDeclaration","scope":2934,"src":"6525:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2915,"name":"string","nodeType":"ElementaryTypeName","src":"6525:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6502:50:5"},"returnParameters":{"id":2920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2934,"src":"6576:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"6576:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6575:9:5"},"scope":2935,"src":"6490:200:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2936,"src":"482:6210:5","usedErrors":[]}],"src":"107:6586:5"},"id":5},"contracts/Libraries/LibCalculations.sol":{"ast":{"absolutePath":"contracts/Libraries/LibCalculations.sol","exportedSymbols":{"LibCalculations":[2997],"Math":[1082],"SafeCast":[2623],"SafeMath":[2935]},"id":2998,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2937,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"@openzeppelin/contracts/utils/math/SafeCast.sol","id":2939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2998,"sourceUnit":2624,"src":"57:73:6","symbolAliases":[{"foreign":{"id":2938,"name":"SafeCast","nodeType":"Identifier","overloadedDeclarations":[],"src":"65:8:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeCast.sol","file":"@openzeppelin/contracts/utils/math/SafeCast.sol","id":2940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2998,"sourceUnit":2624,"src":"131:57:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":2941,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2998,"sourceUnit":2936,"src":"189:57:6","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"@openzeppelin/contracts/utils/math/Math.sol","id":2942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2998,"sourceUnit":1083,"src":"247:53:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"LibCalculations","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2997,"linearizedBaseContracts":[2997],"name":"LibCalculations","nameLocation":"310:15:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":2956,"nodeType":"Block","src":"405:44:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313030","id":2949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:3:6","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"429:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2951,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"433:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"429:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2953,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"428:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"422:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2948,"id":2955,"nodeType":"Return","src":"415:27:6"}]},"id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"percentFactor","nameLocation":"341:13:6","nodeType":"FunctionDefinition","parameters":{"id":2945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2944,"mutability":"mutable","name":"decimals","nameLocation":"363:8:6","nodeType":"VariableDeclaration","scope":2957,"src":"355:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2943,"name":"uint256","nodeType":"ElementaryTypeName","src":"355:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"354:18:6"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2947,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2957,"src":"396:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2946,"name":"uint256","nodeType":"ElementaryTypeName","src":"396:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"395:9:6"},"scope":2997,"src":"332:117:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2973,"nodeType":"Block","src":"759:52:6","statements":[{"expression":{"arguments":[{"id":2968,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"784:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2969,"name":"percentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"790:10:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"hexValue":"32","id":2970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"802:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"id":2967,"name":"percent","nodeType":"Identifier","overloadedDeclarations":[2974,2996],"referencedDeclaration":2996,"src":"776:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"776:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2966,"id":2972,"nodeType":"Return","src":"769:35:6"}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"455:191:6","text":" Returns a percentage value of a number.\nself The number to get a percentage of.\npercentage The percentage value to calculate with 2 decimal places (10000 = 100%)."},"functionSelector":"3fb34003","id":2974,"implemented":true,"kind":"function","modifiers":[],"name":"percent","nameLocation":"660:7:6","nodeType":"FunctionDefinition","parameters":{"id":2963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"self","nameLocation":"676:4:6","nodeType":"VariableDeclaration","scope":2974,"src":"668:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2962,"mutability":"mutable","name":"percentage","nameLocation":"689:10:6","nodeType":"VariableDeclaration","scope":2974,"src":"682:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2961,"name":"uint16","nodeType":"ElementaryTypeName","src":"682:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"src":"667:33:6"},"returnParameters":{"id":2966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2974,"src":"746:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2964,"name":"uint256","nodeType":"ElementaryTypeName","src":"746:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"745:9:6"},"scope":2997,"src":"651:160:6","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":2995,"nodeType":"Block","src":"1177:69:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2986,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"1195:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2987,"name":"percentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"1202:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1195:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2989,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1194:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[{"id":2991,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"1230:8:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2990,"name":"percentFactor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"1216:13:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1216:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1194:45:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2985,"id":2994,"nodeType":"Return","src":"1187:52:6"}]},"documentation":{"id":2975,"nodeType":"StructuredDocumentation","src":"817:224:6","text":" Returns a percentage value of a number.\nself The number to get a percentage of.\npercentage The percentage value to calculate with.\ndecimals The number of decimals the percentage value is in."},"id":2996,"implemented":true,"kind":"function","modifiers":[],"name":"percent","nameLocation":"1055:7:6","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2977,"mutability":"mutable","name":"self","nameLocation":"1080:4:6","nodeType":"VariableDeclaration","scope":2996,"src":"1072:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2976,"name":"uint256","nodeType":"ElementaryTypeName","src":"1072:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2979,"mutability":"mutable","name":"percentage","nameLocation":"1102:10:6","nodeType":"VariableDeclaration","scope":2996,"src":"1094:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2978,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2981,"mutability":"mutable","name":"decimals","nameLocation":"1130:8:6","nodeType":"VariableDeclaration","scope":2996,"src":"1122:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2980,"name":"uint256","nodeType":"ElementaryTypeName","src":"1122:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:82:6"},"returnParameters":{"id":2985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2996,"src":"1168:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1168:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1167:9:6"},"scope":2997,"src":"1046:200:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2998,"src":"302:947:6","usedErrors":[]}],"src":"32:1217:6"},"id":6},"contracts/insuranceRegistery.sol":{"ast":{"absolutePath":"contracts/insuranceRegistery.sol","exportedSymbols":{"Counters":[216],"IERC20":[142],"LibCalculations":[2997],"Math":[1082],"ReentrancyGuard":[64],"SafeCast":[2623],"SafeMath":[2935],"insuranceRegistery":[3299]},"id":3300,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2999,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3000,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":143,"src":"57:56:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":3001,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":65,"src":"114:62:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":3002,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":217,"src":"177:52:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/Libraries/LibCalculations.sol","file":"./Libraries/LibCalculations.sol","id":3003,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3300,"sourceUnit":2998,"src":"231:41:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3004,"name":"ReentrancyGuard","nodeType":"IdentifierPath","referencedDeclaration":64,"src":"305:15:7"},"id":3005,"nodeType":"InheritanceSpecifier","src":"305:15:7"}],"canonicalName":"insuranceRegistery","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3299,"linearizedBaseContracts":[3299,64],"name":"insuranceRegistery","nameLocation":"283:18:7","nodeType":"ContractDefinition","nodes":[{"id":3009,"libraryName":{"id":3006,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":216,"src":"333:8:7"},"nodeType":"UsingForDirective","src":"327:36:7","typeName":{"id":3008,"nodeType":"UserDefinedTypeName","pathNode":{"id":3007,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":148,"src":"346:16:7"},"referencedDeclaration":148,"src":"346:16:7","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$148_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"functionSelector":"ccf46d34","id":3011,"mutability":"mutable","name":"InsuranceId","nameLocation":"383:11:7","nodeType":"VariableDeclaration","scope":3299,"src":"368:26:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3010,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"canonicalName":"insuranceRegistery.insuranceData","id":3034,"members":[{"constant":false,"id":3013,"mutability":"mutable","name":"userWalletAddress","nameLocation":"440:17:7","nodeType":"VariableDeclaration","scope":3034,"src":"432:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3012,"name":"address","nodeType":"ElementaryTypeName","src":"432:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3015,"mutability":"mutable","name":"startDate","nameLocation":"475:9:7","nodeType":"VariableDeclaration","scope":3034,"src":"467:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3014,"name":"uint256","nodeType":"ElementaryTypeName","src":"467:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3017,"mutability":"mutable","name":"maturityDate","nameLocation":"502:12:7","nodeType":"VariableDeclaration","scope":3034,"src":"494:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3016,"name":"uint256","nodeType":"ElementaryTypeName","src":"494:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3019,"mutability":"mutable","name":"periodTime","nameLocation":"532:10:7","nodeType":"VariableDeclaration","scope":3034,"src":"524:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3018,"name":"uint256","nodeType":"ElementaryTypeName","src":"524:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3021,"mutability":"mutable","name":"areaOfLand","nameLocation":"560:10:7","nodeType":"VariableDeclaration","scope":3034,"src":"552:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3020,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3023,"mutability":"mutable","name":"seedsData","nameLocation":"587:9:7","nodeType":"VariableDeclaration","scope":3034,"src":"580:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3022,"name":"string","nodeType":"ElementaryTypeName","src":"580:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3025,"mutability":"mutable","name":"seedQuantity","nameLocation":"614:12:7","nodeType":"VariableDeclaration","scope":3034,"src":"606:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3024,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3027,"mutability":"mutable","name":"image","nameLocation":"643:5:7","nodeType":"VariableDeclaration","scope":3034,"src":"636:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3026,"name":"string","nodeType":"ElementaryTypeName","src":"636:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3029,"mutability":"mutable","name":"yourAddress","nameLocation":"665:11:7","nodeType":"VariableDeclaration","scope":3034,"src":"658:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3028,"name":"string","nodeType":"ElementaryTypeName","src":"658:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3031,"mutability":"mutable","name":"Amount","nameLocation":"694:6:7","nodeType":"VariableDeclaration","scope":3034,"src":"686:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3030,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3033,"mutability":"mutable","name":"percent","nameLocation":"717:7:7","nodeType":"VariableDeclaration","scope":3034,"src":"710:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":3032,"name":"uint16","nodeType":"ElementaryTypeName","src":"710:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"name":"insuranceData","nameLocation":"408:13:7","nodeType":"StructDefinition","scope":3299,"src":"401:330:7","visibility":"public"},{"constant":false,"functionSelector":"b52078d7","id":3039,"mutability":"mutable","name":"insuranceDetails","nameLocation":"814:16:7","nodeType":"VariableDeclaration","scope":3299,"src":"773:57:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_insuranceData_$3034_storage_$","typeString":"mapping(uint256 => struct insuranceRegistery.insuranceData)"},"typeName":{"id":3038,"keyType":{"id":3035,"name":"uint256","nodeType":"ElementaryTypeName","src":"781:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"773:33:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_insuranceData_$3034_storage_$","typeString":"mapping(uint256 => struct insuranceRegistery.insuranceData)"},"valueType":{"id":3037,"nodeType":"UserDefinedTypeName","pathNode":{"id":3036,"name":"insuranceData","nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"792:13:7"},"referencedDeclaration":3034,"src":"792:13:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage_ptr","typeString":"struct insuranceRegistery.insuranceData"}}},"visibility":"public"},{"constant":false,"functionSelector":"69cf8ad7","id":3043,"mutability":"mutable","name":"paidInstallments","nameLocation":"904:16:7","nodeType":"VariableDeclaration","scope":3299,"src":"871:49:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint8_$","typeString":"mapping(uint256 => uint8)"},"typeName":{"id":3042,"keyType":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"879:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"871:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint8_$","typeString":"mapping(uint256 => uint8)"},"valueType":{"id":3041,"name":"uint8","nodeType":"ElementaryTypeName","src":"890:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}},"visibility":"public"},{"constant":false,"functionSelector":"487e4661","id":3047,"mutability":"mutable","name":"lastInstallmentPaidTimestump","nameLocation":"1000:28:7","nodeType":"VariableDeclaration","scope":3299,"src":"965:63:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":3046,"keyType":{"id":3044,"name":"uint256","nodeType":"ElementaryTypeName","src":"973:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"965:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"984:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"f36eeebb","id":3052,"mutability":"mutable","name":"userInsurances","nameLocation":"1107:14:7","nodeType":"VariableDeclaration","scope":3299,"src":"1070:51:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"typeName":{"id":3051,"keyType":{"id":3048,"name":"address","nodeType":"ElementaryTypeName","src":"1078:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1070:29:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[])"},"valueType":{"baseType":{"id":3049,"name":"uint256","nodeType":"ElementaryTypeName","src":"1089:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3050,"nodeType":"ArrayTypeName","src":"1089:9:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"visibility":"public"},{"anonymous":false,"id":3058,"name":"insuranceRegistered","nameLocation":"1134:19:7","nodeType":"EventDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3054,"indexed":false,"mutability":"mutable","name":"InsuranceId","nameLocation":"1162:11:7","nodeType":"VariableDeclaration","scope":3058,"src":"1154:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"1154:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3056,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1183:6:7","nodeType":"VariableDeclaration","scope":3058,"src":"1175:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1153:37:7"},"src":"1128:63:7"},{"anonymous":false,"id":3066,"name":"Claimed","nameLocation":"1203:7:7","nodeType":"EventDefinition","parameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"indexed":false,"mutability":"mutable","name":"InsuranceId","nameLocation":"1219:11:7","nodeType":"VariableDeclaration","scope":3066,"src":"1211:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3059,"name":"uint256","nodeType":"ElementaryTypeName","src":"1211:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3062,"indexed":false,"mutability":"mutable","name":"massage","nameLocation":"1239:7:7","nodeType":"VariableDeclaration","scope":3066,"src":"1232:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3061,"name":"string","nodeType":"ElementaryTypeName","src":"1232:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3064,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1256:6:7","nodeType":"VariableDeclaration","scope":3066,"src":"1248:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"1248:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:53:7"},"src":"1197:67:7"},{"body":{"id":3110,"nodeType":"Block","src":"1394:291:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3075,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1412:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1412:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1434:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1426:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3077,"name":"address","nodeType":"ElementaryTypeName","src":"1426:7:7","typeDescriptions":{}}},"id":3080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1426:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1412:24:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"46616b652041646472657373","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1438:14:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754","typeString":"literal_string \"Fake Address\""},"value":"Fake Address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754","typeString":"literal_string \"Fake Address\""}],"id":3074,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1404:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1404:49:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3084,"nodeType":"ExpressionStatement","src":"1404:49:7"},{"expression":{"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3085,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1464:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1479:13:7","subExpression":{"id":3086,"name":"InsuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"1481:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1464:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3089,"nodeType":"ExpressionStatement","src":"1464:28:7"},{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3090,"name":"insuranceDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"1503:16:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_insuranceData_$3034_storage_$","typeString":"mapping(uint256 => struct insuranceRegistery.insuranceData storage ref)"}},"id":3092,"indexExpression":{"id":3091,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1520:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1503:30:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage","typeString":"struct insuranceRegistery.insuranceData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3093,"name":"_insuranceData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"1536:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"src":"1503:47:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage","typeString":"struct insuranceRegistery.insuranceData storage ref"}},"id":3095,"nodeType":"ExpressionStatement","src":"1503:47:7"},{"expression":{"arguments":[{"id":3101,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1593:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":3096,"name":"userInsurances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"1561:14:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$","typeString":"mapping(address => uint256[] storage ref)"}},"id":3099,"indexExpression":{"expression":{"id":3097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1576:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1576:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1561:26:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"1561:31:7","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1561:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3103,"nodeType":"ExpressionStatement","src":"1561:45:7"},{"eventCall":{"arguments":[{"id":3105,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"1642:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3106,"name":"_insuranceData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"1656:14:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3107,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"Amount","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"1656:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3104,"name":"insuranceRegistered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"1622:19:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1622:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3109,"nodeType":"EmitStatement","src":"1617:61:7"}]},"functionSelector":"bae5b056","id":3111,"implemented":true,"kind":"function","modifiers":[],"name":"insuranceRegister","nameLocation":"1279:17:7","nodeType":"FunctionDefinition","parameters":{"id":3070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3069,"mutability":"mutable","name":"_insuranceData","nameLocation":"1318:14:7","nodeType":"VariableDeclaration","scope":3111,"src":"1297:35:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData"},"typeName":{"id":3068,"nodeType":"UserDefinedTypeName","pathNode":{"id":3067,"name":"insuranceData","nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"1297:13:7"},"referencedDeclaration":3034,"src":"1297:13:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage_ptr","typeString":"struct insuranceRegistery.insuranceData"}},"visibility":"internal"}],"src":"1296:37:7"},"returnParameters":{"id":3073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3072,"mutability":"mutable","name":"_insuranceId","nameLocation":"1376:12:7","nodeType":"VariableDeclaration","scope":3111,"src":"1368:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"1368:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1367:22:7"},"scope":3299,"src":"1270:415:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3187,"nodeType":"Block","src":"1801:792:7","statements":[{"assignments":[3122],"declarations":[{"constant":false,"id":3122,"mutability":"mutable","name":"details","nameLocation":"1832:7:7","nodeType":"VariableDeclaration","scope":3187,"src":"1811:28:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData"},"typeName":{"id":3121,"nodeType":"UserDefinedTypeName","pathNode":{"id":3120,"name":"insuranceData","nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"1811:13:7"},"referencedDeclaration":3034,"src":"1811:13:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage_ptr","typeString":"struct insuranceRegistery.insuranceData"}},"visibility":"internal"}],"id":3126,"initialValue":{"baseExpression":{"id":3123,"name":"insuranceDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"1842:16:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_insuranceData_$3034_storage_$","typeString":"mapping(uint256 => struct insuranceRegistery.insuranceData storage ref)"}},"id":3125,"indexExpression":{"id":3124,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"1859:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1842:30:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage","typeString":"struct insuranceRegistery.insuranceData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1811:61:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3128,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"1903:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"userWalletAddress","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"1903:25:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3130,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1932:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1932:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1903:39:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973206973206e6f7420796f757220496e737572616e6365","id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1956:28:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e","typeString":"literal_string \"This is not your Insurance\""},"value":"This is not your Insurance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e","typeString":"literal_string \"This is not your Insurance\""}],"id":3127,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1882:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1882:112:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3135,"nodeType":"ExpressionStatement","src":"1882:112:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3137,"name":"ERC20Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"2025:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2049:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2041:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3138,"name":"address","nodeType":"ElementaryTypeName","src":"2041:7:7","typeDescriptions":{}}},"id":3141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2041:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2025:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"796f752063616e277420646f20746869732077697468207a65726f2061646472657373","id":3143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2065:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90","typeString":"literal_string \"you can't do this with zero address\""},"value":"you can't do this with zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90","typeString":"literal_string \"you can't do this with zero address\""}],"id":3136,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2004:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2004:108:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3145,"nodeType":"ExpressionStatement","src":"2004:108:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3147,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"2144:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startDate","nodeType":"MemberAccess","referencedDeclaration":3015,"src":"2144:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3149,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"2164:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"maturityDate","nodeType":"MemberAccess","referencedDeclaration":3017,"src":"2164:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2144:40:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":3152,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2188:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2188:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2144:59:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"796f7572206d617475726974792044617465206973206f766572","id":3155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2217:28:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f","typeString":"literal_string \"your maturity Date is over\""},"value":"your maturity Date is over"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f","typeString":"literal_string \"your maturity Date is over\""}],"id":3146,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2123:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2123:132:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3157,"nodeType":"ExpressionStatement","src":"2123:132:7"},{"expression":{"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2266:32:7","subExpression":{"baseExpression":{"id":3158,"name":"paidInstallments","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"2266:16:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint8_$","typeString":"mapping(uint256 => uint8)"}},"id":3160,"indexExpression":{"id":3159,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"2283:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2266:30:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":3162,"nodeType":"ExpressionStatement","src":"2266:32:7"},{"expression":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3163,"name":"lastInstallmentPaidTimestump","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"2308:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3165,"indexExpression":{"id":3164,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"2337:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2308:42:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3166,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2353:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2353:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2308:60:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3169,"nodeType":"ExpressionStatement","src":"2308:60:7"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3175,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2451:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2451:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3179,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2487:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_insuranceRegistery_$3299","typeString":"contract insuranceRegistery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_insuranceRegistery_$3299","typeString":"contract insuranceRegistery"}],"id":3178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2479:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3177,"name":"address","nodeType":"ElementaryTypeName","src":"2479:7:7","typeDescriptions":{}}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2479:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3181,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"2510:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3182,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"Amount","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"2510:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3172,"name":"ERC20Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"2407:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3171,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2400:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$142_$","typeString":"type(contract IERC20)"}},"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2400:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$142","typeString":"contract IERC20"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":141,"src":"2400:33:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2400:138:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e61626c6520746f2074616e736665722046756e64","id":3184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2552:24:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba","typeString":"literal_string \"Unable to tansfer Fund\""},"value":"Unable to tansfer Fund"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba","typeString":"literal_string \"Unable to tansfer Fund\""}],"id":3170,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2379:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2379:207:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3186,"nodeType":"ExpressionStatement","src":"2379:207:7"}]},"functionSelector":"a86f678f","id":3188,"implemented":true,"kind":"function","modifiers":[{"id":3118,"kind":"modifierInvocation","modifierName":{"id":3117,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":29,"src":"1784:12:7"},"nodeType":"ModifierInvocation","src":"1784:12:7"}],"name":"payInstallment","nameLocation":"1700:14:7","nodeType":"FunctionDefinition","parameters":{"id":3116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3113,"mutability":"mutable","name":"ERC20Address","nameLocation":"1723:12:7","nodeType":"VariableDeclaration","scope":3188,"src":"1715:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3112,"name":"address","nodeType":"ElementaryTypeName","src":"1715:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3115,"mutability":"mutable","name":"_insuranceId","nameLocation":"1745:12:7","nodeType":"VariableDeclaration","scope":3188,"src":"1737:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3114,"name":"uint256","nodeType":"ElementaryTypeName","src":"1737:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1714:44:7"},"returnParameters":{"id":3119,"nodeType":"ParameterList","parameters":[],"src":"1801:0:7"},"scope":3299,"src":"1691:902:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3197,"nodeType":"Block","src":"2675:28:7","statements":[{"expression":{"hexValue":"74727565","id":3195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2692:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3194,"id":3196,"nodeType":"Return","src":"2685:11:7"}]},"functionSelector":"ed80db35","id":3198,"implemented":true,"kind":"function","modifiers":[],"name":"dataFromChainLink","nameLocation":"2608:17:7","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"date","nameLocation":"2640:4:7","nodeType":"VariableDeclaration","scope":3198,"src":"2626:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3189,"name":"string","nodeType":"ElementaryTypeName","src":"2626:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2625:20:7"},"returnParameters":{"id":3194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3198,"src":"2669:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3192,"name":"bool","nodeType":"ElementaryTypeName","src":"2669:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2668:6:7"},"scope":3299,"src":"2599:104:7","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":3297,"nodeType":"Block","src":"2893:1191:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3214,"name":"lastInstallmentPaidTimestump","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"2924:28:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3216,"indexExpression":{"id":3215,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"2953:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2924:42:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3217,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2969:5:7","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2969:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2924:60:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"596f752061726520636c61696d696e672061742077726f6e672074696d657374616d70","id":3220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2998:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49","typeString":"literal_string \"You are claiming at wrong timestamp\""},"value":"You are claiming at wrong timestamp"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49","typeString":"literal_string \"You are claiming at wrong timestamp\""}],"id":3213,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2903:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2903:142:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3222,"nodeType":"ExpressionStatement","src":"2903:142:7"},{"condition":{"id":3223,"name":"chainlink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"3166:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3295,"nodeType":"Block","src":"4011:67:7","statements":[{"eventCall":{"arguments":[{"id":3290,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"4038:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"756e73756363657373","id":3291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4052:11:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133","typeString":"literal_string \"unsuccess\""},"value":"unsuccess"},{"hexValue":"30","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4065:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133","typeString":"literal_string \"unsuccess\""},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3289,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"4030:7:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint256,string memory,uint256)"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3294,"nodeType":"EmitStatement","src":"4025:42:7"}]},"id":3296,"nodeType":"IfStatement","src":"3162:916:7","trueBody":{"id":3288,"nodeType":"Block","src":"3177:828:7","statements":[{"assignments":[3226],"declarations":[{"constant":false,"id":3226,"mutability":"mutable","name":"details","nameLocation":"3212:7:7","nodeType":"VariableDeclaration","scope":3288,"src":"3191:28:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData"},"typeName":{"id":3225,"nodeType":"UserDefinedTypeName","pathNode":{"id":3224,"name":"insuranceData","nodeType":"IdentifierPath","referencedDeclaration":3034,"src":"3191:13:7"},"referencedDeclaration":3034,"src":"3191:13:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage_ptr","typeString":"struct insuranceRegistery.insuranceData"}},"visibility":"internal"}],"id":3230,"initialValue":{"baseExpression":{"id":3227,"name":"insuranceDetails","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3039,"src":"3222:16:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_insuranceData_$3034_storage_$","typeString":"mapping(uint256 => struct insuranceRegistery.insuranceData storage ref)"}},"id":3229,"indexExpression":{"id":3228,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3239:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3222:30:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_storage","typeString":"struct insuranceRegistery.insuranceData storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3191:61:7"},{"assignments":[3232],"declarations":[{"constant":false,"id":3232,"mutability":"mutable","name":"percent","nameLocation":"3274:7:7","nodeType":"VariableDeclaration","scope":3288,"src":"3266:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3231,"name":"uint256","nodeType":"ElementaryTypeName","src":"3266:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3240,"initialValue":{"arguments":[{"expression":{"id":3235,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"3325:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3236,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"Amount","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"3325:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3237,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"3357:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3238,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"percent","nodeType":"MemberAccess","referencedDeclaration":3033,"src":"3357:15:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"}],"expression":{"id":3233,"name":"LibCalculations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"3284:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibCalculations_$2997_$","typeString":"type(library LibCalculations)"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"percent","nodeType":"MemberAccess","referencedDeclaration":2974,"src":"3284:23:7","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_pure$_t_uint256_$_t_uint16_$returns$_t_uint256_$","typeString":"function (uint256,uint16) pure returns (uint256)"}},"id":3239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3284:102:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3266:120:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3242,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"3425:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"userWalletAddress","nodeType":"MemberAccess","referencedDeclaration":3013,"src":"3425:25:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3244,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3454:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3454:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3425:39:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"54686973206973206e6f7420796f757220496e737572616e6365","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3482:28:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e","typeString":"literal_string \"This is not your Insurance\""},"value":"This is not your Insurance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e","typeString":"literal_string \"This is not your Insurance\""}],"id":3241,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3400:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3400:124:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3249,"nodeType":"ExpressionStatement","src":"3400:124:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3251,"name":"ERC20Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"3563:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3587:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3579:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3252,"name":"address","nodeType":"ElementaryTypeName","src":"3579:7:7","typeDescriptions":{}}},"id":3255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3579:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3563:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"796f752063616e277420646f20746869732077697468207a65726f2061646472657373","id":3257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3607:37:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90","typeString":"literal_string \"you can't do this with zero address\""},"value":"you can't do this with zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90","typeString":"literal_string \"you can't do this with zero address\""}],"id":3250,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3538:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3538:120:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3259,"nodeType":"ExpressionStatement","src":"3538:120:7"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3265,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3752:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3752:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3269,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3792:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_insuranceRegistery_$3299","typeString":"contract insuranceRegistery"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_insuranceRegistery_$3299","typeString":"contract insuranceRegistery"}],"id":3268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3784:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3267,"name":"address","nodeType":"ElementaryTypeName","src":"3784:7:7","typeDescriptions":{}}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3784:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3271,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"3819:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"Amount","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"3819:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3273,"name":"percent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"3836:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3819:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3262,"name":"ERC20Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"3704:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3261,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"3697:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$142_$","typeString":"type(contract IERC20)"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3697:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$142","typeString":"contract IERC20"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":141,"src":"3697:33:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3697:164:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e61626c6520746f2074616e736665722046756e64","id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3879:24:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba","typeString":"literal_string \"Unable to tansfer Fund\""},"value":"Unable to tansfer Fund"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba","typeString":"literal_string \"Unable to tansfer Fund\""}],"id":3260,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3672:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3672:245:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3278,"nodeType":"ExpressionStatement","src":"3672:245:7"},{"eventCall":{"arguments":[{"id":3280,"name":"_insuranceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3944:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"73756363657373","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3958:9:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38","typeString":"literal_string \"success\""},"value":"success"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3282,"name":"details","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3226,"src":"3969:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_insuranceData_$3034_memory_ptr","typeString":"struct insuranceRegistery.insuranceData memory"}},"id":3283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"Amount","nodeType":"MemberAccess","referencedDeclaration":3031,"src":"3969:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3284,"name":"percent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"3986:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3969:24:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38","typeString":"literal_string \"success\""},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3279,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"3936:7:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (uint256,string memory,uint256)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3936:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3287,"nodeType":"EmitStatement","src":"3931:63:7"}]}}]},"functionSelector":"5a514dd6","id":3298,"implemented":true,"kind":"function","modifiers":[{"id":3211,"kind":"modifierInvocation","modifierName":{"id":3210,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":29,"src":"2880:12:7"},"nodeType":"ModifierInvocation","src":"2880:12:7"}],"name":"claim","nameLocation":"2718:5:7","nodeType":"FunctionDefinition","parameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3200,"mutability":"mutable","name":"ERC20Address","nameLocation":"2741:12:7","nodeType":"VariableDeclaration","scope":3298,"src":"2733:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3199,"name":"address","nodeType":"ElementaryTypeName","src":"2733:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3202,"mutability":"mutable","name":"_insuranceId","nameLocation":"2771:12:7","nodeType":"VariableDeclaration","scope":3298,"src":"2763:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3201,"name":"uint256","nodeType":"ElementaryTypeName","src":"2763:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3204,"mutability":"mutable","name":"image","nameLocation":"2807:5:7","nodeType":"VariableDeclaration","scope":3298,"src":"2793:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3203,"name":"string","nodeType":"ElementaryTypeName","src":"2793:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3206,"mutability":"mutable","name":"date","nameLocation":"2836:4:7","nodeType":"VariableDeclaration","scope":3298,"src":"2822:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3205,"name":"string","nodeType":"ElementaryTypeName","src":"2822:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3208,"mutability":"mutable","name":"chainlink","nameLocation":"2855:9:7","nodeType":"VariableDeclaration","scope":3298,"src":"2850:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3207,"name":"bool","nodeType":"ElementaryTypeName","src":"2850:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2723:147:7"},"returnParameters":{"id":3212,"nodeType":"ParameterList","parameters":[],"src":"2893:0:7"},"scope":3299,"src":"2709:1375:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3300,"src":"274:3812:7","usedErrors":[]}],"src":"32:4055:7"},"id":7}},"contracts":{"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b1c31e7b962abcf83f83118011fe94b3f162b24dd0e3a485631d28652e7e89264736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x1C31E7B962ABCF83F8311801 0x1F 0xE9 0x4B EXTCODEHASH AND 0x2B 0x24 0xDD 0xE GASPRICE BASEFEE JUMP BALANCE 0xD2 DUP7 MSTORE 0xE7 0xE8 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"424:971:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b1c31e7b962abcf83f83118011fe94b3f162b24dd0e3a485631d28652e7e89264736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x1C31E7B962ABCF83F8311801 0x1F 0xE9 0x4B EXTCODEHASH AND 0x2B 0x24 0xDD 0xE GASPRICE BASEFEE JUMP BALANCE 0xD2 DUP7 MSTORE 0xE7 0xE8 SWAP3 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"424:971:2:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207270277252594001a6ca9dd5c1c2c4b745d6504f1bbe4946ca447068097a175f64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x70277252594001A6CA9DD5C1C2C4B745D6504F SHL 0xBE 0x49 CHAINID 0xCA DIFFICULTY PUSH17 0x68097A175F64736F6C6343000809003300 ","sourceMap":"202:12582:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207270277252594001a6ca9dd5c1c2c4b745d6504f1bbe4946ca447068097a175f64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x70277252594001A6CA9DD5C1C2C4B745D6504F SHL 0xBE 0x49 CHAINID 0xCA DIFFICULTY PUSH17 0x68097A175F64736F6C6343000809003300 ","sourceMap":"202:12582:3:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203824c6771dcaaef335540ac2c0c6b4aa31d189d069ae1f18c030e9afaee0d41c64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0x24 0xC6 PUSH24 0x1DCAAEF335540AC2C0C6B4AA31D189D069AE1F18C030E9AF 0xAE 0xE0 0xD4 SHR PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"927:34153:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203824c6771dcaaef335540ac2c0c6b4aa31d189d069ae1f18c030e9afaee0d41c64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0x24 0xC6 PUSH24 0x1DCAAEF335540AC2C0C6B4AA31D189D069AE1F18C030E9AF 0xAE 0xE0 0xD4 SHR PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"927:34153:4:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278\",\"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH\"]}},\"version\":1}"}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3cc8cc57624088f68f30e93549ea28a9ee587db7644bd800ac04807e651722e64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xCC DUP13 0xC5 PUSH23 0x24088F68F30E93549EA28A9EE587DB7644BD800AC04807 0xE6 MLOAD PUSH19 0x2E64736F6C6343000809003300000000000000 ","sourceMap":"482:6210:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3cc8cc57624088f68f30e93549ea28a9ee587db7644bd800ac04807e651722e64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xCC DUP13 0xC5 PUSH23 0x24088F68F30E93549EA28A9EE587DB7644BD800AC04807 0xE6 MLOAD PUSH19 0x2E64736F6C6343000809003300000000000000 ","sourceMap":"482:6210:5:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b\",\"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ\"]}},\"version\":1}"}},"contracts/Libraries/LibCalculations.sol":{"LibCalculations":{"abi":[{"inputs":[{"internalType":"uint256","name":"self","type":"uint256"},{"internalType":"uint16","name":"percentage","type":"uint16"}],"name":"percent","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"61044c610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80633fb340031461003a575b600080fd5b610054600480360381019061004f9190610145565b61006a565b6040516100619190610194565b60405180910390f35b600061007c838361ffff166002610084565b905092915050565b600061008f826100ae565b838561009b91906101de565b6100a59190610267565b90509392505050565b600081600a6100bd91906103cb565b60646100c991906101de565b9050919050565b600080fd5b6000819050919050565b6100e8816100d5565b81146100f357600080fd5b50565b600081359050610105816100df565b92915050565b600061ffff82169050919050565b6101228161010b565b811461012d57600080fd5b50565b60008135905061013f81610119565b92915050565b6000806040838503121561015c5761015b6100d0565b5b600061016a858286016100f6565b925050602061017b85828601610130565b9150509250929050565b61018e816100d5565b82525050565b60006020820190506101a96000830184610185565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101e9826100d5565b91506101f4836100d5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561022d5761022c6101af565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610272826100d5565b915061027d836100d5565b92508261028d5761028c610238565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b60018511156102ef578086048111156102cb576102ca6101af565b5b60018516156102da5780820291505b80810290506102e885610298565b94506102af565b94509492505050565b60008261030857600190506103c4565b8161031657600090506103c4565b816001811461032c576002811461033657610365565b60019150506103c4565b60ff841115610348576103476101af565b5b8360020a91508482111561035f5761035e6101af565b5b506103c4565b5060208310610133831016604e8410600b841016171561039a5782820a905083811115610395576103946101af565b5b6103c4565b6103a784848460016102a5565b925090508184048111156103be576103bd6101af565b5b81810290505b9392505050565b60006103d6826100d5565b91506103e1836100d5565b925061040e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846102f8565b90509291505056fea2646970667358221220807dfb6d5cede898ebb083cea90565b7dcd6e23c955ac4353630d7e086124cf564736f6c63430008090033","opcodes":"PUSH2 0x44C PUSH2 0x53 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x46 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3FB34003 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x7C DUP4 DUP4 PUSH2 0xFFFF AND PUSH1 0x2 PUSH2 0x84 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F DUP3 PUSH2 0xAE JUMP JUMPDEST DUP4 DUP6 PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x1DE JUMP JUMPDEST PUSH2 0xA5 SWAP2 SWAP1 PUSH2 0x267 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xA PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x64 PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x1DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE8 DUP2 PUSH2 0xD5 JUMP JUMPDEST DUP2 EQ PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x105 DUP2 PUSH2 0xDF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x122 DUP2 PUSH2 0x10B JUMP JUMPDEST DUP2 EQ PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13F DUP2 PUSH2 0x119 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15C JUMPI PUSH2 0x15B PUSH2 0xD0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16A DUP6 DUP3 DUP7 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17B DUP6 DUP3 DUP7 ADD PUSH2 0x130 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0xD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x185 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E9 DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F4 DUP4 PUSH2 0xD5 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0x1AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x272 DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x27D DUP4 PUSH2 0xD5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x28D JUMPI PUSH2 0x28C PUSH2 0x238 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x2EF JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x2CB JUMPI PUSH2 0x2CA PUSH2 0x1AF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x2DA JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x2E8 DUP6 PUSH2 0x298 JUMP JUMPDEST SWAP5 POP PUSH2 0x2AF JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x308 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x3C4 JUMP JUMPDEST DUP2 PUSH2 0x316 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3C4 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x32C JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x336 JUMPI PUSH2 0x365 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x348 JUMPI PUSH2 0x347 PUSH2 0x1AF JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x35F JUMPI PUSH2 0x35E PUSH2 0x1AF JUMP JUMPDEST JUMPDEST POP PUSH2 0x3C4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x39A JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x395 JUMPI PUSH2 0x394 PUSH2 0x1AF JUMP JUMPDEST JUMPDEST PUSH2 0x3C4 JUMP JUMPDEST PUSH2 0x3A7 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x2A5 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x3BE JUMPI PUSH2 0x3BD PUSH2 0x1AF JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E1 DUP4 PUSH2 0xD5 JUMP JUMPDEST SWAP3 POP PUSH2 0x40E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x2F8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 PUSH30 0xFB6D5CEDE898EBB083CEA90565B7DCD6E23C955AC4353630D7E086124CF5 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"302:947:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@percentFactor_2957":{"entryPoint":174,"id":2957,"parameterSlots":1,"returnSlots":1},"@percent_2974":{"entryPoint":106,"id":2974,"parameterSlots":2,"returnSlots":1},"@percent_2996":{"entryPoint":132,"id":2996,"parameterSlots":3,"returnSlots":1},"abi_decode_t_uint16":{"entryPoint":304,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":246,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint16":{"entryPoint":325,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_uint256_to_t_uint256_fromStack_library":{"entryPoint":389,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed":{"entryPoint":404,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":615,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":677,"id":null,"parameterSlots":4,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":971,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":760,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":478,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":267,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":213,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":431,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":568,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":208,"id":null,"parameterSlots":0,"returnSlots":0},"shift_right_1_unsigned":{"entryPoint":664,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint16":{"entryPoint":281,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":223,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5154:8","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:8","statements":[{"nodeType":"YulAssignment","src":"57:19:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:8","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:8"},"nodeType":"YulFunctionCall","src":"67:9:8"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:8"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:8","type":""}],"src":"7:75:8"},{"body":{"nodeType":"YulBlock","src":"177:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:8"},"nodeType":"YulFunctionCall","src":"187:12:8"},"nodeType":"YulExpressionStatement","src":"187:12:8"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:8"},{"body":{"nodeType":"YulBlock","src":"300:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:8"},"nodeType":"YulFunctionCall","src":"310:12:8"},"nodeType":"YulExpressionStatement","src":"310:12:8"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:8"},{"body":{"nodeType":"YulBlock","src":"379:32:8","statements":[{"nodeType":"YulAssignment","src":"389:16:8","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:8"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:8","type":""}],"src":"334:77:8"},{"body":{"nodeType":"YulBlock","src":"460:79:8","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:8"},"nodeType":"YulFunctionCall","src":"519:12:8"},"nodeType":"YulExpressionStatement","src":"519:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:8"},"nodeType":"YulFunctionCall","src":"490:24:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:8"},"nodeType":"YulFunctionCall","src":"480:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:8"},"nodeType":"YulFunctionCall","src":"473:43:8"},"nodeType":"YulIf","src":"470:63:8"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:8","type":""}],"src":"417:122:8"},{"body":{"nodeType":"YulBlock","src":"597:87:8","statements":[{"nodeType":"YulAssignment","src":"607:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:8"},"nodeType":"YulFunctionCall","src":"616:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:8"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:8"},"nodeType":"YulFunctionCall","src":"645:33:8"},"nodeType":"YulExpressionStatement","src":"645:33:8"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:8","type":""}],"src":"545:139:8"},{"body":{"nodeType":"YulBlock","src":"734:45:8","statements":[{"nodeType":"YulAssignment","src":"744:29:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"759:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"766:6:8","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"755:3:8"},"nodeType":"YulFunctionCall","src":"755:18:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"744:7:8"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"716:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"726:7:8","type":""}],"src":"690:89:8"},{"body":{"nodeType":"YulBlock","src":"827:78:8","statements":[{"body":{"nodeType":"YulBlock","src":"883:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"892:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"895:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"885:6:8"},"nodeType":"YulFunctionCall","src":"885:12:8"},"nodeType":"YulExpressionStatement","src":"885:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"850:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"874:5:8"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"857:16:8"},"nodeType":"YulFunctionCall","src":"857:23:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"847:2:8"},"nodeType":"YulFunctionCall","src":"847:34:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"840:6:8"},"nodeType":"YulFunctionCall","src":"840:42:8"},"nodeType":"YulIf","src":"837:62:8"}]},"name":"validator_revert_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"820:5:8","type":""}],"src":"785:120:8"},{"body":{"nodeType":"YulBlock","src":"962:86:8","statements":[{"nodeType":"YulAssignment","src":"972:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"994:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"981:12:8"},"nodeType":"YulFunctionCall","src":"981:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"972:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1036:5:8"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"1010:25:8"},"nodeType":"YulFunctionCall","src":"1010:32:8"},"nodeType":"YulExpressionStatement","src":"1010:32:8"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"940:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"948:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"956:5:8","type":""}],"src":"911:137:8"},{"body":{"nodeType":"YulBlock","src":"1136:390:8","statements":[{"body":{"nodeType":"YulBlock","src":"1182:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1184:77:8"},"nodeType":"YulFunctionCall","src":"1184:79:8"},"nodeType":"YulExpressionStatement","src":"1184:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1157:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"1166:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1153:3:8"},"nodeType":"YulFunctionCall","src":"1153:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"1178:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1149:3:8"},"nodeType":"YulFunctionCall","src":"1149:32:8"},"nodeType":"YulIf","src":"1146:119:8"},{"nodeType":"YulBlock","src":"1275:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1290:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"1304:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1294:6:8","type":""}]},{"nodeType":"YulAssignment","src":"1319:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1354:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"1365:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1350:3:8"},"nodeType":"YulFunctionCall","src":"1350:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1374:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1329:20:8"},"nodeType":"YulFunctionCall","src":"1329:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1319:6:8"}]}]},{"nodeType":"YulBlock","src":"1402:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1417:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"1431:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1421:6:8","type":""}]},{"nodeType":"YulAssignment","src":"1447:62:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1481:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"1492:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1477:3:8"},"nodeType":"YulFunctionCall","src":"1477:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1501:7:8"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"1457:19:8"},"nodeType":"YulFunctionCall","src":"1457:52:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1447:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1098:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1109:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1121:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1129:6:8","type":""}],"src":"1054:472:8"},{"body":{"nodeType":"YulBlock","src":"1605:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1622:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1645:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1627:17:8"},"nodeType":"YulFunctionCall","src":"1627:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1615:6:8"},"nodeType":"YulFunctionCall","src":"1615:37:8"},"nodeType":"YulExpressionStatement","src":"1615:37:8"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1593:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1600:3:8","type":""}],"src":"1532:126:8"},{"body":{"nodeType":"YulBlock","src":"1770:132:8","statements":[{"nodeType":"YulAssignment","src":"1780:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1792:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"1803:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1788:3:8"},"nodeType":"YulFunctionCall","src":"1788:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1780:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1868:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1881:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"1892:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1877:3:8"},"nodeType":"YulFunctionCall","src":"1877:17:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"1816:51:8"},"nodeType":"YulFunctionCall","src":"1816:79:8"},"nodeType":"YulExpressionStatement","src":"1816:79:8"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1742:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1754:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1765:4:8","type":""}],"src":"1664:238:8"},{"body":{"nodeType":"YulBlock","src":"1936:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1953:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1956:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1946:6:8"},"nodeType":"YulFunctionCall","src":"1946:88:8"},"nodeType":"YulExpressionStatement","src":"1946:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:8","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2043:6:8"},"nodeType":"YulFunctionCall","src":"2043:15:8"},"nodeType":"YulExpressionStatement","src":"2043:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2074:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2077:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2067:6:8"},"nodeType":"YulFunctionCall","src":"2067:15:8"},"nodeType":"YulExpressionStatement","src":"2067:15:8"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"1908:180:8"},{"body":{"nodeType":"YulBlock","src":"2142:300:8","statements":[{"nodeType":"YulAssignment","src":"2152:25:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2175:1:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2157:17:8"},"nodeType":"YulFunctionCall","src":"2157:20:8"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"2152:1:8"}]},{"nodeType":"YulAssignment","src":"2186:25:8","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2209:1:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2191:17:8"},"nodeType":"YulFunctionCall","src":"2191:20:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"2186:1:8"}]},{"body":{"nodeType":"YulBlock","src":"2384:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"2386:16:8"},"nodeType":"YulFunctionCall","src":"2386:18:8"},"nodeType":"YulExpressionStatement","src":"2386:18:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2296:1:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2289:6:8"},"nodeType":"YulFunctionCall","src":"2289:9:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2282:6:8"},"nodeType":"YulFunctionCall","src":"2282:17:8"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2304:1:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2311:66:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"2379:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2307:3:8"},"nodeType":"YulFunctionCall","src":"2307:74:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2301:2:8"},"nodeType":"YulFunctionCall","src":"2301:81:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2278:3:8"},"nodeType":"YulFunctionCall","src":"2278:105:8"},"nodeType":"YulIf","src":"2275:131:8"},{"nodeType":"YulAssignment","src":"2416:20:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2431:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"2434:1:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2427:3:8"},"nodeType":"YulFunctionCall","src":"2427:9:8"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"2416:7:8"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2125:1:8","type":""},{"name":"y","nodeType":"YulTypedName","src":"2128:1:8","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"2134:7:8","type":""}],"src":"2094:348:8"},{"body":{"nodeType":"YulBlock","src":"2476:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2493:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2496:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2486:6:8"},"nodeType":"YulFunctionCall","src":"2486:88:8"},"nodeType":"YulExpressionStatement","src":"2486:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2590:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2593:4:8","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2583:6:8"},"nodeType":"YulFunctionCall","src":"2583:15:8"},"nodeType":"YulExpressionStatement","src":"2583:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2614:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2617:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2607:6:8"},"nodeType":"YulFunctionCall","src":"2607:15:8"},"nodeType":"YulExpressionStatement","src":"2607:15:8"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"2448:180:8"},{"body":{"nodeType":"YulBlock","src":"2676:143:8","statements":[{"nodeType":"YulAssignment","src":"2686:25:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2709:1:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2691:17:8"},"nodeType":"YulFunctionCall","src":"2691:20:8"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"2686:1:8"}]},{"nodeType":"YulAssignment","src":"2720:25:8","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2743:1:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2725:17:8"},"nodeType":"YulFunctionCall","src":"2725:20:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"2720:1:8"}]},{"body":{"nodeType":"YulBlock","src":"2767:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"2769:16:8"},"nodeType":"YulFunctionCall","src":"2769:18:8"},"nodeType":"YulExpressionStatement","src":"2769:18:8"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"2764:1:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2757:6:8"},"nodeType":"YulFunctionCall","src":"2757:9:8"},"nodeType":"YulIf","src":"2754:35:8"},{"nodeType":"YulAssignment","src":"2799:14:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2808:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"2811:1:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2804:3:8"},"nodeType":"YulFunctionCall","src":"2804:9:8"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2799:1:8"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2665:1:8","type":""},{"name":"y","nodeType":"YulTypedName","src":"2668:1:8","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"2674:1:8","type":""}],"src":"2634:185:8"},{"body":{"nodeType":"YulBlock","src":"2876:51:8","statements":[{"nodeType":"YulAssignment","src":"2886:34:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2911:1:8","type":"","value":"1"},{"name":"value","nodeType":"YulIdentifier","src":"2914:5:8"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2907:3:8"},"nodeType":"YulFunctionCall","src":"2907:13:8"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"2886:8:8"}]}]},"name":"shift_right_1_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2857:5:8","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"2867:8:8","type":""}],"src":"2825:102:8"},{"body":{"nodeType":"YulBlock","src":"3006:775:8","statements":[{"nodeType":"YulAssignment","src":"3016:15:8","value":{"name":"_power","nodeType":"YulIdentifier","src":"3025:6:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3016:5:8"}]},{"nodeType":"YulAssignment","src":"3040:14:8","value":{"name":"_base","nodeType":"YulIdentifier","src":"3049:5:8"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"3040:4:8"}]},{"body":{"nodeType":"YulBlock","src":"3098:677:8","statements":[{"body":{"nodeType":"YulBlock","src":"3186:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3188:16:8"},"nodeType":"YulFunctionCall","src":"3188:18:8"},"nodeType":"YulExpressionStatement","src":"3188:18:8"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3164:4:8"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"3174:3:8"},{"name":"base","nodeType":"YulIdentifier","src":"3179:4:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3170:3:8"},"nodeType":"YulFunctionCall","src":"3170:14:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3161:2:8"},"nodeType":"YulFunctionCall","src":"3161:24:8"},"nodeType":"YulIf","src":"3158:50:8"},{"body":{"nodeType":"YulBlock","src":"3253:419:8","statements":[{"nodeType":"YulAssignment","src":"3633:25:8","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"3646:5:8"},{"name":"base","nodeType":"YulIdentifier","src":"3653:4:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3642:3:8"},"nodeType":"YulFunctionCall","src":"3642:16:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"3633:5:8"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3228:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"3238:1:8","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3224:3:8"},"nodeType":"YulFunctionCall","src":"3224:16:8"},"nodeType":"YulIf","src":"3221:451:8"},{"nodeType":"YulAssignment","src":"3685:23:8","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"3697:4:8"},{"name":"base","nodeType":"YulIdentifier","src":"3703:4:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3693:3:8"},"nodeType":"YulFunctionCall","src":"3693:15:8"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"3685:4:8"}]},{"nodeType":"YulAssignment","src":"3721:44:8","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3756:8:8"}],"functionName":{"name":"shift_right_1_unsigned","nodeType":"YulIdentifier","src":"3733:22:8"},"nodeType":"YulFunctionCall","src":"3733:32:8"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"3721:8:8"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"3074:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"3084:1:8","type":"","value":"1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3071:2:8"},"nodeType":"YulFunctionCall","src":"3071:15:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3087:2:8","statements":[]},"pre":{"nodeType":"YulBlock","src":"3067:3:8","statements":[]},"src":"3063:712:8"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nodeType":"YulTypedName","src":"2961:6:8","type":""},{"name":"_base","nodeType":"YulTypedName","src":"2969:5:8","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"2976:8:8","type":""},{"name":"max","nodeType":"YulTypedName","src":"2986:3:8","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"2994:5:8","type":""},{"name":"base","nodeType":"YulTypedName","src":"3001:4:8","type":""}],"src":"2933:848:8"},{"body":{"nodeType":"YulBlock","src":"3847:1013:8","statements":[{"body":{"nodeType":"YulBlock","src":"4042:20:8","statements":[{"nodeType":"YulAssignment","src":"4044:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4053:1:8","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4044:5:8"}]},{"nodeType":"YulLeave","src":"4055:5:8"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4032:8:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4025:6:8"},"nodeType":"YulFunctionCall","src":"4025:16:8"},"nodeType":"YulIf","src":"4022:40:8"},{"body":{"nodeType":"YulBlock","src":"4087:20:8","statements":[{"nodeType":"YulAssignment","src":"4089:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4098:1:8","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4089:5:8"}]},{"nodeType":"YulLeave","src":"4100:5:8"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4081:4:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4074:6:8"},"nodeType":"YulFunctionCall","src":"4074:12:8"},"nodeType":"YulIf","src":"4071:36:8"},{"cases":[{"body":{"nodeType":"YulBlock","src":"4217:20:8","statements":[{"nodeType":"YulAssignment","src":"4219:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4228:1:8","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4219:5:8"}]},{"nodeType":"YulLeave","src":"4230:5:8"}]},"nodeType":"YulCase","src":"4210:27:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4215:1:8","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4261:176:8","statements":[{"body":{"nodeType":"YulBlock","src":"4296:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4298:16:8"},"nodeType":"YulFunctionCall","src":"4298:18:8"},"nodeType":"YulExpressionStatement","src":"4298:18:8"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4281:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"4291:3:8","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4278:2:8"},"nodeType":"YulFunctionCall","src":"4278:17:8"},"nodeType":"YulIf","src":"4275:43:8"},{"nodeType":"YulAssignment","src":"4331:25:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4344:1:8","type":"","value":"2"},{"name":"exponent","nodeType":"YulIdentifier","src":"4347:8:8"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"4340:3:8"},"nodeType":"YulFunctionCall","src":"4340:16:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4331:5:8"}]},{"body":{"nodeType":"YulBlock","src":"4387:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4389:16:8"},"nodeType":"YulFunctionCall","src":"4389:18:8"},"nodeType":"YulExpressionStatement","src":"4389:18:8"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4375:5:8"},{"name":"max","nodeType":"YulIdentifier","src":"4382:3:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4372:2:8"},"nodeType":"YulFunctionCall","src":"4372:14:8"},"nodeType":"YulIf","src":"4369:40:8"},{"nodeType":"YulLeave","src":"4422:5:8"}]},"nodeType":"YulCase","src":"4246:191:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4251:1:8","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"4167:4:8"},"nodeType":"YulSwitch","src":"4160:277:8"},{"body":{"nodeType":"YulBlock","src":"4569:123:8","statements":[{"nodeType":"YulAssignment","src":"4583:28:8","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4596:4:8"},{"name":"exponent","nodeType":"YulIdentifier","src":"4602:8:8"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"4592:3:8"},"nodeType":"YulFunctionCall","src":"4592:19:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4583:5:8"}]},{"body":{"nodeType":"YulBlock","src":"4642:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4644:16:8"},"nodeType":"YulFunctionCall","src":"4644:18:8"},"nodeType":"YulExpressionStatement","src":"4644:18:8"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4630:5:8"},{"name":"max","nodeType":"YulIdentifier","src":"4637:3:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4627:2:8"},"nodeType":"YulFunctionCall","src":"4627:14:8"},"nodeType":"YulIf","src":"4624:40:8"},{"nodeType":"YulLeave","src":"4677:5:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4472:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"4478:2:8","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4469:2:8"},"nodeType":"YulFunctionCall","src":"4469:12:8"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4486:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"4496:2:8","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4483:2:8"},"nodeType":"YulFunctionCall","src":"4483:16:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4465:3:8"},"nodeType":"YulFunctionCall","src":"4465:35:8"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4521:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"4527:3:8","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4518:2:8"},"nodeType":"YulFunctionCall","src":"4518:13:8"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4536:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"4546:2:8","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4533:2:8"},"nodeType":"YulFunctionCall","src":"4533:16:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4514:3:8"},"nodeType":"YulFunctionCall","src":"4514:36:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4449:2:8"},"nodeType":"YulFunctionCall","src":"4449:111:8"},"nodeType":"YulIf","src":"4446:246:8"},{"nodeType":"YulAssignment","src":"4702:57:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4736:1:8","type":"","value":"1"},{"name":"base","nodeType":"YulIdentifier","src":"4739:4:8"},{"name":"exponent","nodeType":"YulIdentifier","src":"4745:8:8"},{"name":"max","nodeType":"YulIdentifier","src":"4755:3:8"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"4717:18:8"},"nodeType":"YulFunctionCall","src":"4717:42:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4702:5:8"},{"name":"base","nodeType":"YulIdentifier","src":"4709:4:8"}]},{"body":{"nodeType":"YulBlock","src":"4798:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4800:16:8"},"nodeType":"YulFunctionCall","src":"4800:18:8"},"nodeType":"YulExpressionStatement","src":"4800:18:8"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4775:5:8"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"4786:3:8"},{"name":"base","nodeType":"YulIdentifier","src":"4791:4:8"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4782:3:8"},"nodeType":"YulFunctionCall","src":"4782:14:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4772:2:8"},"nodeType":"YulFunctionCall","src":"4772:25:8"},"nodeType":"YulIf","src":"4769:51:8"},{"nodeType":"YulAssignment","src":"4829:25:8","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"4842:5:8"},{"name":"base","nodeType":"YulIdentifier","src":"4849:4:8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4838:3:8"},"nodeType":"YulFunctionCall","src":"4838:16:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4829:5:8"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"3817:4:8","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"3823:8:8","type":""},{"name":"max","nodeType":"YulTypedName","src":"3833:3:8","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"3841:5:8","type":""}],"src":"3787:1073:8"},{"body":{"nodeType":"YulBlock","src":"4932:219:8","statements":[{"nodeType":"YulAssignment","src":"4942:31:8","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4968:4:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4950:17:8"},"nodeType":"YulFunctionCall","src":"4950:23:8"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"4942:4:8"}]},{"nodeType":"YulAssignment","src":"4982:39:8","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5012:8:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4994:17:8"},"nodeType":"YulFunctionCall","src":"4994:27:8"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"4982:8:8"}]},{"nodeType":"YulAssignment","src":"5031:113:8","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5061:4:8"},{"name":"exponent","nodeType":"YulIdentifier","src":"5067:8:8"},{"kind":"number","nodeType":"YulLiteral","src":"5077:66:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"5040:20:8"},"nodeType":"YulFunctionCall","src":"5040:104:8"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5031:5:8"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"4907:4:8","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"4913:8:8","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"4926:5:8","type":""}],"src":"4866:285:8"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint16(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n}\n","id":8,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80633fb340031461003a575b600080fd5b610054600480360381019061004f9190610145565b61006a565b6040516100619190610194565b60405180910390f35b600061007c838361ffff166002610084565b905092915050565b600061008f826100ae565b838561009b91906101de565b6100a59190610267565b90509392505050565b600081600a6100bd91906103cb565b60646100c991906101de565b9050919050565b600080fd5b6000819050919050565b6100e8816100d5565b81146100f357600080fd5b50565b600081359050610105816100df565b92915050565b600061ffff82169050919050565b6101228161010b565b811461012d57600080fd5b50565b60008135905061013f81610119565b92915050565b6000806040838503121561015c5761015b6100d0565b5b600061016a858286016100f6565b925050602061017b85828601610130565b9150509250929050565b61018e816100d5565b82525050565b60006020820190506101a96000830184610185565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101e9826100d5565b91506101f4836100d5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561022d5761022c6101af565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610272826100d5565b915061027d836100d5565b92508261028d5761028c610238565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b60018511156102ef578086048111156102cb576102ca6101af565b5b60018516156102da5780820291505b80810290506102e885610298565b94506102af565b94509492505050565b60008261030857600190506103c4565b8161031657600090506103c4565b816001811461032c576002811461033657610365565b60019150506103c4565b60ff841115610348576103476101af565b5b8360020a91508482111561035f5761035e6101af565b5b506103c4565b5060208310610133831016604e8410600b841016171561039a5782820a905083811115610395576103946101af565b5b6103c4565b6103a784848460016102a5565b925090508184048111156103be576103bd6101af565b5b81810290505b9392505050565b60006103d6826100d5565b91506103e1836100d5565b925061040e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846102f8565b90509291505056fea2646970667358221220807dfb6d5cede898ebb083cea90565b7dcd6e23c955ac4353630d7e086124cf564736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3FB34003 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4F SWAP2 SWAP1 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x61 SWAP2 SWAP1 PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x7C DUP4 DUP4 PUSH2 0xFFFF AND PUSH1 0x2 PUSH2 0x84 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F DUP3 PUSH2 0xAE JUMP JUMPDEST DUP4 DUP6 PUSH2 0x9B SWAP2 SWAP1 PUSH2 0x1DE JUMP JUMPDEST PUSH2 0xA5 SWAP2 SWAP1 PUSH2 0x267 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xA PUSH2 0xBD SWAP2 SWAP1 PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x64 PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x1DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE8 DUP2 PUSH2 0xD5 JUMP JUMPDEST DUP2 EQ PUSH2 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x105 DUP2 PUSH2 0xDF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x122 DUP2 PUSH2 0x10B JUMP JUMPDEST DUP2 EQ PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13F DUP2 PUSH2 0x119 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x15C JUMPI PUSH2 0x15B PUSH2 0xD0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16A DUP6 DUP3 DUP7 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17B DUP6 DUP3 DUP7 ADD PUSH2 0x130 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E DUP2 PUSH2 0xD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x185 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1E9 DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F4 DUP4 PUSH2 0xD5 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0x1AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x272 DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x27D DUP4 PUSH2 0xD5 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x28D JUMPI PUSH2 0x28C PUSH2 0x238 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x2EF JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x2CB JUMPI PUSH2 0x2CA PUSH2 0x1AF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x2DA JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x2E8 DUP6 PUSH2 0x298 JUMP JUMPDEST SWAP5 POP PUSH2 0x2AF JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x308 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x3C4 JUMP JUMPDEST DUP2 PUSH2 0x316 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x3C4 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x32C JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x336 JUMPI PUSH2 0x365 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x348 JUMPI PUSH2 0x347 PUSH2 0x1AF JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x35F JUMPI PUSH2 0x35E PUSH2 0x1AF JUMP JUMPDEST JUMPDEST POP PUSH2 0x3C4 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x39A JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x395 JUMPI PUSH2 0x394 PUSH2 0x1AF JUMP JUMPDEST JUMPDEST PUSH2 0x3C4 JUMP JUMPDEST PUSH2 0x3A7 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x2A5 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x3BE JUMPI PUSH2 0x3BD PUSH2 0x1AF JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D6 DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E1 DUP4 PUSH2 0xD5 JUMP JUMPDEST SWAP3 POP PUSH2 0x40E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x2F8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 PUSH30 0xFB6D5CEDE898EBB083CEA90565B7DCD6E23C955AC4353630D7E086124CF5 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"302:947:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;651:160;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;746:7;776:28;784:4;790:10;776:28;;802:1;776:7;:28::i;:::-;769:35;;651:160;;;;:::o;1046:200::-;1168:7;1216:23;1230:8;1216:13;:23::i;:::-;1202:10;1195:4;:17;;;;:::i;:::-;1194:45;;;;:::i;:::-;1187:52;;1046:200;;;;;:::o;332:117::-;396:7;433:8;429:2;:12;;;;:::i;:::-;422:3;:20;;;;:::i;:::-;415:27;;332:117;;;:::o;88::8:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:89::-;726:7;766:6;759:5;755:18;744:29;;690:89;;;:::o;785:120::-;857:23;874:5;857:23;:::i;:::-;850:5;847:34;837:62;;895:1;892;885:12;837:62;785:120;:::o;911:137::-;956:5;994:6;981:20;972:29;;1010:32;1036:5;1010:32;:::i;:::-;911:137;;;;:::o;1054:472::-;1121:6;1129;1178:2;1166:9;1157:7;1153:23;1149:32;1146:119;;;1184:79;;:::i;:::-;1146:119;1304:1;1329:53;1374:7;1365:6;1354:9;1350:22;1329:53;:::i;:::-;1319:63;;1275:117;1431:2;1457:52;1501:7;1492:6;1481:9;1477:22;1457:52;:::i;:::-;1447:62;;1402:117;1054:472;;;;;:::o;1532:126::-;1627:24;1645:5;1627:24;:::i;:::-;1622:3;1615:37;1532:126;;:::o;1664:238::-;1765:4;1803:2;1792:9;1788:18;1780:26;;1816:79;1892:1;1881:9;1877:17;1868:6;1816:79;:::i;:::-;1664:238;;;;:::o;1908:180::-;1956:77;1953:1;1946:88;2053:4;2050:1;2043:15;2077:4;2074:1;2067:15;2094:348;2134:7;2157:20;2175:1;2157:20;:::i;:::-;2152:25;;2191:20;2209:1;2191:20;:::i;:::-;2186:25;;2379:1;2311:66;2307:74;2304:1;2301:81;2296:1;2289:9;2282:17;2278:105;2275:131;;;2386:18;;:::i;:::-;2275:131;2434:1;2431;2427:9;2416:20;;2094:348;;;;:::o;2448:180::-;2496:77;2493:1;2486:88;2593:4;2590:1;2583:15;2617:4;2614:1;2607:15;2634:185;2674:1;2691:20;2709:1;2691:20;:::i;:::-;2686:25;;2725:20;2743:1;2725:20;:::i;:::-;2720:25;;2764:1;2754:35;;2769:18;;:::i;:::-;2754:35;2811:1;2808;2804:9;2799:14;;2634:185;;;;:::o;2825:102::-;2867:8;2914:5;2911:1;2907:13;2886:34;;2825:102;;;:::o;2933:848::-;2994:5;3001:4;3025:6;3016:15;;3049:5;3040:14;;3063:712;3084:1;3074:8;3071:15;3063:712;;;3179:4;3174:3;3170:14;3164:4;3161:24;3158:50;;;3188:18;;:::i;:::-;3158:50;3238:1;3228:8;3224:16;3221:451;;;3653:4;3646:5;3642:16;3633:25;;3221:451;3703:4;3697;3693:15;3685:23;;3733:32;3756:8;3733:32;:::i;:::-;3721:44;;3063:712;;;2933:848;;;;;;;:::o;3787:1073::-;3841:5;4032:8;4022:40;;4053:1;4044:10;;4055:5;;4022:40;4081:4;4071:36;;4098:1;4089:10;;4100:5;;4071:36;4167:4;4215:1;4210:27;;;;4251:1;4246:191;;;;4160:277;;4210:27;4228:1;4219:10;;4230:5;;;4246:191;4291:3;4281:8;4278:17;4275:43;;;4298:18;;:::i;:::-;4275:43;4347:8;4344:1;4340:16;4331:25;;4382:3;4375:5;4372:14;4369:40;;;4389:18;;:::i;:::-;4369:40;4422:5;;;4160:277;;4546:2;4536:8;4533:16;4527:3;4521:4;4518:13;4514:36;4496:2;4486:8;4483:16;4478:2;4472:4;4469:12;4465:35;4449:111;4446:246;;;4602:8;4596:4;4592:19;4583:28;;4637:3;4630:5;4627:14;4624:40;;;4644:18;;:::i;:::-;4624:40;4677:5;;4446:246;4717:42;4755:3;4745:8;4739:4;4736:1;4717:42;:::i;:::-;4702:57;;;;4791:4;4786:3;4782:14;4775:5;4772:25;4769:51;;;4800:18;;:::i;:::-;4769:51;4849:4;4842:5;4838:16;4829:25;;3787:1073;;;;;;:::o;4866:285::-;4926:5;4950:23;4968:4;4950:23;:::i;:::-;4942:31;;4994:27;5012:8;4994:27;:::i;:::-;4982:39;;5040:104;5077:66;5067:8;5061:4;5040:104;:::i;:::-;5031:113;;4866:285;;;;:::o"},"methodIdentifiers":{"percent(uint256,uint16)":"3fb34003"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"self\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"percent(uint256,uint16)\":{\"notice\":\"Returns a percentage value of a number. self The number to get a percentage of. percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Libraries/LibCalculations.sol\":\"LibCalculations\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278\",\"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b\",\"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ\"]},\"contracts/Libraries/LibCalculations.sol\":{\"keccak256\":\"0x70ae252914c77fe653c01376c7227d1e5716fc4e3946954dba33548fc501bf18\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e0f38accc310fd1b3ee84efc1f4c827b9d3744774bba85f22287ae176a01bee\",\"dweb:/ipfs/QmPQEynysKKPCQnwacVd6UUxR2fx8HiYr1FrLSYpEye1JB\"]}},\"version\":1}"}},"contracts/insuranceRegistery.sol":{"insuranceRegistery":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"InsuranceId","type":"uint256"},{"indexed":false,"internalType":"string","name":"massage","type":"string"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"InsuranceId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"insuranceRegistered","type":"event"},{"inputs":[],"name":"InsuranceId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"ERC20Address","type":"address"},{"internalType":"uint256","name":"_insuranceId","type":"uint256"},{"internalType":"string","name":"image","type":"string"},{"internalType":"string","name":"date","type":"string"},{"internalType":"bool","name":"chainlink","type":"bool"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"date","type":"string"}],"name":"dataFromChainLink","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"insuranceDetails","outputs":[{"internalType":"address","name":"userWalletAddress","type":"address"},{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"maturityDate","type":"uint256"},{"internalType":"uint256","name":"periodTime","type":"uint256"},{"internalType":"uint256","name":"areaOfLand","type":"uint256"},{"internalType":"string","name":"seedsData","type":"string"},{"internalType":"uint256","name":"seedQuantity","type":"uint256"},{"internalType":"string","name":"image","type":"string"},{"internalType":"string","name":"yourAddress","type":"string"},{"internalType":"uint256","name":"Amount","type":"uint256"},{"internalType":"uint16","name":"percent","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"userWalletAddress","type":"address"},{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"maturityDate","type":"uint256"},{"internalType":"uint256","name":"periodTime","type":"uint256"},{"internalType":"uint256","name":"areaOfLand","type":"uint256"},{"internalType":"string","name":"seedsData","type":"string"},{"internalType":"uint256","name":"seedQuantity","type":"uint256"},{"internalType":"string","name":"image","type":"string"},{"internalType":"string","name":"yourAddress","type":"string"},{"internalType":"uint256","name":"Amount","type":"uint256"},{"internalType":"uint16","name":"percent","type":"uint16"}],"internalType":"struct insuranceRegistery.insuranceData","name":"_insuranceData","type":"tuple"}],"name":"insuranceRegister","outputs":[{"internalType":"uint256","name":"_insuranceId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"lastInstallmentPaidTimestump","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"paidInstallments","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"ERC20Address","type":"address"},{"internalType":"uint256","name":"_insuranceId","type":"uint256"}],"name":"payInstallment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userInsurances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{"@_18":{"entryPoint":null,"id":18,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"linkReferences":{"contracts/Libraries/LibCalculations.sol":{"LibCalculations":[{"length":20,"start":1354}]}},"object":"608060405234801561001057600080fd5b50600160008190555061219e806100286000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b52078d711610066578063b52078d714610130578063bae5b0561461016a578063ccf46d341461019a578063ed80db35146101b8578063f36eeebb146101e857610093565b8063487e4661146100985780635a514dd6146100c857806369cf8ad7146100e4578063a86f678f14610114575b600080fd5b6100b260048036038101906100ad919061132c565b610218565b6040516100bf9190611368565b60405180910390f35b6100e260048036038101906100dd919061155f565b610230565b005b6100fe60048036038101906100f9919061132c565b61080f565b60405161010b919061162e565b60405180910390f35b61012e60048036038101906101299190611649565b61082f565b005b61014a6004803603810190610145919061132c565b610d3b565b6040516101619b9a9998979695949392919061173d565b60405180910390f35b610184600480360381019061017f9190611993565b610f5b565b6040516101919190611368565b60405180910390f35b6101a26111a3565b6040516101af9190611368565b60405180910390f35b6101d260048036038101906101cd91906119dc565b6111a9565b6040516101df9190611a34565b60405180910390f35b61020260048036038101906101fd9190611649565b6111b4565b60405161020f9190611368565b60405180910390f35b60046020528060005260406000206000915090505481565b6102386111e5565b4260046000868152602001908152602001600020541061028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028490611ac1565b60405180910390fd5b80156107c557600060026000868152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201805461034290611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90611b10565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b50505050508152602001600682015481526020016007820180546103de90611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461040a90611b10565b80156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b5050505050815260200160088201805461047090611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90611b10565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050815260200160098201548152602001600a820160009054906101000a900461ffff1661ffff1661ffff16815250509050600073__$61c3dbfad47bb5d5260aee114f5f9d6488$__633fb340038361012001518461014001516040518363ffffffff1660e01b8152600401610563929190611b60565b60206040518083038186803b15801561057b57600080fd5b505af415801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611b9e565b90503373ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061e90611c17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90611ca9565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330848661012001516106c69190611cf8565b6040518463ffffffff1660e01b81526004016106e493929190611d4e565b602060405180830381600087803b1580156106fe57600080fd5b505af1158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190611d9a565b610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c90611e13565b60405180910390fd5b7f9eb9ef6bc25ab8bf0bc9a4907fa27dab76ea367b559d928306db5ac5b2656e3486828461012001516107a89190611cf8565b6040516107b6929190611e7f565b60405180910390a15050610800565b7f9eb9ef6bc25ab8bf0bc9a4907fa27dab76ea367b559d928306db5ac5b2656e348460006040516107f7929190611f4c565b60405180910390a15b610808611235565b5050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6108376111e5565b600060026000838152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820180546108e690611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461091290611b10565b801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b505050505081526020016006820154815260200160078201805461098290611b10565b80601f01602080910402602001604051908101604052809291908181526020018280546109ae90611b10565b80156109fb5780601f106109d0576101008083540402835291602001916109fb565b820191906000526020600020905b8154815290600101906020018083116109de57829003601f168201915b50505050508152602001600882018054610a1490611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4090611b10565b8015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b5050505050815260200160098201548152602001600a820160009054906101000a900461ffff1661ffff1661ffff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b90611c17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90611ca9565b60405180910390fd5b4281604001518260200151610bb99190611cf8565b1115610bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf190611fd4565b60405180910390fd5b60036000838152602001908152602001600020600081819054906101000a900460ff1680929190610c2a90611ff4565b91906101000a81548160ff021916908360ff160217905550504260046000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166323b872dd33308461012001516040518463ffffffff1660e01b8152600401610c9d93929190611d4e565b602060405180830381600087803b158015610cb757600080fd5b505af1158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef9190611d9a565b610d2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2590611e13565b60405180910390fd5b50610d37611235565b5050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015490806005018054610d9c90611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc890611b10565b8015610e155780601f10610dea57610100808354040283529160200191610e15565b820191906000526020600020905b815481529060010190602001808311610df857829003601f168201915b505050505090806006015490806007018054610e3090611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5c90611b10565b8015610ea95780601f10610e7e57610100808354040283529160200191610ea9565b820191906000526020600020905b815481529060010190602001808311610e8c57829003601f168201915b505050505090806008018054610ebe90611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610eea90611b10565b8015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b50505050509080600901549080600a0160009054906101000a900461ffff1690508b565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc39061206a565b60405180910390fd5b600160008154610fdb9061208a565b9190508190559050816002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501908051906020019061108292919061123f565b5060c0820151816006015560e08201518160070190805190602001906110a992919061123f565b506101008201518160080190805190602001906110c792919061123f565b50610120820151816009015561014082015181600a0160006101000a81548161ffff021916908361ffff160217905550905050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150557f75f0e88e04463f86c7e1e71465891020fa84744536526c63c08c967fcb3acbfc818361012001516040516111969291906120d3565b60405180910390a1919050565b60015481565b600060019050919050565b600560205281600052604060002081815481106111d057600080fd5b90600052602060002001600091509150505481565b6002600054141561122b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122290612148565b60405180910390fd5b6002600081905550565b6001600081905550565b82805461124b90611b10565b90600052602060002090601f01602090048101928261126d57600085556112b4565b82601f1061128657805160ff19168380011785556112b4565b828001600101855582156112b4579182015b828111156112b3578251825591602001919060010190611298565b5b5090506112c191906112c5565b5090565b5b808211156112de5760008160009055506001016112c6565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611309816112f6565b811461131457600080fd5b50565b60008135905061132681611300565b92915050565b600060208284031215611342576113416112ec565b5b600061135084828501611317565b91505092915050565b611362816112f6565b82525050565b600060208201905061137d6000830184611359565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113ae82611383565b9050919050565b6113be816113a3565b81146113c957600080fd5b50565b6000813590506113db816113b5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611434826113eb565b810181811067ffffffffffffffff82111715611453576114526113fc565b5b80604052505050565b60006114666112e2565b9050611472828261142b565b919050565b600067ffffffffffffffff821115611492576114916113fc565b5b61149b826113eb565b9050602081019050919050565b82818337600083830152505050565b60006114ca6114c584611477565b61145c565b9050828152602081018484840111156114e6576114e56113e6565b5b6114f18482856114a8565b509392505050565b600082601f83011261150e5761150d6113e1565b5b813561151e8482602086016114b7565b91505092915050565b60008115159050919050565b61153c81611527565b811461154757600080fd5b50565b60008135905061155981611533565b92915050565b600080600080600060a0868803121561157b5761157a6112ec565b5b6000611589888289016113cc565b955050602061159a88828901611317565b945050604086013567ffffffffffffffff8111156115bb576115ba6112f1565b5b6115c7888289016114f9565b935050606086013567ffffffffffffffff8111156115e8576115e76112f1565b5b6115f4888289016114f9565b92505060806116058882890161154a565b9150509295509295909350565b600060ff82169050919050565b61162881611612565b82525050565b6000602082019050611643600083018461161f565b92915050565b600080604083850312156116605761165f6112ec565b5b600061166e858286016113cc565b925050602061167f85828601611317565b9150509250929050565b611692816113a3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116d25780820151818401526020810190506116b7565b838111156116e1576000848401525b50505050565b60006116f282611698565b6116fc81856116a3565b935061170c8185602086016116b4565b611715816113eb565b840191505092915050565b600061ffff82169050919050565b61173781611720565b82525050565b600061016082019050611753600083018e611689565b611760602083018d611359565b61176d604083018c611359565b61177a606083018b611359565b611787608083018a611359565b81810360a083015261179981896116e7565b90506117a860c0830188611359565b81810360e08301526117ba81876116e7565b90508181036101008301526117cf81866116e7565b90506117df610120830185611359565b6117ed61014083018461172e565b9c9b505050505050505050505050565b600080fd5b600080fd5b61181081611720565b811461181b57600080fd5b50565b60008135905061182d81611807565b92915050565b6000610160828403121561184a576118496117fd565b5b61185561016061145c565b90506000611865848285016113cc565b600083015250602061187984828501611317565b602083015250604061188d84828501611317565b60408301525060606118a184828501611317565b60608301525060806118b584828501611317565b60808301525060a082013567ffffffffffffffff8111156118d9576118d8611802565b5b6118e5848285016114f9565b60a08301525060c06118f984828501611317565b60c08301525060e082013567ffffffffffffffff81111561191d5761191c611802565b5b611929848285016114f9565b60e08301525061010082013567ffffffffffffffff81111561194e5761194d611802565b5b61195a848285016114f9565b6101008301525061012061197084828501611317565b610120830152506101406119868482850161181e565b6101408301525092915050565b6000602082840312156119a9576119a86112ec565b5b600082013567ffffffffffffffff8111156119c7576119c66112f1565b5b6119d384828501611833565b91505092915050565b6000602082840312156119f2576119f16112ec565b5b600082013567ffffffffffffffff811115611a1057611a0f6112f1565b5b611a1c848285016114f9565b91505092915050565b611a2e81611527565b82525050565b6000602082019050611a496000830184611a25565b92915050565b7f596f752061726520636c61696d696e672061742077726f6e672074696d65737460008201527f616d700000000000000000000000000000000000000000000000000000000000602082015250565b6000611aab6023836116a3565b9150611ab682611a4f565b604082019050919050565b60006020820190508181036000830152611ada81611a9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b2857607f821691505b60208210811415611b3c57611b3b611ae1565b5b50919050565b611b4b816112f6565b82525050565b611b5a81611720565b82525050565b6000604082019050611b756000830185611b42565b611b826020830184611b51565b9392505050565b600081519050611b9881611300565b92915050565b600060208284031215611bb457611bb36112ec565b5b6000611bc284828501611b89565b91505092915050565b7f54686973206973206e6f7420796f757220496e737572616e6365000000000000600082015250565b6000611c01601a836116a3565b9150611c0c82611bcb565b602082019050919050565b60006020820190508181036000830152611c3081611bf4565b9050919050565b7f796f752063616e277420646f20746869732077697468207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611c936023836116a3565b9150611c9e82611c37565b604082019050919050565b60006020820190508181036000830152611cc281611c86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d03826112f6565b9150611d0e836112f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d4357611d42611cc9565b5b828201905092915050565b6000606082019050611d636000830186611689565b611d706020830185611689565b611d7d6040830184611359565b949350505050565b600081519050611d9481611533565b92915050565b600060208284031215611db057611daf6112ec565b5b6000611dbe84828501611d85565b91505092915050565b7f556e61626c6520746f2074616e736665722046756e6400000000000000000000600082015250565b6000611dfd6016836116a3565b9150611e0882611dc7565b602082019050919050565b60006020820190508181036000830152611e2c81611df0565b9050919050565b7f7375636365737300000000000000000000000000000000000000000000000000600082015250565b6000611e696007836116a3565b9150611e7482611e33565b602082019050919050565b6000606082019050611e946000830185611359565b8181036020830152611ea581611e5c565b9050611eb46040830184611359565b9392505050565b7f756e737563636573730000000000000000000000000000000000000000000000600082015250565b6000611ef16009836116a3565b9150611efc82611ebb565b602082019050919050565b6000819050919050565b6000819050919050565b6000611f36611f31611f2c84611f07565b611f11565b6112f6565b9050919050565b611f4681611f1b565b82525050565b6000606082019050611f616000830185611359565b8181036020830152611f7281611ee4565b9050611f816040830184611f3d565b9392505050565b7f796f7572206d617475726974792044617465206973206f766572000000000000600082015250565b6000611fbe601a836116a3565b9150611fc982611f88565b602082019050919050565b60006020820190508181036000830152611fed81611fb1565b9050919050565b6000611fff82611612565b915060ff82141561201357612012611cc9565b5b600182019050919050565b7f46616b6520416464726573730000000000000000000000000000000000000000600082015250565b6000612054600c836116a3565b915061205f8261201e565b602082019050919050565b6000602082019050818103600083015261208381612047565b9050919050565b6000612095826112f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120c8576120c7611cc9565b5b600182019050919050565b60006040820190506120e86000830185611359565b6120f56020830184611359565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612132601f836116a3565b915061213d826120fc565b602082019050919050565b6000602082019050818103600083015261216181612125565b905091905056fea264697066735822122017c8c52e5a2e86d82f5e1a66c0f1ff4f12d2c7087186b9dac81bb97ed651a02864736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0x219E DUP1 PUSH2 0x28 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB52078D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB52078D7 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0xBAE5B056 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xCCF46D34 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xED80DB35 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xF36EEEBB EQ PUSH2 0x1E8 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x487E4661 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x5A514DD6 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x69CF8AD7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0xA86F678F EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDD SWAP2 SWAP1 PUSH2 0x155F JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xFE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF9 SWAP2 SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10B SWAP2 SWAP1 PUSH2 0x162E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x129 SWAP2 SWAP1 PUSH2 0x1649 JUMP JUMPDEST PUSH2 0x82F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0xD3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x161 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x173D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x184 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x1993 JUMP JUMPDEST PUSH2 0xF5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A2 PUSH2 0x11A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x19DC JUMP JUMPDEST PUSH2 0x11A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DF SWAP2 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1649 JUMP JUMPDEST PUSH2 0x11B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x238 PUSH2 0x11E5 JUMP JUMPDEST TIMESTAMP PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x28D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x284 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x342 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x36E SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x390 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x39E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH2 0x3DE SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x40A SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x457 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x42C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x457 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x43A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH2 0x470 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x49C SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4E9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4E9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4CC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x3FB34003 DUP4 PUSH2 0x120 ADD MLOAD DUP5 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x563 SWAP3 SWAP2 SWAP1 PUSH2 0x1B60 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x58F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B3 SWAP2 SWAP1 PUSH2 0x1B9E JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x627 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x61E SWAP1 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x697 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68E SWAP1 PUSH2 0x1CA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 DUP7 PUSH2 0x120 ADD MLOAD PUSH2 0x6C6 SWAP2 SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D4E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x712 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x736 SWAP2 SWAP1 PUSH2 0x1D9A JUMP JUMPDEST PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76C SWAP1 PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x9EB9EF6BC25AB8BF0BC9A4907FA27DAB76EA367B559D928306DB5AC5B2656E34 DUP7 DUP3 DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B6 SWAP3 SWAP2 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH2 0x800 JUMP JUMPDEST PUSH32 0x9EB9EF6BC25AB8BF0BC9A4907FA27DAB76EA367B559D928306DB5AC5B2656E34 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x7F7 SWAP3 SWAP2 SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH2 0x808 PUSH2 0x1235 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x837 PUSH2 0x11E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x8E6 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x912 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x95F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x934 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x95F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x942 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH2 0x982 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9AE SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9FB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9FB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9DE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH2 0xA14 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA40 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA8D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA62 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA8D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA70 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE POP POP SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB2B SWAP1 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9B SWAP1 PUSH2 0x1CA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP2 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0xBB9 SWAP2 SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST GT ISZERO PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF1 SWAP1 PUSH2 0x1FD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xC2A SWAP1 PUSH2 0x1FF4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP TIMESTAMP PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D4E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCCB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCEF SWAP2 SWAP1 PUSH2 0x1D9A JUMP JUMPDEST PUSH2 0xD2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD25 SWAP1 PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0xD37 PUSH2 0x1235 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0xD9C SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDC8 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE15 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDEA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE15 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDF8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x6 ADD SLOAD SWAP1 DUP1 PUSH1 0x7 ADD DUP1 SLOAD PUSH2 0xE30 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE5C SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE7E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEA9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE8C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x8 ADD DUP1 SLOAD PUSH2 0xEBE SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xEEA SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF37 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF0C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF37 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF1A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x9 ADD SLOAD SWAP1 DUP1 PUSH1 0xA ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND SWAP1 POP DUP12 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFC3 SWAP1 PUSH2 0x206A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0xFDB SWAP1 PUSH2 0x208A JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE SWAP1 POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1082 SWAP3 SWAP2 SWAP1 PUSH2 0x123F JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x10A9 SWAP3 SWAP2 SWAP1 PUSH2 0x123F JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x10C7 SWAP3 SWAP2 SWAP1 PUSH2 0x123F JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0xA ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH32 0x75F0E88E04463F86C7E1E71465891020FA84744536526C63C08C967FCB3ACBFC DUP2 DUP4 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1196 SWAP3 SWAP2 SWAP1 PUSH2 0x20D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x124B SWAP1 PUSH2 0x1B10 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x126D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x12B4 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1286 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x12B4 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x12B4 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x12B3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1298 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x12C1 SWAP2 SWAP1 PUSH2 0x12C5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x12C6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1309 DUP2 PUSH2 0x12F6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1326 DUP2 PUSH2 0x1300 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1342 JUMPI PUSH2 0x1341 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1350 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1362 DUP2 PUSH2 0x12F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x137D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13AE DUP3 PUSH2 0x1383 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13BE DUP2 PUSH2 0x13A3 JUMP JUMPDEST DUP2 EQ PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13DB DUP2 PUSH2 0x13B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1434 DUP3 PUSH2 0x13EB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1453 JUMPI PUSH2 0x1452 PUSH2 0x13FC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1466 PUSH2 0x12E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1472 DUP3 DUP3 PUSH2 0x142B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1492 JUMPI PUSH2 0x1491 PUSH2 0x13FC JUMP JUMPDEST JUMPDEST PUSH2 0x149B DUP3 PUSH2 0x13EB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14CA PUSH2 0x14C5 DUP5 PUSH2 0x1477 JUMP JUMPDEST PUSH2 0x145C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x14E6 JUMPI PUSH2 0x14E5 PUSH2 0x13E6 JUMP JUMPDEST JUMPDEST PUSH2 0x14F1 DUP5 DUP3 DUP6 PUSH2 0x14A8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x150E JUMPI PUSH2 0x150D PUSH2 0x13E1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x151E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x153C DUP2 PUSH2 0x1527 JUMP JUMPDEST DUP2 EQ PUSH2 0x1547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1559 DUP2 PUSH2 0x1533 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x157B JUMPI PUSH2 0x157A PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1589 DUP9 DUP3 DUP10 ADD PUSH2 0x13CC JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x159A DUP9 DUP3 DUP10 ADD PUSH2 0x1317 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15BB JUMPI PUSH2 0x15BA PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x15C7 DUP9 DUP3 DUP10 ADD PUSH2 0x14F9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E7 PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x15F4 DUP9 DUP3 DUP10 ADD PUSH2 0x14F9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x1605 DUP9 DUP3 DUP10 ADD PUSH2 0x154A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1628 DUP2 PUSH2 0x1612 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1643 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x161F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1660 JUMPI PUSH2 0x165F PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x166E DUP6 DUP3 DUP7 ADD PUSH2 0x13CC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x167F DUP6 DUP3 DUP7 ADD PUSH2 0x1317 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1692 DUP2 PUSH2 0x13A3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16D2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16B7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16E1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP3 PUSH2 0x1698 JUMP JUMPDEST PUSH2 0x16FC DUP2 DUP6 PUSH2 0x16A3 JUMP JUMPDEST SWAP4 POP PUSH2 0x170C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B4 JUMP JUMPDEST PUSH2 0x1715 DUP2 PUSH2 0x13EB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1737 DUP2 PUSH2 0x1720 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x1753 PUSH1 0x0 DUP4 ADD DUP15 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x1760 PUSH1 0x20 DUP4 ADD DUP14 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x176D PUSH1 0x40 DUP4 ADD DUP13 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x177A PUSH1 0x60 DUP4 ADD DUP12 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x1787 PUSH1 0x80 DUP4 ADD DUP11 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x1799 DUP2 DUP10 PUSH2 0x16E7 JUMP JUMPDEST SWAP1 POP PUSH2 0x17A8 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x17BA DUP2 DUP8 PUSH2 0x16E7 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH2 0x100 DUP4 ADD MSTORE PUSH2 0x17CF DUP2 DUP7 PUSH2 0x16E7 JUMP JUMPDEST SWAP1 POP PUSH2 0x17DF PUSH2 0x120 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x17ED PUSH2 0x140 DUP4 ADD DUP5 PUSH2 0x172E JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1810 DUP2 PUSH2 0x1720 JUMP JUMPDEST DUP2 EQ PUSH2 0x181B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x182D DUP2 PUSH2 0x1807 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x184A JUMPI PUSH2 0x1849 PUSH2 0x17FD JUMP JUMPDEST JUMPDEST PUSH2 0x1855 PUSH2 0x160 PUSH2 0x145C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1865 DUP5 DUP3 DUP6 ADD PUSH2 0x13CC JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1879 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x188D DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x18A1 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x18B5 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18D9 JUMPI PUSH2 0x18D8 PUSH2 0x1802 JUMP JUMPDEST JUMPDEST PUSH2 0x18E5 DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x18F9 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x191D JUMPI PUSH2 0x191C PUSH2 0x1802 JUMP JUMPDEST JUMPDEST PUSH2 0x1929 DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194E JUMPI PUSH2 0x194D PUSH2 0x1802 JUMP JUMPDEST JUMPDEST PUSH2 0x195A DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x1970 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 PUSH2 0x1986 DUP5 DUP3 DUP6 ADD PUSH2 0x181E JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A9 JUMPI PUSH2 0x19A8 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19C7 JUMPI PUSH2 0x19C6 PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x19D3 DUP5 DUP3 DUP6 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x19F1 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A10 JUMPI PUSH2 0x1A0F PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x1A1C DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A2E DUP2 PUSH2 0x1527 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A49 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A25 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F752061726520636C61696D696E672061742077726F6E672074696D657374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616D700000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAB PUSH1 0x23 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB6 DUP3 PUSH2 0x1A4F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ADA DUP2 PUSH2 0x1A9E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1B28 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1B3C JUMPI PUSH2 0x1B3B PUSH2 0x1AE1 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B4B DUP2 PUSH2 0x12F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1B5A DUP2 PUSH2 0x1720 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1B75 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1B42 JUMP JUMPDEST PUSH2 0x1B82 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1B98 DUP2 PUSH2 0x1300 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BB4 JUMPI PUSH2 0x1BB3 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BC2 DUP5 DUP3 DUP6 ADD PUSH2 0x1B89 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x54686973206973206E6F7420796F757220496E737572616E6365000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C01 PUSH1 0x1A DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0C DUP3 PUSH2 0x1BCB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C30 DUP2 PUSH2 0x1BF4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x796F752063616E277420646F20746869732077697468207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C93 PUSH1 0x23 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C9E DUP3 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CC2 DUP2 PUSH2 0x1C86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D03 DUP3 PUSH2 0x12F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D0E DUP4 PUSH2 0x12F6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1D43 JUMPI PUSH2 0x1D42 PUSH2 0x1CC9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1D63 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x1D70 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x1D7D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1D94 DUP2 PUSH2 0x1533 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB0 JUMPI PUSH2 0x1DAF PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DBE DUP5 DUP3 DUP6 ADD PUSH2 0x1D85 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x556E61626C6520746F2074616E736665722046756E6400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DFD PUSH1 0x16 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E08 DUP3 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E2C DUP2 PUSH2 0x1DF0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x7375636365737300000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E69 PUSH1 0x7 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E74 DUP3 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1E94 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1EA5 DUP2 PUSH2 0x1E5C JUMP JUMPDEST SWAP1 POP PUSH2 0x1EB4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x756E737563636573730000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF1 PUSH1 0x9 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFC DUP3 PUSH2 0x1EBB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F36 PUSH2 0x1F31 PUSH2 0x1F2C DUP5 PUSH2 0x1F07 JUMP JUMPDEST PUSH2 0x1F11 JUMP JUMPDEST PUSH2 0x12F6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F46 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1F61 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1F72 DUP2 PUSH2 0x1EE4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1F81 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1F3D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x796F7572206D617475726974792044617465206973206F766572000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBE PUSH1 0x1A DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FC9 DUP3 PUSH2 0x1F88 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FED DUP2 PUSH2 0x1FB1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FFF DUP3 PUSH2 0x1612 JUMP JUMPDEST SWAP2 POP PUSH1 0xFF DUP3 EQ ISZERO PUSH2 0x2013 JUMPI PUSH2 0x2012 PUSH2 0x1CC9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46616B6520416464726573730000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2054 PUSH1 0xC DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x205F DUP3 PUSH2 0x201E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2083 DUP2 PUSH2 0x2047 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2095 DUP3 PUSH2 0x12F6 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x20C8 JUMPI PUSH2 0x20C7 PUSH2 0x1CC9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x20E8 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x20F5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2132 PUSH1 0x1F DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x213D DUP3 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2161 DUP2 PUSH2 0x2125 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR 0xC8 0xC5 0x2E GAS 0x2E DUP7 0xD8 0x2F 0x5E BYTE PUSH7 0xC0F1FF4F12D2C7 ADDMOD PUSH18 0x86B9DAC81BB97ED651A02864736F6C634300 ADDMOD MULMOD STOP CALLER ","sourceMap":"274:3812:7:-:0;;;;;;;;;;;;;1716:1:0;1821:7;:22;;;;274:3812:7;;;;;;"},"deployedBytecode":{"functionDebugData":{"@InsuranceId_3011":{"entryPoint":4515,"id":3011,"parameterSlots":0,"returnSlots":0},"@_nonReentrantAfter_52":{"entryPoint":4661,"id":52,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_44":{"entryPoint":4581,"id":44,"parameterSlots":0,"returnSlots":0},"@claim_3298":{"entryPoint":560,"id":3298,"parameterSlots":5,"returnSlots":0},"@dataFromChainLink_3198":{"entryPoint":4521,"id":3198,"parameterSlots":1,"returnSlots":1},"@insuranceDetails_3039":{"entryPoint":3387,"id":3039,"parameterSlots":0,"returnSlots":0},"@insuranceRegister_3111":{"entryPoint":3931,"id":3111,"parameterSlots":1,"returnSlots":1},"@lastInstallmentPaidTimestump_3047":{"entryPoint":536,"id":3047,"parameterSlots":0,"returnSlots":0},"@paidInstallments_3043":{"entryPoint":2063,"id":3043,"parameterSlots":0,"returnSlots":0},"@payInstallment_3188":{"entryPoint":2095,"id":3188,"parameterSlots":2,"returnSlots":0},"@userInsurances_3052":{"entryPoint":4532,"id":3052,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":5303,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5068,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5450,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":7557,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":5369,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_insuranceData_$3034_memory_ptr":{"entryPoint":6195,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint16":{"entryPoint":6174,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4887,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":7049,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5705,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_bool":{"entryPoint":5471,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7578,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":6620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_struct$_insuranceData_$3034_memory_ptr":{"entryPoint":6547,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4908,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":7070,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5769,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6693,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack":{"entryPoint":7997,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754_to_t_string_memory_ptr_fromStack":{"entryPoint":8263,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_to_t_string_memory_ptr_fromStack":{"entryPoint":7772,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba_to_t_string_memory_ptr_fromStack":{"entryPoint":7664,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f_to_t_string_memory_ptr_fromStack":{"entryPoint":8113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e_to_t_string_memory_ptr_fromStack":{"entryPoint":7156,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90_to_t_string_memory_ptr_fromStack":{"entryPoint":7302,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":8485,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_to_t_string_memory_ptr_fromStack":{"entryPoint":7908,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49_to_t_string_memory_ptr_fromStack":{"entryPoint":6814,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":5934,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint16_to_t_uint16_fromStack_library":{"entryPoint":6993,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":4953,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack_library":{"entryPoint":6978,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":5663,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":7502,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint16__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint16__fromStack_reversed":{"entryPoint":5949,"id":null,"parameterSlots":12,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":6708,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8298,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7699,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8148,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7191,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7337,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8520,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6849,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":4968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":7807,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_t_rational_0_by_1__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":8012,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint16__to_t_uint256_t_uint16__fromStack_library_reversed":{"entryPoint":7008,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":8403,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":5678,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":5212,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":4834,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":5239,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5784,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5795,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7416,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5027,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5415,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_0_by_1":{"entryPoint":7943,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":5920,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4995,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4854,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":5650,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_0_by_1_to_t_uint256":{"entryPoint":7963,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":5288,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":5812,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6928,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":5163,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":7953,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":8330,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint8":{"entryPoint":8180,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7369,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6881,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5116,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":5089,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":6141,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":6146,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":5094,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":4849,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4844,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5099,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754":{"entryPoint":8222,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38":{"entryPoint":7731,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba":{"entryPoint":7623,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f":{"entryPoint":8072,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e":{"entryPoint":7115,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90":{"entryPoint":7223,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":8444,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133":{"entryPoint":7867,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49":{"entryPoint":6735,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5045,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":5427,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint16":{"entryPoint":6151,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4864,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:27741:8","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:8","statements":[{"nodeType":"YulAssignment","src":"57:19:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:8","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:8"},"nodeType":"YulFunctionCall","src":"67:9:8"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:8"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:8","type":""}],"src":"7:75:8"},{"body":{"nodeType":"YulBlock","src":"177:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:8"},"nodeType":"YulFunctionCall","src":"187:12:8"},"nodeType":"YulExpressionStatement","src":"187:12:8"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:8"},{"body":{"nodeType":"YulBlock","src":"300:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:8"},"nodeType":"YulFunctionCall","src":"310:12:8"},"nodeType":"YulExpressionStatement","src":"310:12:8"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:8"},{"body":{"nodeType":"YulBlock","src":"379:32:8","statements":[{"nodeType":"YulAssignment","src":"389:16:8","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:8"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:8","type":""}],"src":"334:77:8"},{"body":{"nodeType":"YulBlock","src":"460:79:8","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:8"},"nodeType":"YulFunctionCall","src":"519:12:8"},"nodeType":"YulExpressionStatement","src":"519:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:8"},"nodeType":"YulFunctionCall","src":"490:24:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:8"},"nodeType":"YulFunctionCall","src":"480:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:8"},"nodeType":"YulFunctionCall","src":"473:43:8"},"nodeType":"YulIf","src":"470:63:8"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:8","type":""}],"src":"417:122:8"},{"body":{"nodeType":"YulBlock","src":"597:87:8","statements":[{"nodeType":"YulAssignment","src":"607:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:8"},"nodeType":"YulFunctionCall","src":"616:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:8"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:8"},"nodeType":"YulFunctionCall","src":"645:33:8"},"nodeType":"YulExpressionStatement","src":"645:33:8"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:8","type":""}],"src":"545:139:8"},{"body":{"nodeType":"YulBlock","src":"756:263:8","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:8"},"nodeType":"YulFunctionCall","src":"804:79:8"},"nodeType":"YulExpressionStatement","src":"804:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:8"},"nodeType":"YulFunctionCall","src":"773:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:8"},"nodeType":"YulFunctionCall","src":"769:32:8"},"nodeType":"YulIf","src":"766:119:8"},{"nodeType":"YulBlock","src":"895:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:8","type":""}]},{"nodeType":"YulAssignment","src":"939:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:8"},"nodeType":"YulFunctionCall","src":"970:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"949:20:8"},"nodeType":"YulFunctionCall","src":"949:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:8","type":""}],"src":"690:329:8"},{"body":{"nodeType":"YulBlock","src":"1090:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1107:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1130:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1112:17:8"},"nodeType":"YulFunctionCall","src":"1112:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1100:6:8"},"nodeType":"YulFunctionCall","src":"1100:37:8"},"nodeType":"YulExpressionStatement","src":"1100:37:8"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1078:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1085:3:8","type":""}],"src":"1025:118:8"},{"body":{"nodeType":"YulBlock","src":"1247:124:8","statements":[{"nodeType":"YulAssignment","src":"1257:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1269:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"1280:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1265:3:8"},"nodeType":"YulFunctionCall","src":"1265:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1257:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1337:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1350:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"1361:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1346:3:8"},"nodeType":"YulFunctionCall","src":"1346:17:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1293:43:8"},"nodeType":"YulFunctionCall","src":"1293:71:8"},"nodeType":"YulExpressionStatement","src":"1293:71:8"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1219:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1231:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1242:4:8","type":""}],"src":"1149:222:8"},{"body":{"nodeType":"YulBlock","src":"1422:81:8","statements":[{"nodeType":"YulAssignment","src":"1432:65:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1447:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"1454:42:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1443:3:8"},"nodeType":"YulFunctionCall","src":"1443:54:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1432:7:8"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1404:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1414:7:8","type":""}],"src":"1377:126:8"},{"body":{"nodeType":"YulBlock","src":"1554:51:8","statements":[{"nodeType":"YulAssignment","src":"1564:35:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1593:5:8"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1575:17:8"},"nodeType":"YulFunctionCall","src":"1575:24:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1564:7:8"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1536:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1546:7:8","type":""}],"src":"1509:96:8"},{"body":{"nodeType":"YulBlock","src":"1654:79:8","statements":[{"body":{"nodeType":"YulBlock","src":"1711:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1720:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1723:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1713:6:8"},"nodeType":"YulFunctionCall","src":"1713:12:8"},"nodeType":"YulExpressionStatement","src":"1713:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1677:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1702:5:8"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1684:17:8"},"nodeType":"YulFunctionCall","src":"1684:24:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1674:2:8"},"nodeType":"YulFunctionCall","src":"1674:35:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1667:6:8"},"nodeType":"YulFunctionCall","src":"1667:43:8"},"nodeType":"YulIf","src":"1664:63:8"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1647:5:8","type":""}],"src":"1611:122:8"},{"body":{"nodeType":"YulBlock","src":"1791:87:8","statements":[{"nodeType":"YulAssignment","src":"1801:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1823:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1810:12:8"},"nodeType":"YulFunctionCall","src":"1810:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1801:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1866:5:8"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1839:26:8"},"nodeType":"YulFunctionCall","src":"1839:33:8"},"nodeType":"YulExpressionStatement","src":"1839:33:8"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"1777:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1785:5:8","type":""}],"src":"1739:139:8"},{"body":{"nodeType":"YulBlock","src":"1973:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1990:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1993:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1983:6:8"},"nodeType":"YulFunctionCall","src":"1983:12:8"},"nodeType":"YulExpressionStatement","src":"1983:12:8"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1884:117:8"},{"body":{"nodeType":"YulBlock","src":"2096:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2113:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2116:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2106:6:8"},"nodeType":"YulFunctionCall","src":"2106:12:8"},"nodeType":"YulExpressionStatement","src":"2106:12:8"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"2007:117:8"},{"body":{"nodeType":"YulBlock","src":"2178:54:8","statements":[{"nodeType":"YulAssignment","src":"2188:38:8","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2206:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"2213:2:8","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2202:3:8"},"nodeType":"YulFunctionCall","src":"2202:14:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2222:2:8","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2218:3:8"},"nodeType":"YulFunctionCall","src":"2218:7:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2198:3:8"},"nodeType":"YulFunctionCall","src":"2198:28:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2188:6:8"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2161:5:8","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2171:6:8","type":""}],"src":"2130:102:8"},{"body":{"nodeType":"YulBlock","src":"2266:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2283:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2286:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2276:6:8"},"nodeType":"YulFunctionCall","src":"2276:88:8"},"nodeType":"YulExpressionStatement","src":"2276:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2380:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:8","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2373:6:8"},"nodeType":"YulFunctionCall","src":"2373:15:8"},"nodeType":"YulExpressionStatement","src":"2373:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2404:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2407:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2397:6:8"},"nodeType":"YulFunctionCall","src":"2397:15:8"},"nodeType":"YulExpressionStatement","src":"2397:15:8"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2238:180:8"},{"body":{"nodeType":"YulBlock","src":"2467:238:8","statements":[{"nodeType":"YulVariableDeclaration","src":"2477:58:8","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2499:6:8"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2529:4:8"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2507:21:8"},"nodeType":"YulFunctionCall","src":"2507:27:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2495:3:8"},"nodeType":"YulFunctionCall","src":"2495:40:8"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2481:10:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"2646:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2648:16:8"},"nodeType":"YulFunctionCall","src":"2648:18:8"},"nodeType":"YulExpressionStatement","src":"2648:18:8"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2589:10:8"},{"kind":"number","nodeType":"YulLiteral","src":"2601:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2586:2:8"},"nodeType":"YulFunctionCall","src":"2586:34:8"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2625:10:8"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2637:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2622:2:8"},"nodeType":"YulFunctionCall","src":"2622:22:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2583:2:8"},"nodeType":"YulFunctionCall","src":"2583:62:8"},"nodeType":"YulIf","src":"2580:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2684:2:8","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2688:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2677:6:8"},"nodeType":"YulFunctionCall","src":"2677:22:8"},"nodeType":"YulExpressionStatement","src":"2677:22:8"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2453:6:8","type":""},{"name":"size","nodeType":"YulTypedName","src":"2461:4:8","type":""}],"src":"2424:281:8"},{"body":{"nodeType":"YulBlock","src":"2752:88:8","statements":[{"nodeType":"YulAssignment","src":"2762:30:8","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"2772:18:8"},"nodeType":"YulFunctionCall","src":"2772:20:8"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2762:6:8"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2821:6:8"},{"name":"size","nodeType":"YulIdentifier","src":"2829:4:8"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2801:19:8"},"nodeType":"YulFunctionCall","src":"2801:33:8"},"nodeType":"YulExpressionStatement","src":"2801:33:8"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2736:4:8","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2745:6:8","type":""}],"src":"2711:129:8"},{"body":{"nodeType":"YulBlock","src":"2913:241:8","statements":[{"body":{"nodeType":"YulBlock","src":"3018:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3020:16:8"},"nodeType":"YulFunctionCall","src":"3020:18:8"},"nodeType":"YulExpressionStatement","src":"3020:18:8"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2990:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"2998:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2987:2:8"},"nodeType":"YulFunctionCall","src":"2987:30:8"},"nodeType":"YulIf","src":"2984:56:8"},{"nodeType":"YulAssignment","src":"3050:37:8","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3080:6:8"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3058:21:8"},"nodeType":"YulFunctionCall","src":"3058:29:8"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3050:4:8"}]},{"nodeType":"YulAssignment","src":"3124:23:8","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3136:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"3142:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3132:3:8"},"nodeType":"YulFunctionCall","src":"3132:15:8"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3124:4:8"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2897:6:8","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2908:4:8","type":""}],"src":"2846:308:8"},{"body":{"nodeType":"YulBlock","src":"3211:103:8","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3234:3:8"},{"name":"src","nodeType":"YulIdentifier","src":"3239:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"3244:6:8"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3221:12:8"},"nodeType":"YulFunctionCall","src":"3221:30:8"},"nodeType":"YulExpressionStatement","src":"3221:30:8"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3292:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"3297:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3288:3:8"},"nodeType":"YulFunctionCall","src":"3288:16:8"},{"kind":"number","nodeType":"YulLiteral","src":"3306:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3281:6:8"},"nodeType":"YulFunctionCall","src":"3281:27:8"},"nodeType":"YulExpressionStatement","src":"3281:27:8"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3193:3:8","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3198:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"3203:6:8","type":""}],"src":"3160:154:8"},{"body":{"nodeType":"YulBlock","src":"3404:328:8","statements":[{"nodeType":"YulAssignment","src":"3414:75:8","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3481:6:8"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3439:41:8"},"nodeType":"YulFunctionCall","src":"3439:49:8"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3423:15:8"},"nodeType":"YulFunctionCall","src":"3423:66:8"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3414:5:8"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3505:5:8"},{"name":"length","nodeType":"YulIdentifier","src":"3512:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3498:6:8"},"nodeType":"YulFunctionCall","src":"3498:21:8"},"nodeType":"YulExpressionStatement","src":"3498:21:8"},{"nodeType":"YulVariableDeclaration","src":"3528:27:8","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3543:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"3550:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3539:3:8"},"nodeType":"YulFunctionCall","src":"3539:16:8"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3532:3:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"3593:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"3595:77:8"},"nodeType":"YulFunctionCall","src":"3595:79:8"},"nodeType":"YulExpressionStatement","src":"3595:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3574:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"3579:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3570:3:8"},"nodeType":"YulFunctionCall","src":"3570:16:8"},{"name":"end","nodeType":"YulIdentifier","src":"3588:3:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3567:2:8"},"nodeType":"YulFunctionCall","src":"3567:25:8"},"nodeType":"YulIf","src":"3564:112:8"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3709:3:8"},{"name":"dst","nodeType":"YulIdentifier","src":"3714:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"3719:6:8"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"3685:23:8"},"nodeType":"YulFunctionCall","src":"3685:41:8"},"nodeType":"YulExpressionStatement","src":"3685:41:8"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3377:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"3382:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"3390:3:8","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3398:5:8","type":""}],"src":"3320:412:8"},{"body":{"nodeType":"YulBlock","src":"3814:278:8","statements":[{"body":{"nodeType":"YulBlock","src":"3863:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3865:77:8"},"nodeType":"YulFunctionCall","src":"3865:79:8"},"nodeType":"YulExpressionStatement","src":"3865:79:8"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3842:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"3850:4:8","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3838:3:8"},"nodeType":"YulFunctionCall","src":"3838:17:8"},{"name":"end","nodeType":"YulIdentifier","src":"3857:3:8"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3834:3:8"},"nodeType":"YulFunctionCall","src":"3834:27:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3827:6:8"},"nodeType":"YulFunctionCall","src":"3827:35:8"},"nodeType":"YulIf","src":"3824:122:8"},{"nodeType":"YulVariableDeclaration","src":"3955:34:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3982:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3969:12:8"},"nodeType":"YulFunctionCall","src":"3969:20:8"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3959:6:8","type":""}]},{"nodeType":"YulAssignment","src":"3998:88:8","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4059:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"4067:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:8"},"nodeType":"YulFunctionCall","src":"4055:17:8"},{"name":"length","nodeType":"YulIdentifier","src":"4074:6:8"},{"name":"end","nodeType":"YulIdentifier","src":"4082:3:8"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4007:47:8"},"nodeType":"YulFunctionCall","src":"4007:79:8"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3998:5:8"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3792:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"3800:3:8","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3808:5:8","type":""}],"src":"3752:340:8"},{"body":{"nodeType":"YulBlock","src":"4140:48:8","statements":[{"nodeType":"YulAssignment","src":"4150:32:8","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4175:5:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4168:6:8"},"nodeType":"YulFunctionCall","src":"4168:13:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4161:6:8"},"nodeType":"YulFunctionCall","src":"4161:21:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4150:7:8"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4122:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4132:7:8","type":""}],"src":"4098:90:8"},{"body":{"nodeType":"YulBlock","src":"4234:76:8","statements":[{"body":{"nodeType":"YulBlock","src":"4288:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4297:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4300:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4290:6:8"},"nodeType":"YulFunctionCall","src":"4290:12:8"},"nodeType":"YulExpressionStatement","src":"4290:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4257:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4279:5:8"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"4264:14:8"},"nodeType":"YulFunctionCall","src":"4264:21:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4254:2:8"},"nodeType":"YulFunctionCall","src":"4254:32:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4247:6:8"},"nodeType":"YulFunctionCall","src":"4247:40:8"},"nodeType":"YulIf","src":"4244:60:8"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4227:5:8","type":""}],"src":"4194:116:8"},{"body":{"nodeType":"YulBlock","src":"4365:84:8","statements":[{"nodeType":"YulAssignment","src":"4375:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:8"},"nodeType":"YulFunctionCall","src":"4384:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4437:5:8"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"4413:23:8"},"nodeType":"YulFunctionCall","src":"4413:30:8"},"nodeType":"YulExpressionStatement","src":"4413:30:8"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:8","type":""}],"src":"4316:133:8"},{"body":{"nodeType":"YulBlock","src":"4606:1114:8","statements":[{"body":{"nodeType":"YulBlock","src":"4653:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4655:77:8"},"nodeType":"YulFunctionCall","src":"4655:79:8"},"nodeType":"YulExpressionStatement","src":"4655:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4627:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"4636:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4623:3:8"},"nodeType":"YulFunctionCall","src":"4623:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"4648:3:8","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4619:3:8"},"nodeType":"YulFunctionCall","src":"4619:33:8"},"nodeType":"YulIf","src":"4616:120:8"},{"nodeType":"YulBlock","src":"4746:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4761:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4775:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4765:6:8","type":""}]},{"nodeType":"YulAssignment","src":"4790:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4825:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"4836:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4821:3:8"},"nodeType":"YulFunctionCall","src":"4821:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4845:7:8"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4800:20:8"},"nodeType":"YulFunctionCall","src":"4800:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4790:6:8"}]}]},{"nodeType":"YulBlock","src":"4873:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4888:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"4902:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4892:6:8","type":""}]},{"nodeType":"YulAssignment","src":"4918:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4953:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"4964:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4949:3:8"},"nodeType":"YulFunctionCall","src":"4949:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4973:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4928:20:8"},"nodeType":"YulFunctionCall","src":"4928:53:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4918:6:8"}]}]},{"nodeType":"YulBlock","src":"5001:288:8","statements":[{"nodeType":"YulVariableDeclaration","src":"5016:46:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5047:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5058:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5043:3:8"},"nodeType":"YulFunctionCall","src":"5043:18:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5030:12:8"},"nodeType":"YulFunctionCall","src":"5030:32:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5020:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"5109:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5111:77:8"},"nodeType":"YulFunctionCall","src":"5111:79:8"},"nodeType":"YulExpressionStatement","src":"5111:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5081:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"5089:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5078:2:8"},"nodeType":"YulFunctionCall","src":"5078:30:8"},"nodeType":"YulIf","src":"5075:117:8"},{"nodeType":"YulAssignment","src":"5206:73:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5251:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"5262:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5247:3:8"},"nodeType":"YulFunctionCall","src":"5247:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5271:7:8"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5216:30:8"},"nodeType":"YulFunctionCall","src":"5216:63:8"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5206:6:8"}]}]},{"nodeType":"YulBlock","src":"5299:288:8","statements":[{"nodeType":"YulVariableDeclaration","src":"5314:46:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5345:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"5356:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5341:3:8"},"nodeType":"YulFunctionCall","src":"5341:18:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5328:12:8"},"nodeType":"YulFunctionCall","src":"5328:32:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5318:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"5407:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5409:77:8"},"nodeType":"YulFunctionCall","src":"5409:79:8"},"nodeType":"YulExpressionStatement","src":"5409:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5379:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"5387:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5376:2:8"},"nodeType":"YulFunctionCall","src":"5376:30:8"},"nodeType":"YulIf","src":"5373:117:8"},{"nodeType":"YulAssignment","src":"5504:73:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5549:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"5560:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5545:3:8"},"nodeType":"YulFunctionCall","src":"5545:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5569:7:8"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5514:30:8"},"nodeType":"YulFunctionCall","src":"5514:63:8"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5504:6:8"}]}]},{"nodeType":"YulBlock","src":"5597:116:8","statements":[{"nodeType":"YulVariableDeclaration","src":"5612:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"5626:3:8","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5616:6:8","type":""}]},{"nodeType":"YulAssignment","src":"5643:60:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5675:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"5686:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5671:3:8"},"nodeType":"YulFunctionCall","src":"5671:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5695:7:8"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"5653:17:8"},"nodeType":"YulFunctionCall","src":"5653:50:8"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5643:6:8"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4544:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4555:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4567:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4575:6:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4583:6:8","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4591:6:8","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4599:6:8","type":""}],"src":"4455:1265:8"},{"body":{"nodeType":"YulBlock","src":"5769:43:8","statements":[{"nodeType":"YulAssignment","src":"5779:27:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5794:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"5801:4:8","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5790:3:8"},"nodeType":"YulFunctionCall","src":"5790:16:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5779:7:8"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5751:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5761:7:8","type":""}],"src":"5726:86:8"},{"body":{"nodeType":"YulBlock","src":"5879:51:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5896:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5917:5:8"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"5901:15:8"},"nodeType":"YulFunctionCall","src":"5901:22:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5889:6:8"},"nodeType":"YulFunctionCall","src":"5889:35:8"},"nodeType":"YulExpressionStatement","src":"5889:35:8"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5867:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5874:3:8","type":""}],"src":"5818:112:8"},{"body":{"nodeType":"YulBlock","src":"6030:120:8","statements":[{"nodeType":"YulAssignment","src":"6040:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6052:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6063:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6048:3:8"},"nodeType":"YulFunctionCall","src":"6048:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6040:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6116:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6129:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"6140:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6125:3:8"},"nodeType":"YulFunctionCall","src":"6125:17:8"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"6076:39:8"},"nodeType":"YulFunctionCall","src":"6076:67:8"},"nodeType":"YulExpressionStatement","src":"6076:67:8"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6002:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6014:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6025:4:8","type":""}],"src":"5936:214:8"},{"body":{"nodeType":"YulBlock","src":"6239:391:8","statements":[{"body":{"nodeType":"YulBlock","src":"6285:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6287:77:8"},"nodeType":"YulFunctionCall","src":"6287:79:8"},"nodeType":"YulExpressionStatement","src":"6287:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6260:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"6269:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6256:3:8"},"nodeType":"YulFunctionCall","src":"6256:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"6281:2:8","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6252:3:8"},"nodeType":"YulFunctionCall","src":"6252:32:8"},"nodeType":"YulIf","src":"6249:119:8"},{"nodeType":"YulBlock","src":"6378:117:8","statements":[{"nodeType":"YulVariableDeclaration","src":"6393:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"6407:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6397:6:8","type":""}]},{"nodeType":"YulAssignment","src":"6422:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6457:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"6468:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6453:3:8"},"nodeType":"YulFunctionCall","src":"6453:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6477:7:8"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6432:20:8"},"nodeType":"YulFunctionCall","src":"6432:53:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6422:6:8"}]}]},{"nodeType":"YulBlock","src":"6505:118:8","statements":[{"nodeType":"YulVariableDeclaration","src":"6520:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"6534:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6524:6:8","type":""}]},{"nodeType":"YulAssignment","src":"6550:63:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6585:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"6596:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6581:3:8"},"nodeType":"YulFunctionCall","src":"6581:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6605:7:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6560:20:8"},"nodeType":"YulFunctionCall","src":"6560:53:8"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6550:6:8"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6201:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6212:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6224:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6232:6:8","type":""}],"src":"6156:474:8"},{"body":{"nodeType":"YulBlock","src":"6701:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6718:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6741:5:8"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6723:17:8"},"nodeType":"YulFunctionCall","src":"6723:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6711:6:8"},"nodeType":"YulFunctionCall","src":"6711:37:8"},"nodeType":"YulExpressionStatement","src":"6711:37:8"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6689:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6696:3:8","type":""}],"src":"6636:118:8"},{"body":{"nodeType":"YulBlock","src":"6819:40:8","statements":[{"nodeType":"YulAssignment","src":"6830:22:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6846:5:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6840:5:8"},"nodeType":"YulFunctionCall","src":"6840:12:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6830:6:8"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6802:5:8","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6812:6:8","type":""}],"src":"6760:99:8"},{"body":{"nodeType":"YulBlock","src":"6961:73:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6978:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"6983:6:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6971:6:8"},"nodeType":"YulFunctionCall","src":"6971:19:8"},"nodeType":"YulExpressionStatement","src":"6971:19:8"},{"nodeType":"YulAssignment","src":"6999:29:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7018:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"7023:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7014:3:8"},"nodeType":"YulFunctionCall","src":"7014:14:8"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6999:11:8"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6933:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"6938:6:8","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6949:11:8","type":""}],"src":"6865:169:8"},{"body":{"nodeType":"YulBlock","src":"7089:258:8","statements":[{"nodeType":"YulVariableDeclaration","src":"7099:10:8","value":{"kind":"number","nodeType":"YulLiteral","src":"7108:1:8","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7103:1:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"7168:63:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7193:3:8"},{"name":"i","nodeType":"YulIdentifier","src":"7198:1:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7189:3:8"},"nodeType":"YulFunctionCall","src":"7189:11:8"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7212:3:8"},{"name":"i","nodeType":"YulIdentifier","src":"7217:1:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7208:3:8"},"nodeType":"YulFunctionCall","src":"7208:11:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7202:5:8"},"nodeType":"YulFunctionCall","src":"7202:18:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7182:6:8"},"nodeType":"YulFunctionCall","src":"7182:39:8"},"nodeType":"YulExpressionStatement","src":"7182:39:8"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7129:1:8"},{"name":"length","nodeType":"YulIdentifier","src":"7132:6:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7126:2:8"},"nodeType":"YulFunctionCall","src":"7126:13:8"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7140:19:8","statements":[{"nodeType":"YulAssignment","src":"7142:15:8","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7151:1:8"},{"kind":"number","nodeType":"YulLiteral","src":"7154:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7147:3:8"},"nodeType":"YulFunctionCall","src":"7147:10:8"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7142:1:8"}]}]},"pre":{"nodeType":"YulBlock","src":"7122:3:8","statements":[]},"src":"7118:113:8"},{"body":{"nodeType":"YulBlock","src":"7265:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7315:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"7320:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7311:3:8"},"nodeType":"YulFunctionCall","src":"7311:16:8"},{"kind":"number","nodeType":"YulLiteral","src":"7329:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7304:6:8"},"nodeType":"YulFunctionCall","src":"7304:27:8"},"nodeType":"YulExpressionStatement","src":"7304:27:8"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7246:1:8"},{"name":"length","nodeType":"YulIdentifier","src":"7249:6:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7243:2:8"},"nodeType":"YulFunctionCall","src":"7243:13:8"},"nodeType":"YulIf","src":"7240:101:8"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7071:3:8","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7076:3:8","type":""},{"name":"length","nodeType":"YulTypedName","src":"7081:6:8","type":""}],"src":"7040:307:8"},{"body":{"nodeType":"YulBlock","src":"7445:272:8","statements":[{"nodeType":"YulVariableDeclaration","src":"7455:53:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7502:5:8"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7469:32:8"},"nodeType":"YulFunctionCall","src":"7469:39:8"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7459:6:8","type":""}]},{"nodeType":"YulAssignment","src":"7517:78:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7583:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"7588:6:8"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7524:58:8"},"nodeType":"YulFunctionCall","src":"7524:71:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7517:3:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7630:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"7637:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7626:3:8"},"nodeType":"YulFunctionCall","src":"7626:16:8"},{"name":"pos","nodeType":"YulIdentifier","src":"7644:3:8"},{"name":"length","nodeType":"YulIdentifier","src":"7649:6:8"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7604:21:8"},"nodeType":"YulFunctionCall","src":"7604:52:8"},"nodeType":"YulExpressionStatement","src":"7604:52:8"},{"nodeType":"YulAssignment","src":"7665:46:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7676:3:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7703:6:8"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7681:21:8"},"nodeType":"YulFunctionCall","src":"7681:29:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7672:3:8"},"nodeType":"YulFunctionCall","src":"7672:39:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7665:3:8"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7426:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7433:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7441:3:8","type":""}],"src":"7353:364:8"},{"body":{"nodeType":"YulBlock","src":"7767:45:8","statements":[{"nodeType":"YulAssignment","src":"7777:29:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7792:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"7799:6:8","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7788:3:8"},"nodeType":"YulFunctionCall","src":"7788:18:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7777:7:8"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7749:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7759:7:8","type":""}],"src":"7723:89:8"},{"body":{"nodeType":"YulBlock","src":"7881:52:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7898:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7920:5:8"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"7903:16:8"},"nodeType":"YulFunctionCall","src":"7903:23:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7891:6:8"},"nodeType":"YulFunctionCall","src":"7891:36:8"},"nodeType":"YulExpressionStatement","src":"7891:36:8"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7869:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7876:3:8","type":""}],"src":"7818:115:8"},{"body":{"nodeType":"YulBlock","src":"8376:1164:8","statements":[{"nodeType":"YulAssignment","src":"8386:27:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8398:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8409:3:8","type":"","value":"352"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8394:3:8"},"nodeType":"YulFunctionCall","src":"8394:19:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8386:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8467:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8480:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8491:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8476:3:8"},"nodeType":"YulFunctionCall","src":"8476:17:8"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8423:43:8"},"nodeType":"YulFunctionCall","src":"8423:71:8"},"nodeType":"YulExpressionStatement","src":"8423:71:8"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8548:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8561:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8572:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8557:3:8"},"nodeType":"YulFunctionCall","src":"8557:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8504:43:8"},"nodeType":"YulFunctionCall","src":"8504:72:8"},"nodeType":"YulExpressionStatement","src":"8504:72:8"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8630:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8643:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8654:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8639:3:8"},"nodeType":"YulFunctionCall","src":"8639:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8586:43:8"},"nodeType":"YulFunctionCall","src":"8586:72:8"},"nodeType":"YulExpressionStatement","src":"8586:72:8"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8712:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8725:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8736:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8721:3:8"},"nodeType":"YulFunctionCall","src":"8721:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8668:43:8"},"nodeType":"YulFunctionCall","src":"8668:72:8"},"nodeType":"YulExpressionStatement","src":"8668:72:8"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8794:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8807:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8818:3:8","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8803:3:8"},"nodeType":"YulFunctionCall","src":"8803:19:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8750:43:8"},"nodeType":"YulFunctionCall","src":"8750:73:8"},"nodeType":"YulExpressionStatement","src":"8750:73:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8844:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"8855:3:8","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8840:3:8"},"nodeType":"YulFunctionCall","src":"8840:19:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8865:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"8871:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8861:3:8"},"nodeType":"YulFunctionCall","src":"8861:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8833:6:8"},"nodeType":"YulFunctionCall","src":"8833:49:8"},"nodeType":"YulExpressionStatement","src":"8833:49:8"},{"nodeType":"YulAssignment","src":"8891:86:8","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"8963:6:8"},{"name":"tail","nodeType":"YulIdentifier","src":"8972:4:8"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8899:63:8"},"nodeType":"YulFunctionCall","src":"8899:78:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8891:4:8"}]},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"9031:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9044:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"9055:3:8","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9040:3:8"},"nodeType":"YulFunctionCall","src":"9040:19:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8987:43:8"},"nodeType":"YulFunctionCall","src":"8987:73:8"},"nodeType":"YulExpressionStatement","src":"8987:73:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9081:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"9092:3:8","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9077:3:8"},"nodeType":"YulFunctionCall","src":"9077:19:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9102:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"9108:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9098:3:8"},"nodeType":"YulFunctionCall","src":"9098:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9070:6:8"},"nodeType":"YulFunctionCall","src":"9070:49:8"},"nodeType":"YulExpressionStatement","src":"9070:49:8"},{"nodeType":"YulAssignment","src":"9128:86:8","value":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"9200:6:8"},{"name":"tail","nodeType":"YulIdentifier","src":"9209:4:8"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9136:63:8"},"nodeType":"YulFunctionCall","src":"9136:78:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9128:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9235:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"9246:3:8","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9231:3:8"},"nodeType":"YulFunctionCall","src":"9231:19:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9256:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"9262:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9252:3:8"},"nodeType":"YulFunctionCall","src":"9252:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9224:6:8"},"nodeType":"YulFunctionCall","src":"9224:49:8"},"nodeType":"YulExpressionStatement","src":"9224:49:8"},{"nodeType":"YulAssignment","src":"9282:86:8","value":{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"9354:6:8"},{"name":"tail","nodeType":"YulIdentifier","src":"9363:4:8"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9290:63:8"},"nodeType":"YulFunctionCall","src":"9290:78:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9282:4:8"}]},{"expression":{"arguments":[{"name":"value9","nodeType":"YulIdentifier","src":"9422:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9435:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"9446:3:8","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9431:3:8"},"nodeType":"YulFunctionCall","src":"9431:19:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"9378:43:8"},"nodeType":"YulFunctionCall","src":"9378:73:8"},"nodeType":"YulExpressionStatement","src":"9378:73:8"},{"expression":{"arguments":[{"name":"value10","nodeType":"YulIdentifier","src":"9503:7:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9517:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"9528:3:8","type":"","value":"320"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9513:3:8"},"nodeType":"YulFunctionCall","src":"9513:19:8"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"9461:41:8"},"nodeType":"YulFunctionCall","src":"9461:72:8"},"nodeType":"YulExpressionStatement","src":"9461:72:8"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint16__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8267:9:8","type":""},{"name":"value10","nodeType":"YulTypedName","src":"8279:7:8","type":""},{"name":"value9","nodeType":"YulTypedName","src":"8288:6:8","type":""},{"name":"value8","nodeType":"YulTypedName","src":"8296:6:8","type":""},{"name":"value7","nodeType":"YulTypedName","src":"8304:6:8","type":""},{"name":"value6","nodeType":"YulTypedName","src":"8312:6:8","type":""},{"name":"value5","nodeType":"YulTypedName","src":"8320:6:8","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8328:6:8","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8336:6:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8344:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8352:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8360:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8371:4:8","type":""}],"src":"7939:1601:8"},{"body":{"nodeType":"YulBlock","src":"9635:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9652:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9655:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9645:6:8"},"nodeType":"YulFunctionCall","src":"9645:12:8"},"nodeType":"YulExpressionStatement","src":"9645:12:8"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"9546:117:8"},{"body":{"nodeType":"YulBlock","src":"9758:28:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9775:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9778:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9768:6:8"},"nodeType":"YulFunctionCall","src":"9768:12:8"},"nodeType":"YulExpressionStatement","src":"9768:12:8"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"9669:117:8"},{"body":{"nodeType":"YulBlock","src":"9834:78:8","statements":[{"body":{"nodeType":"YulBlock","src":"9890:16:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9899:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9902:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9892:6:8"},"nodeType":"YulFunctionCall","src":"9892:12:8"},"nodeType":"YulExpressionStatement","src":"9892:12:8"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9857:5:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9881:5:8"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"9864:16:8"},"nodeType":"YulFunctionCall","src":"9864:23:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9854:2:8"},"nodeType":"YulFunctionCall","src":"9854:34:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9847:6:8"},"nodeType":"YulFunctionCall","src":"9847:42:8"},"nodeType":"YulIf","src":"9844:62:8"}]},"name":"validator_revert_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9827:5:8","type":""}],"src":"9792:120:8"},{"body":{"nodeType":"YulBlock","src":"9969:86:8","statements":[{"nodeType":"YulAssignment","src":"9979:29:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10001:6:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9988:12:8"},"nodeType":"YulFunctionCall","src":"9988:20:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9979:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10043:5:8"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"10017:25:8"},"nodeType":"YulFunctionCall","src":"10017:32:8"},"nodeType":"YulExpressionStatement","src":"10017:32:8"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9947:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"9955:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9963:5:8","type":""}],"src":"9918:137:8"},{"body":{"nodeType":"YulBlock","src":"10194:2533:8","statements":[{"body":{"nodeType":"YulBlock","src":"10240:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"10242:77:8"},"nodeType":"YulFunctionCall","src":"10242:79:8"},"nodeType":"YulExpressionStatement","src":"10242:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"10215:3:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"10220:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10211:3:8"},"nodeType":"YulFunctionCall","src":"10211:19:8"},{"kind":"number","nodeType":"YulLiteral","src":"10232:6:8","type":"","value":"0x0160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10207:3:8"},"nodeType":"YulFunctionCall","src":"10207:32:8"},"nodeType":"YulIf","src":"10204:119:8"},{"nodeType":"YulAssignment","src":"10332:32:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10357:6:8","type":"","value":"0x0160"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"10341:15:8"},"nodeType":"YulFunctionCall","src":"10341:23:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10332:5:8"}]},{"nodeType":"YulBlock","src":"10374:163:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10422:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10436:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10426:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10462:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"10469:4:8","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10458:3:8"},"nodeType":"YulFunctionCall","src":"10458:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10501:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10512:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10497:3:8"},"nodeType":"YulFunctionCall","src":"10497:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"10521:3:8"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10476:20:8"},"nodeType":"YulFunctionCall","src":"10476:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10451:6:8"},"nodeType":"YulFunctionCall","src":"10451:75:8"},"nodeType":"YulExpressionStatement","src":"10451:75:8"}]},{"nodeType":"YulBlock","src":"10547:156:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10587:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10601:2:8","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10591:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10628:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"10635:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10624:3:8"},"nodeType":"YulFunctionCall","src":"10624:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10667:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10678:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10663:3:8"},"nodeType":"YulFunctionCall","src":"10663:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"10687:3:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10642:20:8"},"nodeType":"YulFunctionCall","src":"10642:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10617:6:8"},"nodeType":"YulFunctionCall","src":"10617:75:8"},"nodeType":"YulExpressionStatement","src":"10617:75:8"}]},{"nodeType":"YulBlock","src":"10713:159:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10756:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10770:2:8","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10760:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10797:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"10804:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10793:3:8"},"nodeType":"YulFunctionCall","src":"10793:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10836:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"10847:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10832:3:8"},"nodeType":"YulFunctionCall","src":"10832:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"10856:3:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10811:20:8"},"nodeType":"YulFunctionCall","src":"10811:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10786:6:8"},"nodeType":"YulFunctionCall","src":"10786:75:8"},"nodeType":"YulExpressionStatement","src":"10786:75:8"}]},{"nodeType":"YulBlock","src":"10882:157:8","statements":[{"nodeType":"YulVariableDeclaration","src":"10923:16:8","value":{"kind":"number","nodeType":"YulLiteral","src":"10937:2:8","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10927:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10964:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"10971:4:8","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10960:3:8"},"nodeType":"YulFunctionCall","src":"10960:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11003:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"11014:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10999:3:8"},"nodeType":"YulFunctionCall","src":"10999:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"11023:3:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10978:20:8"},"nodeType":"YulFunctionCall","src":"10978:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10953:6:8"},"nodeType":"YulFunctionCall","src":"10953:75:8"},"nodeType":"YulExpressionStatement","src":"10953:75:8"}]},{"nodeType":"YulBlock","src":"11049:158:8","statements":[{"nodeType":"YulVariableDeclaration","src":"11090:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"11104:3:8","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11094:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11132:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"11139:4:8","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11128:3:8"},"nodeType":"YulFunctionCall","src":"11128:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11171:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"11182:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11167:3:8"},"nodeType":"YulFunctionCall","src":"11167:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"11191:3:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11146:20:8"},"nodeType":"YulFunctionCall","src":"11146:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11121:6:8"},"nodeType":"YulFunctionCall","src":"11121:75:8"},"nodeType":"YulExpressionStatement","src":"11121:75:8"}]},{"nodeType":"YulBlock","src":"11217:327:8","statements":[{"nodeType":"YulVariableDeclaration","src":"11257:47:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11288:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"11299:3:8","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11284:3:8"},"nodeType":"YulFunctionCall","src":"11284:19:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11271:12:8"},"nodeType":"YulFunctionCall","src":"11271:33:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11261:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"11351:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulIdentifier","src":"11353:77:8"},"nodeType":"YulFunctionCall","src":"11353:79:8"},"nodeType":"YulExpressionStatement","src":"11353:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11323:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"11331:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11320:2:8"},"nodeType":"YulFunctionCall","src":"11320:30:8"},"nodeType":"YulIf","src":"11317:117:8"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11459:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"11466:4:8","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11455:3:8"},"nodeType":"YulFunctionCall","src":"11455:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11508:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"11519:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11504:3:8"},"nodeType":"YulFunctionCall","src":"11504:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"11528:3:8"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11473:30:8"},"nodeType":"YulFunctionCall","src":"11473:59:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11448:6:8"},"nodeType":"YulFunctionCall","src":"11448:85:8"},"nodeType":"YulExpressionStatement","src":"11448:85:8"}]},{"nodeType":"YulBlock","src":"11554:160:8","statements":[{"nodeType":"YulVariableDeclaration","src":"11597:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"11611:3:8","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11601:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11639:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"11646:4:8","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11635:3:8"},"nodeType":"YulFunctionCall","src":"11635:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11678:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"11689:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11674:3:8"},"nodeType":"YulFunctionCall","src":"11674:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"11698:3:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11653:20:8"},"nodeType":"YulFunctionCall","src":"11653:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11628:6:8"},"nodeType":"YulFunctionCall","src":"11628:75:8"},"nodeType":"YulExpressionStatement","src":"11628:75:8"}]},{"nodeType":"YulBlock","src":"11724:323:8","statements":[{"nodeType":"YulVariableDeclaration","src":"11760:47:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11791:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"11802:3:8","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11787:3:8"},"nodeType":"YulFunctionCall","src":"11787:19:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11774:12:8"},"nodeType":"YulFunctionCall","src":"11774:33:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11764:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"11854:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulIdentifier","src":"11856:77:8"},"nodeType":"YulFunctionCall","src":"11856:79:8"},"nodeType":"YulExpressionStatement","src":"11856:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11826:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"11834:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11823:2:8"},"nodeType":"YulFunctionCall","src":"11823:30:8"},"nodeType":"YulIf","src":"11820:117:8"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11962:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"11969:4:8","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11958:3:8"},"nodeType":"YulFunctionCall","src":"11958:16:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12011:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"12022:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12007:3:8"},"nodeType":"YulFunctionCall","src":"12007:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"12031:3:8"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11976:30:8"},"nodeType":"YulFunctionCall","src":"11976:59:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11951:6:8"},"nodeType":"YulFunctionCall","src":"11951:85:8"},"nodeType":"YulExpressionStatement","src":"11951:85:8"}]},{"nodeType":"YulBlock","src":"12057:331:8","statements":[{"nodeType":"YulVariableDeclaration","src":"12099:47:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12130:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"12141:3:8","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12126:3:8"},"nodeType":"YulFunctionCall","src":"12126:19:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12113:12:8"},"nodeType":"YulFunctionCall","src":"12113:33:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12103:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"12193:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulIdentifier","src":"12195:77:8"},"nodeType":"YulFunctionCall","src":"12195:79:8"},"nodeType":"YulExpressionStatement","src":"12195:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12165:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"12173:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12162:2:8"},"nodeType":"YulFunctionCall","src":"12162:30:8"},"nodeType":"YulIf","src":"12159:117:8"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12301:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"12308:6:8","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12297:3:8"},"nodeType":"YulFunctionCall","src":"12297:18:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12352:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"12363:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12348:3:8"},"nodeType":"YulFunctionCall","src":"12348:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"12372:3:8"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"12317:30:8"},"nodeType":"YulFunctionCall","src":"12317:59:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12290:6:8"},"nodeType":"YulFunctionCall","src":"12290:87:8"},"nodeType":"YulExpressionStatement","src":"12290:87:8"}]},{"nodeType":"YulBlock","src":"12398:156:8","statements":[{"nodeType":"YulVariableDeclaration","src":"12435:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"12449:3:8","type":"","value":"288"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12439:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12477:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"12484:6:8","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12473:3:8"},"nodeType":"YulFunctionCall","src":"12473:18:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12518:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"12529:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12514:3:8"},"nodeType":"YulFunctionCall","src":"12514:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"12538:3:8"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12493:20:8"},"nodeType":"YulFunctionCall","src":"12493:49:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12466:6:8"},"nodeType":"YulFunctionCall","src":"12466:77:8"},"nodeType":"YulExpressionStatement","src":"12466:77:8"}]},{"nodeType":"YulBlock","src":"12564:156:8","statements":[{"nodeType":"YulVariableDeclaration","src":"12602:17:8","value":{"kind":"number","nodeType":"YulLiteral","src":"12616:3:8","type":"","value":"320"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12606:6:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12644:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"12651:6:8","type":"","value":"0x0140"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12640:3:8"},"nodeType":"YulFunctionCall","src":"12640:18:8"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12684:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"12695:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12680:3:8"},"nodeType":"YulFunctionCall","src":"12680:22:8"},{"name":"end","nodeType":"YulIdentifier","src":"12704:3:8"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"12660:19:8"},"nodeType":"YulFunctionCall","src":"12660:48:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12633:6:8"},"nodeType":"YulFunctionCall","src":"12633:76:8"},"nodeType":"YulExpressionStatement","src":"12633:76:8"}]}]},"name":"abi_decode_t_struct$_insuranceData_$3034_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10169:9:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"10180:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10188:5:8","type":""}],"src":"10108:2619:8"},{"body":{"nodeType":"YulBlock","src":"12830:454:8","statements":[{"body":{"nodeType":"YulBlock","src":"12876:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12878:77:8"},"nodeType":"YulFunctionCall","src":"12878:79:8"},"nodeType":"YulExpressionStatement","src":"12878:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12851:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12847:3:8"},"nodeType":"YulFunctionCall","src":"12847:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"12872:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12843:3:8"},"nodeType":"YulFunctionCall","src":"12843:32:8"},"nodeType":"YulIf","src":"12840:119:8"},{"nodeType":"YulBlock","src":"12969:308:8","statements":[{"nodeType":"YulVariableDeclaration","src":"12984:45:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13015:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"13026:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13011:3:8"},"nodeType":"YulFunctionCall","src":"13011:17:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12998:12:8"},"nodeType":"YulFunctionCall","src":"12998:31:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12988:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"13076:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"13078:77:8"},"nodeType":"YulFunctionCall","src":"13078:79:8"},"nodeType":"YulExpressionStatement","src":"13078:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13048:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"13056:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13045:2:8"},"nodeType":"YulFunctionCall","src":"13045:30:8"},"nodeType":"YulIf","src":"13042:117:8"},{"nodeType":"YulAssignment","src":"13173:94:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13239:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"13250:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13235:3:8"},"nodeType":"YulFunctionCall","src":"13235:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13259:7:8"}],"functionName":{"name":"abi_decode_t_struct$_insuranceData_$3034_memory_ptr","nodeType":"YulIdentifier","src":"13183:51:8"},"nodeType":"YulFunctionCall","src":"13183:84:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13173:6:8"}]}]}]},"name":"abi_decode_tuple_t_struct$_insuranceData_$3034_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12800:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12811:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12823:6:8","type":""}],"src":"12733:551:8"},{"body":{"nodeType":"YulBlock","src":"13366:433:8","statements":[{"body":{"nodeType":"YulBlock","src":"13412:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13414:77:8"},"nodeType":"YulFunctionCall","src":"13414:79:8"},"nodeType":"YulExpressionStatement","src":"13414:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13387:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"13396:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13383:3:8"},"nodeType":"YulFunctionCall","src":"13383:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"13408:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13379:3:8"},"nodeType":"YulFunctionCall","src":"13379:32:8"},"nodeType":"YulIf","src":"13376:119:8"},{"nodeType":"YulBlock","src":"13505:287:8","statements":[{"nodeType":"YulVariableDeclaration","src":"13520:45:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13551:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"13562:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13547:3:8"},"nodeType":"YulFunctionCall","src":"13547:17:8"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13534:12:8"},"nodeType":"YulFunctionCall","src":"13534:31:8"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13524:6:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"13612:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"13614:77:8"},"nodeType":"YulFunctionCall","src":"13614:79:8"},"nodeType":"YulExpressionStatement","src":"13614:79:8"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13584:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"13592:18:8","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13581:2:8"},"nodeType":"YulFunctionCall","src":"13581:30:8"},"nodeType":"YulIf","src":"13578:117:8"},{"nodeType":"YulAssignment","src":"13709:73:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13754:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"13765:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13750:3:8"},"nodeType":"YulFunctionCall","src":"13750:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13774:7:8"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"13719:30:8"},"nodeType":"YulFunctionCall","src":"13719:63:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13709:6:8"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13336:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13347:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13359:6:8","type":""}],"src":"13290:509:8"},{"body":{"nodeType":"YulBlock","src":"13864:50:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13881:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13901:5:8"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13886:14:8"},"nodeType":"YulFunctionCall","src":"13886:21:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13874:6:8"},"nodeType":"YulFunctionCall","src":"13874:34:8"},"nodeType":"YulExpressionStatement","src":"13874:34:8"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13852:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13859:3:8","type":""}],"src":"13805:109:8"},{"body":{"nodeType":"YulBlock","src":"14012:118:8","statements":[{"nodeType":"YulAssignment","src":"14022:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14034:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"14045:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14030:3:8"},"nodeType":"YulFunctionCall","src":"14030:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14022:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14096:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14109:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"14120:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14105:3:8"},"nodeType":"YulFunctionCall","src":"14105:17:8"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"14058:37:8"},"nodeType":"YulFunctionCall","src":"14058:65:8"},"nodeType":"YulExpressionStatement","src":"14058:65:8"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13984:9:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13996:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14007:4:8","type":""}],"src":"13920:210:8"},{"body":{"nodeType":"YulBlock","src":"14242:116:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14264:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"14272:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14260:3:8"},"nodeType":"YulFunctionCall","src":"14260:14:8"},{"hexValue":"596f752061726520636c61696d696e672061742077726f6e672074696d657374","kind":"string","nodeType":"YulLiteral","src":"14276:34:8","type":"","value":"You are claiming at wrong timest"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14253:6:8"},"nodeType":"YulFunctionCall","src":"14253:58:8"},"nodeType":"YulExpressionStatement","src":"14253:58:8"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14332:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"14340:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14328:3:8"},"nodeType":"YulFunctionCall","src":"14328:15:8"},{"hexValue":"616d70","kind":"string","nodeType":"YulLiteral","src":"14345:5:8","type":"","value":"amp"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14321:6:8"},"nodeType":"YulFunctionCall","src":"14321:30:8"},"nodeType":"YulExpressionStatement","src":"14321:30:8"}]},"name":"store_literal_in_memory_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14234:6:8","type":""}],"src":"14136:222:8"},{"body":{"nodeType":"YulBlock","src":"14510:220:8","statements":[{"nodeType":"YulAssignment","src":"14520:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14586:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"14591:2:8","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14527:58:8"},"nodeType":"YulFunctionCall","src":"14527:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14520:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14692:3:8"}],"functionName":{"name":"store_literal_in_memory_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49","nodeType":"YulIdentifier","src":"14603:88:8"},"nodeType":"YulFunctionCall","src":"14603:93:8"},"nodeType":"YulExpressionStatement","src":"14603:93:8"},{"nodeType":"YulAssignment","src":"14705:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14716:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"14721:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14712:3:8"},"nodeType":"YulFunctionCall","src":"14712:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14705:3:8"}]}]},"name":"abi_encode_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14498:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14506:3:8","type":""}],"src":"14364:366:8"},{"body":{"nodeType":"YulBlock","src":"14907:248:8","statements":[{"nodeType":"YulAssignment","src":"14917:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14929:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"14940:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14925:3:8"},"nodeType":"YulFunctionCall","src":"14925:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14964:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"14975:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14960:3:8"},"nodeType":"YulFunctionCall","src":"14960:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14983:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"14989:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14979:3:8"},"nodeType":"YulFunctionCall","src":"14979:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14953:6:8"},"nodeType":"YulFunctionCall","src":"14953:47:8"},"nodeType":"YulExpressionStatement","src":"14953:47:8"},{"nodeType":"YulAssignment","src":"15009:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15143:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15017:124:8"},"nodeType":"YulFunctionCall","src":"15017:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15009:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14887:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14902:4:8","type":""}],"src":"14736:419:8"},{"body":{"nodeType":"YulBlock","src":"15189:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15206:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15209:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15199:6:8"},"nodeType":"YulFunctionCall","src":"15199:88:8"},"nodeType":"YulExpressionStatement","src":"15199:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15303:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15306:4:8","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15296:6:8"},"nodeType":"YulFunctionCall","src":"15296:15:8"},"nodeType":"YulExpressionStatement","src":"15296:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15327:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15330:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15320:6:8"},"nodeType":"YulFunctionCall","src":"15320:15:8"},"nodeType":"YulExpressionStatement","src":"15320:15:8"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"15161:180:8"},{"body":{"nodeType":"YulBlock","src":"15398:269:8","statements":[{"nodeType":"YulAssignment","src":"15408:22:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15422:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"15428:1:8","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15418:3:8"},"nodeType":"YulFunctionCall","src":"15418:12:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15408:6:8"}]},{"nodeType":"YulVariableDeclaration","src":"15439:38:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15469:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"15475:1:8","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15465:3:8"},"nodeType":"YulFunctionCall","src":"15465:12:8"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"15443:18:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"15516:51:8","statements":[{"nodeType":"YulAssignment","src":"15530:27:8","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15544:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"15552:4:8","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15540:3:8"},"nodeType":"YulFunctionCall","src":"15540:17:8"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15530:6:8"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15496:18:8"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15489:6:8"},"nodeType":"YulFunctionCall","src":"15489:26:8"},"nodeType":"YulIf","src":"15486:81:8"},{"body":{"nodeType":"YulBlock","src":"15619:42:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"15633:16:8"},"nodeType":"YulFunctionCall","src":"15633:18:8"},"nodeType":"YulExpressionStatement","src":"15633:18:8"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15583:18:8"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15606:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"15614:2:8","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15603:2:8"},"nodeType":"YulFunctionCall","src":"15603:14:8"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15580:2:8"},"nodeType":"YulFunctionCall","src":"15580:38:8"},"nodeType":"YulIf","src":"15577:84:8"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15382:4:8","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15391:6:8","type":""}],"src":"15347:320:8"},{"body":{"nodeType":"YulBlock","src":"15746:53:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15763:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15786:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15768:17:8"},"nodeType":"YulFunctionCall","src":"15768:24:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15756:6:8"},"nodeType":"YulFunctionCall","src":"15756:37:8"},"nodeType":"YulExpressionStatement","src":"15756:37:8"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15734:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15741:3:8","type":""}],"src":"15673:126:8"},{"body":{"nodeType":"YulBlock","src":"15876:52:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15893:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15915:5:8"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"15898:16:8"},"nodeType":"YulFunctionCall","src":"15898:23:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15886:6:8"},"nodeType":"YulFunctionCall","src":"15886:36:8"},"nodeType":"YulExpressionStatement","src":"15886:36:8"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15864:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15871:3:8","type":""}],"src":"15805:123:8"},{"body":{"nodeType":"YulBlock","src":"16066:220:8","statements":[{"nodeType":"YulAssignment","src":"16076:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16088:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"16099:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16084:3:8"},"nodeType":"YulFunctionCall","src":"16084:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16076:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16164:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16177:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"16188:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16173:3:8"},"nodeType":"YulFunctionCall","src":"16173:17:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack_library","nodeType":"YulIdentifier","src":"16112:51:8"},"nodeType":"YulFunctionCall","src":"16112:79:8"},"nodeType":"YulExpressionStatement","src":"16112:79:8"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16251:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16264:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"16275:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16260:3:8"},"nodeType":"YulFunctionCall","src":"16260:18:8"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack_library","nodeType":"YulIdentifier","src":"16201:49:8"},"nodeType":"YulFunctionCall","src":"16201:78:8"},"nodeType":"YulExpressionStatement","src":"16201:78:8"}]},"name":"abi_encode_tuple_t_uint256_t_uint16__to_t_uint256_t_uint16__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16030:9:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16042:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16050:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16061:4:8","type":""}],"src":"15934:352:8"},{"body":{"nodeType":"YulBlock","src":"16355:80:8","statements":[{"nodeType":"YulAssignment","src":"16365:22:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16380:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16374:5:8"},"nodeType":"YulFunctionCall","src":"16374:13:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16365:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16423:5:8"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"16396:26:8"},"nodeType":"YulFunctionCall","src":"16396:33:8"},"nodeType":"YulExpressionStatement","src":"16396:33:8"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16333:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"16341:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16349:5:8","type":""}],"src":"16292:143:8"},{"body":{"nodeType":"YulBlock","src":"16518:274:8","statements":[{"body":{"nodeType":"YulBlock","src":"16564:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16566:77:8"},"nodeType":"YulFunctionCall","src":"16566:79:8"},"nodeType":"YulExpressionStatement","src":"16566:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16539:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"16548:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16535:3:8"},"nodeType":"YulFunctionCall","src":"16535:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"16560:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16531:3:8"},"nodeType":"YulFunctionCall","src":"16531:32:8"},"nodeType":"YulIf","src":"16528:119:8"},{"nodeType":"YulBlock","src":"16657:128:8","statements":[{"nodeType":"YulVariableDeclaration","src":"16672:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"16686:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16676:6:8","type":""}]},{"nodeType":"YulAssignment","src":"16701:74:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16747:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"16758:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16743:3:8"},"nodeType":"YulFunctionCall","src":"16743:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16767:7:8"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"16711:31:8"},"nodeType":"YulFunctionCall","src":"16711:64:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16701:6:8"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16488:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16499:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16511:6:8","type":""}],"src":"16441:351:8"},{"body":{"nodeType":"YulBlock","src":"16904:70:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16926:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"16934:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16922:3:8"},"nodeType":"YulFunctionCall","src":"16922:14:8"},{"hexValue":"54686973206973206e6f7420796f757220496e737572616e6365","kind":"string","nodeType":"YulLiteral","src":"16938:28:8","type":"","value":"This is not your Insurance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16915:6:8"},"nodeType":"YulFunctionCall","src":"16915:52:8"},"nodeType":"YulExpressionStatement","src":"16915:52:8"}]},"name":"store_literal_in_memory_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16896:6:8","type":""}],"src":"16798:176:8"},{"body":{"nodeType":"YulBlock","src":"17126:220:8","statements":[{"nodeType":"YulAssignment","src":"17136:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17202:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"17207:2:8","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17143:58:8"},"nodeType":"YulFunctionCall","src":"17143:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17136:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17308:3:8"}],"functionName":{"name":"store_literal_in_memory_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e","nodeType":"YulIdentifier","src":"17219:88:8"},"nodeType":"YulFunctionCall","src":"17219:93:8"},"nodeType":"YulExpressionStatement","src":"17219:93:8"},{"nodeType":"YulAssignment","src":"17321:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17332:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"17337:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17328:3:8"},"nodeType":"YulFunctionCall","src":"17328:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17321:3:8"}]}]},"name":"abi_encode_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17114:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17122:3:8","type":""}],"src":"16980:366:8"},{"body":{"nodeType":"YulBlock","src":"17523:248:8","statements":[{"nodeType":"YulAssignment","src":"17533:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17545:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"17556:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17541:3:8"},"nodeType":"YulFunctionCall","src":"17541:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17533:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17580:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"17591:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17576:3:8"},"nodeType":"YulFunctionCall","src":"17576:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17599:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"17605:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17595:3:8"},"nodeType":"YulFunctionCall","src":"17595:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17569:6:8"},"nodeType":"YulFunctionCall","src":"17569:47:8"},"nodeType":"YulExpressionStatement","src":"17569:47:8"},{"nodeType":"YulAssignment","src":"17625:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17759:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17633:124:8"},"nodeType":"YulFunctionCall","src":"17633:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17625:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17503:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17518:4:8","type":""}],"src":"17352:419:8"},{"body":{"nodeType":"YulBlock","src":"17883:116:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17905:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"17913:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17901:3:8"},"nodeType":"YulFunctionCall","src":"17901:14:8"},{"hexValue":"796f752063616e277420646f20746869732077697468207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"17917:34:8","type":"","value":"you can't do this with zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17894:6:8"},"nodeType":"YulFunctionCall","src":"17894:58:8"},"nodeType":"YulExpressionStatement","src":"17894:58:8"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17973:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"17981:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17969:3:8"},"nodeType":"YulFunctionCall","src":"17969:15:8"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"17986:5:8","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17962:6:8"},"nodeType":"YulFunctionCall","src":"17962:30:8"},"nodeType":"YulExpressionStatement","src":"17962:30:8"}]},"name":"store_literal_in_memory_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17875:6:8","type":""}],"src":"17777:222:8"},{"body":{"nodeType":"YulBlock","src":"18151:220:8","statements":[{"nodeType":"YulAssignment","src":"18161:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18227:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"18232:2:8","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18168:58:8"},"nodeType":"YulFunctionCall","src":"18168:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18161:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18333:3:8"}],"functionName":{"name":"store_literal_in_memory_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90","nodeType":"YulIdentifier","src":"18244:88:8"},"nodeType":"YulFunctionCall","src":"18244:93:8"},"nodeType":"YulExpressionStatement","src":"18244:93:8"},{"nodeType":"YulAssignment","src":"18346:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18357:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"18362:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18353:3:8"},"nodeType":"YulFunctionCall","src":"18353:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18346:3:8"}]}]},"name":"abi_encode_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18139:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18147:3:8","type":""}],"src":"18005:366:8"},{"body":{"nodeType":"YulBlock","src":"18548:248:8","statements":[{"nodeType":"YulAssignment","src":"18558:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18570:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"18581:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18566:3:8"},"nodeType":"YulFunctionCall","src":"18566:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18558:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18605:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"18616:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18601:3:8"},"nodeType":"YulFunctionCall","src":"18601:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18624:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"18630:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18620:3:8"},"nodeType":"YulFunctionCall","src":"18620:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18594:6:8"},"nodeType":"YulFunctionCall","src":"18594:47:8"},"nodeType":"YulExpressionStatement","src":"18594:47:8"},{"nodeType":"YulAssignment","src":"18650:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18784:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18658:124:8"},"nodeType":"YulFunctionCall","src":"18658:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18650:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18528:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18543:4:8","type":""}],"src":"18377:419:8"},{"body":{"nodeType":"YulBlock","src":"18830:152:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18847:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18850:77:8","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18840:6:8"},"nodeType":"YulFunctionCall","src":"18840:88:8"},"nodeType":"YulExpressionStatement","src":"18840:88:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18944:1:8","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18947:4:8","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18937:6:8"},"nodeType":"YulFunctionCall","src":"18937:15:8"},"nodeType":"YulExpressionStatement","src":"18937:15:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18968:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18971:4:8","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18961:6:8"},"nodeType":"YulFunctionCall","src":"18961:15:8"},"nodeType":"YulExpressionStatement","src":"18961:15:8"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"18802:180:8"},{"body":{"nodeType":"YulBlock","src":"19032:261:8","statements":[{"nodeType":"YulAssignment","src":"19042:25:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19065:1:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19047:17:8"},"nodeType":"YulFunctionCall","src":"19047:20:8"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"19042:1:8"}]},{"nodeType":"YulAssignment","src":"19076:25:8","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"19099:1:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"19081:17:8"},"nodeType":"YulFunctionCall","src":"19081:20:8"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"19076:1:8"}]},{"body":{"nodeType":"YulBlock","src":"19239:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19241:16:8"},"nodeType":"YulFunctionCall","src":"19241:18:8"},"nodeType":"YulExpressionStatement","src":"19241:18:8"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19160:1:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19167:66:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"19235:1:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19163:3:8"},"nodeType":"YulFunctionCall","src":"19163:74:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19157:2:8"},"nodeType":"YulFunctionCall","src":"19157:81:8"},"nodeType":"YulIf","src":"19154:107:8"},{"nodeType":"YulAssignment","src":"19271:16:8","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19282:1:8"},{"name":"y","nodeType":"YulIdentifier","src":"19285:1:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19278:3:8"},"nodeType":"YulFunctionCall","src":"19278:9:8"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"19271:3:8"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19019:1:8","type":""},{"name":"y","nodeType":"YulTypedName","src":"19022:1:8","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"19028:3:8","type":""}],"src":"18988:305:8"},{"body":{"nodeType":"YulBlock","src":"19453:288:8","statements":[{"nodeType":"YulAssignment","src":"19463:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19475:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"19486:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19471:3:8"},"nodeType":"YulFunctionCall","src":"19471:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19463:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19543:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19556:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"19567:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19552:3:8"},"nodeType":"YulFunctionCall","src":"19552:17:8"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"19499:43:8"},"nodeType":"YulFunctionCall","src":"19499:71:8"},"nodeType":"YulExpressionStatement","src":"19499:71:8"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19624:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19637:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"19648:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19633:3:8"},"nodeType":"YulFunctionCall","src":"19633:18:8"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"19580:43:8"},"nodeType":"YulFunctionCall","src":"19580:72:8"},"nodeType":"YulExpressionStatement","src":"19580:72:8"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19706:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19719:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"19730:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19715:3:8"},"nodeType":"YulFunctionCall","src":"19715:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"19662:43:8"},"nodeType":"YulFunctionCall","src":"19662:72:8"},"nodeType":"YulExpressionStatement","src":"19662:72:8"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19409:9:8","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19421:6:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19429:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19437:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19448:4:8","type":""}],"src":"19299:442:8"},{"body":{"nodeType":"YulBlock","src":"19807:77:8","statements":[{"nodeType":"YulAssignment","src":"19817:22:8","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19832:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19826:5:8"},"nodeType":"YulFunctionCall","src":"19826:13:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19817:5:8"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19872:5:8"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"19848:23:8"},"nodeType":"YulFunctionCall","src":"19848:30:8"},"nodeType":"YulExpressionStatement","src":"19848:30:8"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"19785:6:8","type":""},{"name":"end","nodeType":"YulTypedName","src":"19793:3:8","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19801:5:8","type":""}],"src":"19747:137:8"},{"body":{"nodeType":"YulBlock","src":"19964:271:8","statements":[{"body":{"nodeType":"YulBlock","src":"20010:83:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20012:77:8"},"nodeType":"YulFunctionCall","src":"20012:79:8"},"nodeType":"YulExpressionStatement","src":"20012:79:8"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19985:7:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"19994:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19981:3:8"},"nodeType":"YulFunctionCall","src":"19981:23:8"},{"kind":"number","nodeType":"YulLiteral","src":"20006:2:8","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19977:3:8"},"nodeType":"YulFunctionCall","src":"19977:32:8"},"nodeType":"YulIf","src":"19974:119:8"},{"nodeType":"YulBlock","src":"20103:125:8","statements":[{"nodeType":"YulVariableDeclaration","src":"20118:15:8","value":{"kind":"number","nodeType":"YulLiteral","src":"20132:1:8","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20122:6:8","type":""}]},{"nodeType":"YulAssignment","src":"20147:71:8","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20190:9:8"},{"name":"offset","nodeType":"YulIdentifier","src":"20201:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20186:3:8"},"nodeType":"YulFunctionCall","src":"20186:22:8"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20210:7:8"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"20157:28:8"},"nodeType":"YulFunctionCall","src":"20157:61:8"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20147:6:8"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19934:9:8","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19945:7:8","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19957:6:8","type":""}],"src":"19890:345:8"},{"body":{"nodeType":"YulBlock","src":"20347:66:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20369:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"20377:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20365:3:8"},"nodeType":"YulFunctionCall","src":"20365:14:8"},{"hexValue":"556e61626c6520746f2074616e736665722046756e64","kind":"string","nodeType":"YulLiteral","src":"20381:24:8","type":"","value":"Unable to tansfer Fund"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20358:6:8"},"nodeType":"YulFunctionCall","src":"20358:48:8"},"nodeType":"YulExpressionStatement","src":"20358:48:8"}]},"name":"store_literal_in_memory_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20339:6:8","type":""}],"src":"20241:172:8"},{"body":{"nodeType":"YulBlock","src":"20565:220:8","statements":[{"nodeType":"YulAssignment","src":"20575:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20641:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"20646:2:8","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20582:58:8"},"nodeType":"YulFunctionCall","src":"20582:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20575:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20747:3:8"}],"functionName":{"name":"store_literal_in_memory_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba","nodeType":"YulIdentifier","src":"20658:88:8"},"nodeType":"YulFunctionCall","src":"20658:93:8"},"nodeType":"YulExpressionStatement","src":"20658:93:8"},{"nodeType":"YulAssignment","src":"20760:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20771:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"20776:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20767:3:8"},"nodeType":"YulFunctionCall","src":"20767:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20760:3:8"}]}]},"name":"abi_encode_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20553:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20561:3:8","type":""}],"src":"20419:366:8"},{"body":{"nodeType":"YulBlock","src":"20962:248:8","statements":[{"nodeType":"YulAssignment","src":"20972:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20984:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"20995:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20980:3:8"},"nodeType":"YulFunctionCall","src":"20980:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20972:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21019:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"21030:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21015:3:8"},"nodeType":"YulFunctionCall","src":"21015:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21038:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"21044:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21034:3:8"},"nodeType":"YulFunctionCall","src":"21034:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21008:6:8"},"nodeType":"YulFunctionCall","src":"21008:47:8"},"nodeType":"YulExpressionStatement","src":"21008:47:8"},{"nodeType":"YulAssignment","src":"21064:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21198:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21072:124:8"},"nodeType":"YulFunctionCall","src":"21072:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21064:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20942:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20957:4:8","type":""}],"src":"20791:419:8"},{"body":{"nodeType":"YulBlock","src":"21322:51:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21344:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"21352:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21340:3:8"},"nodeType":"YulFunctionCall","src":"21340:14:8"},{"hexValue":"73756363657373","kind":"string","nodeType":"YulLiteral","src":"21356:9:8","type":"","value":"success"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21333:6:8"},"nodeType":"YulFunctionCall","src":"21333:33:8"},"nodeType":"YulExpressionStatement","src":"21333:33:8"}]},"name":"store_literal_in_memory_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21314:6:8","type":""}],"src":"21216:157:8"},{"body":{"nodeType":"YulBlock","src":"21525:219:8","statements":[{"nodeType":"YulAssignment","src":"21535:73:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21601:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"21606:1:8","type":"","value":"7"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21542:58:8"},"nodeType":"YulFunctionCall","src":"21542:66:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21535:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21706:3:8"}],"functionName":{"name":"store_literal_in_memory_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38","nodeType":"YulIdentifier","src":"21617:88:8"},"nodeType":"YulFunctionCall","src":"21617:93:8"},"nodeType":"YulExpressionStatement","src":"21617:93:8"},{"nodeType":"YulAssignment","src":"21719:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21730:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"21735:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21726:3:8"},"nodeType":"YulFunctionCall","src":"21726:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21719:3:8"}]}]},"name":"abi_encode_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21513:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21521:3:8","type":""}],"src":"21379:365:8"},{"body":{"nodeType":"YulBlock","src":"21977:412:8","statements":[{"nodeType":"YulAssignment","src":"21987:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21999:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"22010:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21995:3:8"},"nodeType":"YulFunctionCall","src":"21995:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21987:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22067:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22080:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"22091:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22076:3:8"},"nodeType":"YulFunctionCall","src":"22076:17:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22023:43:8"},"nodeType":"YulFunctionCall","src":"22023:71:8"},"nodeType":"YulExpressionStatement","src":"22023:71:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22115:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"22126:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22111:3:8"},"nodeType":"YulFunctionCall","src":"22111:18:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22135:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"22141:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22131:3:8"},"nodeType":"YulFunctionCall","src":"22131:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22104:6:8"},"nodeType":"YulFunctionCall","src":"22104:48:8"},"nodeType":"YulExpressionStatement","src":"22104:48:8"},{"nodeType":"YulAssignment","src":"22161:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22295:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22169:124:8"},"nodeType":"YulFunctionCall","src":"22169:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22161:4:8"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22354:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22367:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"22378:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22363:3:8"},"nodeType":"YulFunctionCall","src":"22363:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22310:43:8"},"nodeType":"YulFunctionCall","src":"22310:72:8"},"nodeType":"YulExpressionStatement","src":"22310:72:8"}]},"name":"abi_encode_tuple_t_uint256_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21941:9:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21953:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21961:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21972:4:8","type":""}],"src":"21750:639:8"},{"body":{"nodeType":"YulBlock","src":"22501:53:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22523:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"22531:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22519:3:8"},"nodeType":"YulFunctionCall","src":"22519:14:8"},{"hexValue":"756e73756363657373","kind":"string","nodeType":"YulLiteral","src":"22535:11:8","type":"","value":"unsuccess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22512:6:8"},"nodeType":"YulFunctionCall","src":"22512:35:8"},"nodeType":"YulExpressionStatement","src":"22512:35:8"}]},"name":"store_literal_in_memory_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22493:6:8","type":""}],"src":"22395:159:8"},{"body":{"nodeType":"YulBlock","src":"22706:219:8","statements":[{"nodeType":"YulAssignment","src":"22716:73:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22782:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"22787:1:8","type":"","value":"9"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22723:58:8"},"nodeType":"YulFunctionCall","src":"22723:66:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22716:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22887:3:8"}],"functionName":{"name":"store_literal_in_memory_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133","nodeType":"YulIdentifier","src":"22798:88:8"},"nodeType":"YulFunctionCall","src":"22798:93:8"},"nodeType":"YulExpressionStatement","src":"22798:93:8"},{"nodeType":"YulAssignment","src":"22900:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22911:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"22916:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22907:3:8"},"nodeType":"YulFunctionCall","src":"22907:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22900:3:8"}]}]},"name":"abi_encode_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22694:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22702:3:8","type":""}],"src":"22560:365:8"},{"body":{"nodeType":"YulBlock","src":"22984:32:8","statements":[{"nodeType":"YulAssignment","src":"22994:16:8","value":{"name":"value","nodeType":"YulIdentifier","src":"23005:5:8"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"22994:7:8"}]}]},"name":"cleanup_t_rational_0_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22966:5:8","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"22976:7:8","type":""}],"src":"22931:85:8"},{"body":{"nodeType":"YulBlock","src":"23054:28:8","statements":[{"nodeType":"YulAssignment","src":"23064:12:8","value":{"name":"value","nodeType":"YulIdentifier","src":"23071:5:8"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"23064:3:8"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23040:5:8","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"23050:3:8","type":""}],"src":"23022:60:8"},{"body":{"nodeType":"YulBlock","src":"23156:90:8","statements":[{"nodeType":"YulAssignment","src":"23166:74:8","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23232:5:8"}],"functionName":{"name":"cleanup_t_rational_0_by_1","nodeType":"YulIdentifier","src":"23206:25:8"},"nodeType":"YulFunctionCall","src":"23206:32:8"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"23197:8:8"},"nodeType":"YulFunctionCall","src":"23197:42:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23179:17:8"},"nodeType":"YulFunctionCall","src":"23179:61:8"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"23166:9:8"}]}]},"name":"convert_t_rational_0_by_1_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23136:5:8","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"23146:9:8","type":""}],"src":"23088:158:8"},{"body":{"nodeType":"YulBlock","src":"23325:74:8","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23342:3:8"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23386:5:8"}],"functionName":{"name":"convert_t_rational_0_by_1_to_t_uint256","nodeType":"YulIdentifier","src":"23347:38:8"},"nodeType":"YulFunctionCall","src":"23347:45:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23335:6:8"},"nodeType":"YulFunctionCall","src":"23335:58:8"},"nodeType":"YulExpressionStatement","src":"23335:58:8"}]},"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23313:5:8","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23320:3:8","type":""}],"src":"23252:147:8"},{"body":{"nodeType":"YulBlock","src":"23640:420:8","statements":[{"nodeType":"YulAssignment","src":"23650:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23662:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"23673:2:8","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23658:3:8"},"nodeType":"YulFunctionCall","src":"23658:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23650:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23730:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23743:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"23754:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23739:3:8"},"nodeType":"YulFunctionCall","src":"23739:17:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23686:43:8"},"nodeType":"YulFunctionCall","src":"23686:71:8"},"nodeType":"YulExpressionStatement","src":"23686:71:8"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23778:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"23789:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23774:3:8"},"nodeType":"YulFunctionCall","src":"23774:18:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23798:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"23804:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23794:3:8"},"nodeType":"YulFunctionCall","src":"23794:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23767:6:8"},"nodeType":"YulFunctionCall","src":"23767:48:8"},"nodeType":"YulExpressionStatement","src":"23767:48:8"},{"nodeType":"YulAssignment","src":"23824:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23958:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23832:124:8"},"nodeType":"YulFunctionCall","src":"23832:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23824:4:8"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24025:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24038:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24049:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24034:3:8"},"nodeType":"YulFunctionCall","src":"24034:18:8"}],"functionName":{"name":"abi_encode_t_rational_0_by_1_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23973:51:8"},"nodeType":"YulFunctionCall","src":"23973:80:8"},"nodeType":"YulExpressionStatement","src":"23973:80:8"}]},"name":"abi_encode_tuple_t_uint256_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_t_rational_0_by_1__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23604:9:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23616:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23624:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23635:4:8","type":""}],"src":"23405:655:8"},{"body":{"nodeType":"YulBlock","src":"24172:70:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24194:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"24202:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24190:3:8"},"nodeType":"YulFunctionCall","src":"24190:14:8"},{"hexValue":"796f7572206d617475726974792044617465206973206f766572","kind":"string","nodeType":"YulLiteral","src":"24206:28:8","type":"","value":"your maturity Date is over"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24183:6:8"},"nodeType":"YulFunctionCall","src":"24183:52:8"},"nodeType":"YulExpressionStatement","src":"24183:52:8"}]},"name":"store_literal_in_memory_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24164:6:8","type":""}],"src":"24066:176:8"},{"body":{"nodeType":"YulBlock","src":"24394:220:8","statements":[{"nodeType":"YulAssignment","src":"24404:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24470:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"24475:2:8","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24411:58:8"},"nodeType":"YulFunctionCall","src":"24411:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24404:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24576:3:8"}],"functionName":{"name":"store_literal_in_memory_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f","nodeType":"YulIdentifier","src":"24487:88:8"},"nodeType":"YulFunctionCall","src":"24487:93:8"},"nodeType":"YulExpressionStatement","src":"24487:93:8"},{"nodeType":"YulAssignment","src":"24589:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24600:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"24605:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24596:3:8"},"nodeType":"YulFunctionCall","src":"24596:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24589:3:8"}]}]},"name":"abi_encode_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24382:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24390:3:8","type":""}],"src":"24248:366:8"},{"body":{"nodeType":"YulBlock","src":"24791:248:8","statements":[{"nodeType":"YulAssignment","src":"24801:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24813:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24824:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24809:3:8"},"nodeType":"YulFunctionCall","src":"24809:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24801:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24848:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"24859:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24844:3:8"},"nodeType":"YulFunctionCall","src":"24844:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24867:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"24873:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24863:3:8"},"nodeType":"YulFunctionCall","src":"24863:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24837:6:8"},"nodeType":"YulFunctionCall","src":"24837:47:8"},"nodeType":"YulExpressionStatement","src":"24837:47:8"},{"nodeType":"YulAssignment","src":"24893:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25027:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24901:124:8"},"nodeType":"YulFunctionCall","src":"24901:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24893:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24771:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24786:4:8","type":""}],"src":"24620:419:8"},{"body":{"nodeType":"YulBlock","src":"25086:126:8","statements":[{"nodeType":"YulAssignment","src":"25096:31:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25121:5:8"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"25105:15:8"},"nodeType":"YulFunctionCall","src":"25105:22:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"25096:5:8"}]},{"body":{"nodeType":"YulBlock","src":"25155:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25157:16:8"},"nodeType":"YulFunctionCall","src":"25157:18:8"},"nodeType":"YulExpressionStatement","src":"25157:18:8"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25142:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"25149:4:8","type":"","value":"0xff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25139:2:8"},"nodeType":"YulFunctionCall","src":"25139:15:8"},"nodeType":"YulIf","src":"25136:41:8"},{"nodeType":"YulAssignment","src":"25186:20:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25197:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"25204:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25193:3:8"},"nodeType":"YulFunctionCall","src":"25193:13:8"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25186:3:8"}]}]},"name":"increment_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25072:5:8","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25082:3:8","type":""}],"src":"25045:167:8"},{"body":{"nodeType":"YulBlock","src":"25324:56:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25346:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"25354:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25342:3:8"},"nodeType":"YulFunctionCall","src":"25342:14:8"},{"hexValue":"46616b652041646472657373","kind":"string","nodeType":"YulLiteral","src":"25358:14:8","type":"","value":"Fake Address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25335:6:8"},"nodeType":"YulFunctionCall","src":"25335:38:8"},"nodeType":"YulExpressionStatement","src":"25335:38:8"}]},"name":"store_literal_in_memory_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25316:6:8","type":""}],"src":"25218:162:8"},{"body":{"nodeType":"YulBlock","src":"25532:220:8","statements":[{"nodeType":"YulAssignment","src":"25542:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25608:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"25613:2:8","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25549:58:8"},"nodeType":"YulFunctionCall","src":"25549:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25542:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25714:3:8"}],"functionName":{"name":"store_literal_in_memory_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754","nodeType":"YulIdentifier","src":"25625:88:8"},"nodeType":"YulFunctionCall","src":"25625:93:8"},"nodeType":"YulExpressionStatement","src":"25625:93:8"},{"nodeType":"YulAssignment","src":"25727:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25738:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"25743:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25734:3:8"},"nodeType":"YulFunctionCall","src":"25734:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25727:3:8"}]}]},"name":"abi_encode_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25520:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25528:3:8","type":""}],"src":"25386:366:8"},{"body":{"nodeType":"YulBlock","src":"25929:248:8","statements":[{"nodeType":"YulAssignment","src":"25939:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25951:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"25962:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25947:3:8"},"nodeType":"YulFunctionCall","src":"25947:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25939:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25986:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"25997:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25982:3:8"},"nodeType":"YulFunctionCall","src":"25982:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26005:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"26011:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26001:3:8"},"nodeType":"YulFunctionCall","src":"26001:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25975:6:8"},"nodeType":"YulFunctionCall","src":"25975:47:8"},"nodeType":"YulExpressionStatement","src":"25975:47:8"},{"nodeType":"YulAssignment","src":"26031:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26165:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26039:124:8"},"nodeType":"YulFunctionCall","src":"26039:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26031:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25909:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25924:4:8","type":""}],"src":"25758:419:8"},{"body":{"nodeType":"YulBlock","src":"26226:190:8","statements":[{"nodeType":"YulAssignment","src":"26236:33:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26263:5:8"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26245:17:8"},"nodeType":"YulFunctionCall","src":"26245:24:8"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26236:5:8"}]},{"body":{"nodeType":"YulBlock","src":"26359:22:8","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26361:16:8"},"nodeType":"YulFunctionCall","src":"26361:18:8"},"nodeType":"YulExpressionStatement","src":"26361:18:8"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26284:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"26291:66:8","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"26281:2:8"},"nodeType":"YulFunctionCall","src":"26281:77:8"},"nodeType":"YulIf","src":"26278:103:8"},{"nodeType":"YulAssignment","src":"26390:20:8","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26401:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"26408:1:8","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26397:3:8"},"nodeType":"YulFunctionCall","src":"26397:13:8"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"26390:3:8"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26212:5:8","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"26222:3:8","type":""}],"src":"26183:233:8"},{"body":{"nodeType":"YulBlock","src":"26548:206:8","statements":[{"nodeType":"YulAssignment","src":"26558:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26570:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"26581:2:8","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26566:3:8"},"nodeType":"YulFunctionCall","src":"26566:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26558:4:8"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26638:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26651:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"26662:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26647:3:8"},"nodeType":"YulFunctionCall","src":"26647:17:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26594:43:8"},"nodeType":"YulFunctionCall","src":"26594:71:8"},"nodeType":"YulExpressionStatement","src":"26594:71:8"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26719:6:8"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26732:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"26743:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26728:3:8"},"nodeType":"YulFunctionCall","src":"26728:18:8"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26675:43:8"},"nodeType":"YulFunctionCall","src":"26675:72:8"},"nodeType":"YulExpressionStatement","src":"26675:72:8"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26512:9:8","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26524:6:8","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26532:6:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26543:4:8","type":""}],"src":"26422:332:8"},{"body":{"nodeType":"YulBlock","src":"26866:75:8","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26888:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"26896:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26884:3:8"},"nodeType":"YulFunctionCall","src":"26884:14:8"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"26900:33:8","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26877:6:8"},"nodeType":"YulFunctionCall","src":"26877:57:8"},"nodeType":"YulExpressionStatement","src":"26877:57:8"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26858:6:8","type":""}],"src":"26760:181:8"},{"body":{"nodeType":"YulBlock","src":"27093:220:8","statements":[{"nodeType":"YulAssignment","src":"27103:74:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27169:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"27174:2:8","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27110:58:8"},"nodeType":"YulFunctionCall","src":"27110:67:8"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27103:3:8"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27275:3:8"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"27186:88:8"},"nodeType":"YulFunctionCall","src":"27186:93:8"},"nodeType":"YulExpressionStatement","src":"27186:93:8"},{"nodeType":"YulAssignment","src":"27288:19:8","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27299:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"27304:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27295:3:8"},"nodeType":"YulFunctionCall","src":"27295:12:8"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27288:3:8"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27081:3:8","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27089:3:8","type":""}],"src":"26947:366:8"},{"body":{"nodeType":"YulBlock","src":"27490:248:8","statements":[{"nodeType":"YulAssignment","src":"27500:26:8","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27512:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"27523:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27508:3:8"},"nodeType":"YulFunctionCall","src":"27508:18:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27500:4:8"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27547:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"27558:1:8","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27543:3:8"},"nodeType":"YulFunctionCall","src":"27543:17:8"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27566:4:8"},{"name":"headStart","nodeType":"YulIdentifier","src":"27572:9:8"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27562:3:8"},"nodeType":"YulFunctionCall","src":"27562:20:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27536:6:8"},"nodeType":"YulFunctionCall","src":"27536:47:8"},"nodeType":"YulExpressionStatement","src":"27536:47:8"},{"nodeType":"YulAssignment","src":"27592:139:8","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27726:4:8"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27600:124:8"},"nodeType":"YulFunctionCall","src":"27600:131:8"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27592:4:8"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27470:9:8","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27485:4:8","type":""}],"src":"27319:419:8"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_string_memory_ptrt_string_memory_ptrt_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint16__to_t_address_t_uint256_t_uint256_t_uint256_t_uint256_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_uint16__fromStack_reversed(headStart , value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 352)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        mstore(add(headStart, 160), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value5,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value6,  add(headStart, 192))\n\n        mstore(add(headStart, 224), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value7,  tail)\n\n        mstore(add(headStart, 256), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value8,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value9,  add(headStart, 288))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value10,  add(headStart, 320))\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    // struct insuranceRegistery.insuranceData\n    function abi_decode_t_struct$_insuranceData_$3034_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x0160) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x0160)\n\n        {\n            // userWalletAddress\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // startDate\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // maturityDate\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // periodTime\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // areaOfLand\n\n            let offset := 128\n\n            mstore(add(value, 0x80), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // seedsData\n\n            let offset := calldataload(add(headStart, 160))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0xa0), abi_decode_t_string_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // seedQuantity\n\n            let offset := 192\n\n            mstore(add(value, 0xc0), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // image\n\n            let offset := calldataload(add(headStart, 224))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0xe0), abi_decode_t_string_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // yourAddress\n\n            let offset := calldataload(add(headStart, 256))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x0100), abi_decode_t_string_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // Amount\n\n            let offset := 288\n\n            mstore(add(value, 0x0120), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n        {\n            // percent\n\n            let offset := 320\n\n            mstore(add(value, 0x0140), abi_decode_t_uint16(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_insuranceData_$3034_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_struct$_insuranceData_$3034_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49(memPtr) {\n\n        mstore(add(memPtr, 0), \"You are claiming at wrong timest\")\n\n        mstore(add(memPtr, 32), \"amp\")\n\n    }\n\n    function abi_encode_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_febdb298ee718157ae9b8e299067100d9b6cfddf208fd9e54b7297d30b8a8b49_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint16__to_t_uint256_t_uint16__fromStack_library_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack_library(value0,  add(headStart, 0))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack_library(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e(memPtr) {\n\n        mstore(add(memPtr, 0), \"This is not your Insurance\")\n\n    }\n\n    function abi_encode_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c1f4e6c40f47b4d7e4decb4ff97686c62b77be6eadee451c3cc3767e20ffbd7e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90(memPtr) {\n\n        mstore(add(memPtr, 0), \"you can't do this with zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_da2de5e174d5db952c4c59e5d37e20932f8620dc9a05814d0091bf67effdcf90_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba(memPtr) {\n\n        mstore(add(memPtr, 0), \"Unable to tansfer Fund\")\n\n    }\n\n    function abi_encode_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4ce08c7ed9051a08a2d179253fa461f9c89777654d00aecbd371a888c87370ba_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38(memPtr) {\n\n        mstore(add(memPtr, 0), \"success\")\n\n    }\n\n    function abi_encode_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 7)\n        store_literal_in_memory_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_uint256_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_t_uint256__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38_to_t_string_memory_ptr_fromStack( tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133(memPtr) {\n\n        mstore(add(memPtr, 0), \"unsuccess\")\n\n    }\n\n    function abi_encode_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 9)\n        store_literal_in_memory_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133(pos)\n        end := add(pos, 32)\n    }\n\n    function cleanup_t_rational_0_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_0_by_1_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_rational_0_by_1(value)))\n    }\n\n    function abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_0_by_1_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_t_rational_0_by_1__to_t_uint256_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f112dbf276b20e20fdfc1a2c0a17cd1514814e17a9dddeb3db70b7885844c133_to_t_string_memory_ptr_fromStack( tail)\n\n        abi_encode_t_rational_0_by_1_to_t_uint256_fromStack(value1,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"your maturity Date is over\")\n\n    }\n\n    function abi_encode_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 26)\n        store_literal_in_memory_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_70c2470217bc01eb8626db8d44a3b7e52a485633ecfc7d952e67a956d66a1b7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function increment_t_uint8(value) -> ret {\n        value := cleanup_t_uint8(value)\n        if eq(value, 0xff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754(memPtr) {\n\n        mstore(add(memPtr, 0), \"Fake Address\")\n\n    }\n\n    function abi_encode_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_472b62c20c39af3abd6b37f27929d128a0352a70cd025a4ddc9cad55fadd4754_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":8,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"contracts/Libraries/LibCalculations.sol":{"LibCalculations":[{"length":20,"start":1314}]}},"object":"608060405234801561001057600080fd5b50600436106100935760003560e01c8063b52078d711610066578063b52078d714610130578063bae5b0561461016a578063ccf46d341461019a578063ed80db35146101b8578063f36eeebb146101e857610093565b8063487e4661146100985780635a514dd6146100c857806369cf8ad7146100e4578063a86f678f14610114575b600080fd5b6100b260048036038101906100ad919061132c565b610218565b6040516100bf9190611368565b60405180910390f35b6100e260048036038101906100dd919061155f565b610230565b005b6100fe60048036038101906100f9919061132c565b61080f565b60405161010b919061162e565b60405180910390f35b61012e60048036038101906101299190611649565b61082f565b005b61014a6004803603810190610145919061132c565b610d3b565b6040516101619b9a9998979695949392919061173d565b60405180910390f35b610184600480360381019061017f9190611993565b610f5b565b6040516101919190611368565b60405180910390f35b6101a26111a3565b6040516101af9190611368565b60405180910390f35b6101d260048036038101906101cd91906119dc565b6111a9565b6040516101df9190611a34565b60405180910390f35b61020260048036038101906101fd9190611649565b6111b4565b60405161020f9190611368565b60405180910390f35b60046020528060005260406000206000915090505481565b6102386111e5565b4260046000868152602001908152602001600020541061028d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028490611ac1565b60405180910390fd5b80156107c557600060026000868152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201805461034290611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90611b10565b80156103bb5780601f10610390576101008083540402835291602001916103bb565b820191906000526020600020905b81548152906001019060200180831161039e57829003601f168201915b50505050508152602001600682015481526020016007820180546103de90611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461040a90611b10565b80156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b5050505050815260200160088201805461047090611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461049c90611b10565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050815260200160098201548152602001600a820160009054906101000a900461ffff1661ffff1661ffff16815250509050600073__$61c3dbfad47bb5d5260aee114f5f9d6488$__633fb340038361012001518461014001516040518363ffffffff1660e01b8152600401610563929190611b60565b60206040518083038186803b15801561057b57600080fd5b505af415801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611b9e565b90503373ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1614610627576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061e90611c17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90611ca9565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330848661012001516106c69190611cf8565b6040518463ffffffff1660e01b81526004016106e493929190611d4e565b602060405180830381600087803b1580156106fe57600080fd5b505af1158015610712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107369190611d9a565b610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c90611e13565b60405180910390fd5b7f9eb9ef6bc25ab8bf0bc9a4907fa27dab76ea367b559d928306db5ac5b2656e3486828461012001516107a89190611cf8565b6040516107b6929190611e7f565b60405180910390a15050610800565b7f9eb9ef6bc25ab8bf0bc9a4907fa27dab76ea367b559d928306db5ac5b2656e348460006040516107f7929190611f4c565b60405180910390a15b610808611235565b5050505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6108376111e5565b600060026000838152602001908152602001600020604051806101600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820180546108e690611b10565b80601f016020809104026020016040519081016040528092919081815260200182805461091290611b10565b801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b505050505081526020016006820154815260200160078201805461098290611b10565b80601f01602080910402602001604051908101604052809291908181526020018280546109ae90611b10565b80156109fb5780601f106109d0576101008083540402835291602001916109fb565b820191906000526020600020905b8154815290600101906020018083116109de57829003601f168201915b50505050508152602001600882018054610a1490611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4090611b10565b8015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b5050505050815260200160098201548152602001600a820160009054906101000a900461ffff1661ffff1661ffff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b90611c17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90611ca9565b60405180910390fd5b4281604001518260200151610bb99190611cf8565b1115610bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf190611fd4565b60405180910390fd5b60036000838152602001908152602001600020600081819054906101000a900460ff1680929190610c2a90611ff4565b91906101000a81548160ff021916908360ff160217905550504260046000848152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166323b872dd33308461012001516040518463ffffffff1660e01b8152600401610c9d93929190611d4e565b602060405180830381600087803b158015610cb757600080fd5b505af1158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef9190611d9a565b610d2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2590611e13565b60405180910390fd5b50610d37611235565b5050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003015490806004015490806005018054610d9c90611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc890611b10565b8015610e155780601f10610dea57610100808354040283529160200191610e15565b820191906000526020600020905b815481529060010190602001808311610df857829003601f168201915b505050505090806006015490806007018054610e3090611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5c90611b10565b8015610ea95780601f10610e7e57610100808354040283529160200191610ea9565b820191906000526020600020905b815481529060010190602001808311610e8c57829003601f168201915b505050505090806008018054610ebe90611b10565b80601f0160208091040260200160405190810160405280929190818152602001828054610eea90611b10565b8015610f375780601f10610f0c57610100808354040283529160200191610f37565b820191906000526020600020905b815481529060010190602001808311610f1a57829003601f168201915b50505050509080600901549080600a0160009054906101000a900461ffff1690508b565b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc39061206a565b60405180910390fd5b600160008154610fdb9061208a565b9190508190559050816002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501908051906020019061108292919061123f565b5060c0820151816006015560e08201518160070190805190602001906110a992919061123f565b506101008201518160080190805190602001906110c792919061123f565b50610120820151816009015561014082015181600a0160006101000a81548161ffff021916908361ffff160217905550905050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150557f75f0e88e04463f86c7e1e71465891020fa84744536526c63c08c967fcb3acbfc818361012001516040516111969291906120d3565b60405180910390a1919050565b60015481565b600060019050919050565b600560205281600052604060002081815481106111d057600080fd5b90600052602060002001600091509150505481565b6002600054141561122b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122290612148565b60405180910390fd5b6002600081905550565b6001600081905550565b82805461124b90611b10565b90600052602060002090601f01602090048101928261126d57600085556112b4565b82601f1061128657805160ff19168380011785556112b4565b828001600101855582156112b4579182015b828111156112b3578251825591602001919060010190611298565b5b5090506112c191906112c5565b5090565b5b808211156112de5760008160009055506001016112c6565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611309816112f6565b811461131457600080fd5b50565b60008135905061132681611300565b92915050565b600060208284031215611342576113416112ec565b5b600061135084828501611317565b91505092915050565b611362816112f6565b82525050565b600060208201905061137d6000830184611359565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113ae82611383565b9050919050565b6113be816113a3565b81146113c957600080fd5b50565b6000813590506113db816113b5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611434826113eb565b810181811067ffffffffffffffff82111715611453576114526113fc565b5b80604052505050565b60006114666112e2565b9050611472828261142b565b919050565b600067ffffffffffffffff821115611492576114916113fc565b5b61149b826113eb565b9050602081019050919050565b82818337600083830152505050565b60006114ca6114c584611477565b61145c565b9050828152602081018484840111156114e6576114e56113e6565b5b6114f18482856114a8565b509392505050565b600082601f83011261150e5761150d6113e1565b5b813561151e8482602086016114b7565b91505092915050565b60008115159050919050565b61153c81611527565b811461154757600080fd5b50565b60008135905061155981611533565b92915050565b600080600080600060a0868803121561157b5761157a6112ec565b5b6000611589888289016113cc565b955050602061159a88828901611317565b945050604086013567ffffffffffffffff8111156115bb576115ba6112f1565b5b6115c7888289016114f9565b935050606086013567ffffffffffffffff8111156115e8576115e76112f1565b5b6115f4888289016114f9565b92505060806116058882890161154a565b9150509295509295909350565b600060ff82169050919050565b61162881611612565b82525050565b6000602082019050611643600083018461161f565b92915050565b600080604083850312156116605761165f6112ec565b5b600061166e858286016113cc565b925050602061167f85828601611317565b9150509250929050565b611692816113a3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116d25780820151818401526020810190506116b7565b838111156116e1576000848401525b50505050565b60006116f282611698565b6116fc81856116a3565b935061170c8185602086016116b4565b611715816113eb565b840191505092915050565b600061ffff82169050919050565b61173781611720565b82525050565b600061016082019050611753600083018e611689565b611760602083018d611359565b61176d604083018c611359565b61177a606083018b611359565b611787608083018a611359565b81810360a083015261179981896116e7565b90506117a860c0830188611359565b81810360e08301526117ba81876116e7565b90508181036101008301526117cf81866116e7565b90506117df610120830185611359565b6117ed61014083018461172e565b9c9b505050505050505050505050565b600080fd5b600080fd5b61181081611720565b811461181b57600080fd5b50565b60008135905061182d81611807565b92915050565b6000610160828403121561184a576118496117fd565b5b61185561016061145c565b90506000611865848285016113cc565b600083015250602061187984828501611317565b602083015250604061188d84828501611317565b60408301525060606118a184828501611317565b60608301525060806118b584828501611317565b60808301525060a082013567ffffffffffffffff8111156118d9576118d8611802565b5b6118e5848285016114f9565b60a08301525060c06118f984828501611317565b60c08301525060e082013567ffffffffffffffff81111561191d5761191c611802565b5b611929848285016114f9565b60e08301525061010082013567ffffffffffffffff81111561194e5761194d611802565b5b61195a848285016114f9565b6101008301525061012061197084828501611317565b610120830152506101406119868482850161181e565b6101408301525092915050565b6000602082840312156119a9576119a86112ec565b5b600082013567ffffffffffffffff8111156119c7576119c66112f1565b5b6119d384828501611833565b91505092915050565b6000602082840312156119f2576119f16112ec565b5b600082013567ffffffffffffffff811115611a1057611a0f6112f1565b5b611a1c848285016114f9565b91505092915050565b611a2e81611527565b82525050565b6000602082019050611a496000830184611a25565b92915050565b7f596f752061726520636c61696d696e672061742077726f6e672074696d65737460008201527f616d700000000000000000000000000000000000000000000000000000000000602082015250565b6000611aab6023836116a3565b9150611ab682611a4f565b604082019050919050565b60006020820190508181036000830152611ada81611a9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b2857607f821691505b60208210811415611b3c57611b3b611ae1565b5b50919050565b611b4b816112f6565b82525050565b611b5a81611720565b82525050565b6000604082019050611b756000830185611b42565b611b826020830184611b51565b9392505050565b600081519050611b9881611300565b92915050565b600060208284031215611bb457611bb36112ec565b5b6000611bc284828501611b89565b91505092915050565b7f54686973206973206e6f7420796f757220496e737572616e6365000000000000600082015250565b6000611c01601a836116a3565b9150611c0c82611bcb565b602082019050919050565b60006020820190508181036000830152611c3081611bf4565b9050919050565b7f796f752063616e277420646f20746869732077697468207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611c936023836116a3565b9150611c9e82611c37565b604082019050919050565b60006020820190508181036000830152611cc281611c86565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d03826112f6565b9150611d0e836112f6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d4357611d42611cc9565b5b828201905092915050565b6000606082019050611d636000830186611689565b611d706020830185611689565b611d7d6040830184611359565b949350505050565b600081519050611d9481611533565b92915050565b600060208284031215611db057611daf6112ec565b5b6000611dbe84828501611d85565b91505092915050565b7f556e61626c6520746f2074616e736665722046756e6400000000000000000000600082015250565b6000611dfd6016836116a3565b9150611e0882611dc7565b602082019050919050565b60006020820190508181036000830152611e2c81611df0565b9050919050565b7f7375636365737300000000000000000000000000000000000000000000000000600082015250565b6000611e696007836116a3565b9150611e7482611e33565b602082019050919050565b6000606082019050611e946000830185611359565b8181036020830152611ea581611e5c565b9050611eb46040830184611359565b9392505050565b7f756e737563636573730000000000000000000000000000000000000000000000600082015250565b6000611ef16009836116a3565b9150611efc82611ebb565b602082019050919050565b6000819050919050565b6000819050919050565b6000611f36611f31611f2c84611f07565b611f11565b6112f6565b9050919050565b611f4681611f1b565b82525050565b6000606082019050611f616000830185611359565b8181036020830152611f7281611ee4565b9050611f816040830184611f3d565b9392505050565b7f796f7572206d617475726974792044617465206973206f766572000000000000600082015250565b6000611fbe601a836116a3565b9150611fc982611f88565b602082019050919050565b60006020820190508181036000830152611fed81611fb1565b9050919050565b6000611fff82611612565b915060ff82141561201357612012611cc9565b5b600182019050919050565b7f46616b6520416464726573730000000000000000000000000000000000000000600082015250565b6000612054600c836116a3565b915061205f8261201e565b602082019050919050565b6000602082019050818103600083015261208381612047565b9050919050565b6000612095826112f6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156120c8576120c7611cc9565b5b600182019050919050565b60006040820190506120e86000830185611359565b6120f56020830184611359565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612132601f836116a3565b915061213d826120fc565b602082019050919050565b6000602082019050818103600083015261216181612125565b905091905056fea264697066735822122017c8c52e5a2e86d82f5e1a66c0f1ff4f12d2c7087186b9dac81bb97ed651a02864736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB52078D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB52078D7 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0xBAE5B056 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xCCF46D34 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xED80DB35 EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xF36EEEBB EQ PUSH2 0x1E8 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x487E4661 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x5A514DD6 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x69CF8AD7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0xA86F678F EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAD SWAP2 SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDD SWAP2 SWAP1 PUSH2 0x155F JUMP JUMPDEST PUSH2 0x230 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xFE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF9 SWAP2 SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0x80F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10B SWAP2 SWAP1 PUSH2 0x162E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x129 SWAP2 SWAP1 PUSH2 0x1649 JUMP JUMPDEST PUSH2 0x82F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x145 SWAP2 SWAP1 PUSH2 0x132C JUMP JUMPDEST PUSH2 0xD3B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x161 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x173D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x184 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x1993 JUMP JUMPDEST PUSH2 0xF5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A2 PUSH2 0x11A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x19DC JUMP JUMPDEST PUSH2 0x11A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DF SWAP2 SWAP1 PUSH2 0x1A34 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1649 JUMP JUMPDEST PUSH2 0x11B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x1368 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0x238 PUSH2 0x11E5 JUMP JUMPDEST TIMESTAMP PUSH1 0x4 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x28D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x284 SWAP1 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x342 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x36E SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3BB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x390 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3BB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x39E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH2 0x3DE SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x40A SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x457 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x42C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x457 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x43A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH2 0x470 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x49C SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4E9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4BE JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4E9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4CC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0x3FB34003 DUP4 PUSH2 0x120 ADD MLOAD DUP5 PUSH2 0x140 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x563 SWAP3 SWAP2 SWAP1 PUSH2 0x1B60 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x58F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B3 SWAP2 SWAP1 PUSH2 0x1B9E JUMP JUMPDEST SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x627 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x61E SWAP1 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x697 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68E SWAP1 PUSH2 0x1CA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 DUP7 PUSH2 0x120 ADD MLOAD PUSH2 0x6C6 SWAP2 SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D4E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x712 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x736 SWAP2 SWAP1 PUSH2 0x1D9A JUMP JUMPDEST PUSH2 0x775 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76C SWAP1 PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x9EB9EF6BC25AB8BF0BC9A4907FA27DAB76EA367B559D928306DB5AC5B2656E34 DUP7 DUP3 DUP5 PUSH2 0x120 ADD MLOAD PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B6 SWAP3 SWAP2 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH2 0x800 JUMP JUMPDEST PUSH32 0x9EB9EF6BC25AB8BF0BC9A4907FA27DAB76EA367B559D928306DB5AC5B2656E34 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x7F7 SWAP3 SWAP2 SWAP1 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH2 0x808 PUSH2 0x1235 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x837 PUSH2 0x11E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x160 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH2 0x8E6 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x912 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x95F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x934 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x95F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x942 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH2 0x982 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9AE SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9FB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9FB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9DE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x8 DUP3 ADD DUP1 SLOAD PUSH2 0xA14 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA40 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA8D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA62 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA8D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA70 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x9 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0xA DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND PUSH2 0xFFFF AND PUSH2 0xFFFF AND DUP2 MSTORE POP POP SWAP1 POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB34 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB2B SWAP1 PUSH2 0x1C17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9B SWAP1 PUSH2 0x1CA9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP2 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0xBB9 SWAP2 SWAP1 PUSH2 0x1CF8 JUMP JUMPDEST GT ISZERO PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF1 SWAP1 PUSH2 0x1FD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xC2A SWAP1 PUSH2 0x1FF4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP TIMESTAMP PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D4E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCCB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCEF SWAP2 SWAP1 PUSH2 0x1D9A JUMP JUMPDEST PUSH2 0xD2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD25 SWAP1 PUSH2 0x1E13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0xD37 PUSH2 0x1235 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 DUP1 PUSH1 0x5 ADD DUP1 SLOAD PUSH2 0xD9C SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xDC8 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE15 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDEA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE15 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDF8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x6 ADD SLOAD SWAP1 DUP1 PUSH1 0x7 ADD DUP1 SLOAD PUSH2 0xE30 SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE5C SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xEA9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE7E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xEA9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE8C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x8 ADD DUP1 SLOAD PUSH2 0xEBE SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xEEA SWAP1 PUSH2 0x1B10 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF37 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF0C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF37 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF1A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x9 ADD SLOAD SWAP1 DUP1 PUSH1 0xA ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH2 0xFFFF AND SWAP1 POP DUP12 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFC3 SWAP1 PUSH2 0x206A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0xFDB SWAP1 PUSH2 0x208A JUMP JUMPDEST SWAP2 SWAP1 POP DUP2 SWAP1 SSTORE SWAP1 POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1082 SWAP3 SWAP2 SWAP1 PUSH2 0x123F JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x10A9 SWAP3 SWAP2 SWAP1 PUSH2 0x123F JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x8 ADD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x10C7 SWAP3 SWAP2 SWAP1 PUSH2 0x123F JUMP JUMPDEST POP PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x9 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0xA ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH2 0xFFFF MUL NOT AND SWAP1 DUP4 PUSH2 0xFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x5 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH32 0x75F0E88E04463F86C7E1E71465891020FA84744536526C63C08C967FCB3ACBFC DUP2 DUP4 PUSH2 0x120 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1196 SWAP3 SWAP2 SWAP1 PUSH2 0x20D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x11D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x2148 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x124B SWAP1 PUSH2 0x1B10 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x126D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x12B4 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1286 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x12B4 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x12B4 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x12B3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1298 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x12C1 SWAP2 SWAP1 PUSH2 0x12C5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x12C6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1309 DUP2 PUSH2 0x12F6 JUMP JUMPDEST DUP2 EQ PUSH2 0x1314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1326 DUP2 PUSH2 0x1300 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1342 JUMPI PUSH2 0x1341 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1350 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1362 DUP2 PUSH2 0x12F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x137D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13AE DUP3 PUSH2 0x1383 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x13BE DUP2 PUSH2 0x13A3 JUMP JUMPDEST DUP2 EQ PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x13DB DUP2 PUSH2 0x13B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1434 DUP3 PUSH2 0x13EB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1453 JUMPI PUSH2 0x1452 PUSH2 0x13FC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1466 PUSH2 0x12E2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1472 DUP3 DUP3 PUSH2 0x142B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1492 JUMPI PUSH2 0x1491 PUSH2 0x13FC JUMP JUMPDEST JUMPDEST PUSH2 0x149B DUP3 PUSH2 0x13EB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14CA PUSH2 0x14C5 DUP5 PUSH2 0x1477 JUMP JUMPDEST PUSH2 0x145C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x14E6 JUMPI PUSH2 0x14E5 PUSH2 0x13E6 JUMP JUMPDEST JUMPDEST PUSH2 0x14F1 DUP5 DUP3 DUP6 PUSH2 0x14A8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x150E JUMPI PUSH2 0x150D PUSH2 0x13E1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x151E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x14B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x153C DUP2 PUSH2 0x1527 JUMP JUMPDEST DUP2 EQ PUSH2 0x1547 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1559 DUP2 PUSH2 0x1533 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x157B JUMPI PUSH2 0x157A PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1589 DUP9 DUP3 DUP10 ADD PUSH2 0x13CC JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x159A DUP9 DUP3 DUP10 ADD PUSH2 0x1317 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15BB JUMPI PUSH2 0x15BA PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x15C7 DUP9 DUP3 DUP10 ADD PUSH2 0x14F9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E7 PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x15F4 DUP9 DUP3 DUP10 ADD PUSH2 0x14F9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x1605 DUP9 DUP3 DUP10 ADD PUSH2 0x154A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1628 DUP2 PUSH2 0x1612 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1643 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x161F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1660 JUMPI PUSH2 0x165F PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x166E DUP6 DUP3 DUP7 ADD PUSH2 0x13CC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x167F DUP6 DUP3 DUP7 ADD PUSH2 0x1317 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1692 DUP2 PUSH2 0x13A3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16D2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16B7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16E1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP3 PUSH2 0x1698 JUMP JUMPDEST PUSH2 0x16FC DUP2 DUP6 PUSH2 0x16A3 JUMP JUMPDEST SWAP4 POP PUSH2 0x170C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B4 JUMP JUMPDEST PUSH2 0x1715 DUP2 PUSH2 0x13EB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1737 DUP2 PUSH2 0x1720 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 ADD SWAP1 POP PUSH2 0x1753 PUSH1 0x0 DUP4 ADD DUP15 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x1760 PUSH1 0x20 DUP4 ADD DUP14 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x176D PUSH1 0x40 DUP4 ADD DUP13 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x177A PUSH1 0x60 DUP4 ADD DUP12 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x1787 PUSH1 0x80 DUP4 ADD DUP11 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x1799 DUP2 DUP10 PUSH2 0x16E7 JUMP JUMPDEST SWAP1 POP PUSH2 0x17A8 PUSH1 0xC0 DUP4 ADD DUP9 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x17BA DUP2 DUP8 PUSH2 0x16E7 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH2 0x100 DUP4 ADD MSTORE PUSH2 0x17CF DUP2 DUP7 PUSH2 0x16E7 JUMP JUMPDEST SWAP1 POP PUSH2 0x17DF PUSH2 0x120 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x17ED PUSH2 0x140 DUP4 ADD DUP5 PUSH2 0x172E JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1810 DUP2 PUSH2 0x1720 JUMP JUMPDEST DUP2 EQ PUSH2 0x181B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x182D DUP2 PUSH2 0x1807 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x184A JUMPI PUSH2 0x1849 PUSH2 0x17FD JUMP JUMPDEST JUMPDEST PUSH2 0x1855 PUSH2 0x160 PUSH2 0x145C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1865 DUP5 DUP3 DUP6 ADD PUSH2 0x13CC JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1879 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x188D DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x18A1 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x18B5 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18D9 JUMPI PUSH2 0x18D8 PUSH2 0x1802 JUMP JUMPDEST JUMPDEST PUSH2 0x18E5 DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH2 0x18F9 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x191D JUMPI PUSH2 0x191C PUSH2 0x1802 JUMP JUMPDEST JUMPDEST PUSH2 0x1929 DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194E JUMPI PUSH2 0x194D PUSH2 0x1802 JUMP JUMPDEST JUMPDEST PUSH2 0x195A DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE POP PUSH2 0x120 PUSH2 0x1970 DUP5 DUP3 DUP6 ADD PUSH2 0x1317 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MSTORE POP PUSH2 0x140 PUSH2 0x1986 DUP5 DUP3 DUP6 ADD PUSH2 0x181E JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19A9 JUMPI PUSH2 0x19A8 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19C7 JUMPI PUSH2 0x19C6 PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x19D3 DUP5 DUP3 DUP6 ADD PUSH2 0x1833 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x19F1 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A10 JUMPI PUSH2 0x1A0F PUSH2 0x12F1 JUMP JUMPDEST JUMPDEST PUSH2 0x1A1C DUP5 DUP3 DUP6 ADD PUSH2 0x14F9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1A2E DUP2 PUSH2 0x1527 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1A49 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A25 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x596F752061726520636C61696D696E672061742077726F6E672074696D657374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616D700000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAB PUSH1 0x23 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB6 DUP3 PUSH2 0x1A4F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ADA DUP2 PUSH2 0x1A9E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1B28 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1B3C JUMPI PUSH2 0x1B3B PUSH2 0x1AE1 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B4B DUP2 PUSH2 0x12F6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1B5A DUP2 PUSH2 0x1720 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1B75 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1B42 JUMP JUMPDEST PUSH2 0x1B82 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1B51 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1B98 DUP2 PUSH2 0x1300 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BB4 JUMPI PUSH2 0x1BB3 PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BC2 DUP5 DUP3 DUP6 ADD PUSH2 0x1B89 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x54686973206973206E6F7420796F757220496E737572616E6365000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C01 PUSH1 0x1A DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0C DUP3 PUSH2 0x1BCB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C30 DUP2 PUSH2 0x1BF4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x796F752063616E277420646F20746869732077697468207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C93 PUSH1 0x23 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C9E DUP3 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CC2 DUP2 PUSH2 0x1C86 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D03 DUP3 PUSH2 0x12F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D0E DUP4 PUSH2 0x12F6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1D43 JUMPI PUSH2 0x1D42 PUSH2 0x1CC9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1D63 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x1D70 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1689 JUMP JUMPDEST PUSH2 0x1D7D PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1D94 DUP2 PUSH2 0x1533 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB0 JUMPI PUSH2 0x1DAF PUSH2 0x12EC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DBE DUP5 DUP3 DUP6 ADD PUSH2 0x1D85 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x556E61626C6520746F2074616E736665722046756E6400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DFD PUSH1 0x16 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E08 DUP3 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E2C DUP2 PUSH2 0x1DF0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x7375636365737300000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E69 PUSH1 0x7 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E74 DUP3 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1E94 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1EA5 DUP2 PUSH2 0x1E5C JUMP JUMPDEST SWAP1 POP PUSH2 0x1EB4 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x756E737563636573730000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF1 PUSH1 0x9 DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EFC DUP3 PUSH2 0x1EBB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F36 PUSH2 0x1F31 PUSH2 0x1F2C DUP5 PUSH2 0x1F07 JUMP JUMPDEST PUSH2 0x1F11 JUMP JUMPDEST PUSH2 0x12F6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F46 DUP2 PUSH2 0x1F1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1F61 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1F72 DUP2 PUSH2 0x1EE4 JUMP JUMPDEST SWAP1 POP PUSH2 0x1F81 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1F3D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x796F7572206D617475726974792044617465206973206F766572000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBE PUSH1 0x1A DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FC9 DUP3 PUSH2 0x1F88 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FED DUP2 PUSH2 0x1FB1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FFF DUP3 PUSH2 0x1612 JUMP JUMPDEST SWAP2 POP PUSH1 0xFF DUP3 EQ ISZERO PUSH2 0x2013 JUMPI PUSH2 0x2012 PUSH2 0x1CC9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x46616B6520416464726573730000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2054 PUSH1 0xC DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x205F DUP3 PUSH2 0x201E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2083 DUP2 PUSH2 0x2047 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2095 DUP3 PUSH2 0x12F6 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x20C8 JUMPI PUSH2 0x20C7 PUSH2 0x1CC9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x20E8 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x20F5 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1359 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2132 PUSH1 0x1F DUP4 PUSH2 0x16A3 JUMP JUMPDEST SWAP2 POP PUSH2 0x213D DUP3 PUSH2 0x20FC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2161 DUP2 PUSH2 0x2125 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR 0xC8 0xC5 0x2E GAS 0x2E DUP7 0xD8 0x2F 0x5E BYTE PUSH7 0xC0F1FF4F12D2C7 ADDMOD PUSH18 0x86B9DAC81BB97ED651A02864736F6C634300 ADDMOD MULMOD STOP CALLER ","sourceMap":"274:3812:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;965:63;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2709:1375;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;871:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1691:902;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;773:57;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1270:415;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;368:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2599:104;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1070:51;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;965:63;;;;;;;;;;;;;;;;;:::o;2709:1375::-;2261:21:0;:19;:21::i;:::-;2969:15:7::1;2924:28;:42;2953:12;2924:42;;;;;;;;;;;;:60;2903:142;;;;;;;;;;;;:::i;:::-;;;;;;;;;3166:9;3162:916;;;3191:28;3222:16;:30;3239:12;3222:30;;;;;;;;;;;3191:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;3266:15;3284;:23;3325:7;:14;;;3357:7;:15;;;3284:102;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3266:120;;3454:10;3425:39;;:7;:25;;;:39;;;3400:124;;;;;;;;;;;;:::i;:::-;;;;;;;;;3587:1;3563:26;;:12;:26;;;;3538:120;;;;;;;;;;;;:::i;:::-;;;;;;;;;3704:12;3697:33;;;3752:10;3792:4;3836:7;3819;:14;;;:24;;;;:::i;:::-;3697:164;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3672:245;;;;;;;;;;;;:::i;:::-;;;;;;;;;3936:58;3944:12;3986:7;3969;:14;;;:24;;;;:::i;:::-;3936:58;;;;;;;:::i;:::-;;;;;;;;3177:828;;3162:916;;;4030:37;4038:12;4065:1;4030:37;;;;;;;:::i;:::-;;;;;;;;3162:916;2303:20:0::0;:18;:20::i;:::-;2709:1375:7;;;;;:::o;871:49::-;;;;;;;;;;;;;;;;;;;;;;:::o;1691:902::-;2261:21:0;:19;:21::i;:::-;1811:28:7::1;1842:16;:30;1859:12;1842:30;;;;;;;;;;;1811:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;1932:10;1903:39;;:7;:25;;;:39;;;1882:112;;;;;;;;;;;;:::i;:::-;;;;;;;;;2049:1;2025:26;;:12;:26;;;;2004:108;;;;;;;;;;;;:::i;:::-;;;;;;;;;2188:15;2164:7;:20;;;2144:7;:17;;;:40;;;;:::i;:::-;:59;;2123:132;;;;;;;;;;;;:::i;:::-;;;;;;;;;2266:16;:30;2283:12;2266:30;;;;;;;;;;;;:32;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;2353:15;2308:28;:42;2337:12;2308:42;;;;;;;;;;;:60;;;;2407:12;2400:33;;;2451:10;2487:4;2510:7;:14;;;2400:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2379:207;;;;;;;;;;;;:::i;:::-;;;;;;;;;1801:792;2303:20:0::0;:18;:20::i;:::-;1691:902:7;;:::o;773:57::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1270:415::-;1368:20;1434:1;1412:24;;:10;:24;;;;1404:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;1481:11;;1479:13;;;;;:::i;:::-;;;;;;;1464:28;;1536:14;1503:16;:30;1520:12;1503:30;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:14;:26;1576:10;1561:26;;;;;;;;;;;;;;;1593:12;1561:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1622:56;1642:12;1656:14;:21;;;1622:56;;;;;;;:::i;:::-;;;;;;;;1270:415;;;:::o;368:26::-;;;;:::o;2599:104::-;2669:4;2692;2685:11;;2599:104;;;:::o;1070:51::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2336:287:0:-;1759:1;2468:7;;:19;;2460:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1759:1;2598:7;:18;;;;2336:287::o;2629:209::-;1716:1;2809:7;:22;;;;2629:209::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:8:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:118::-;1112:24;1130:5;1112:24;:::i;:::-;1107:3;1100:37;1025:118;;:::o;1149:222::-;1242:4;1280:2;1269:9;1265:18;1257:26;;1293:71;1361:1;1350:9;1346:17;1337:6;1293:71;:::i;:::-;1149:222;;;;:::o;1377:126::-;1414:7;1454:42;1447:5;1443:54;1432:65;;1377:126;;;:::o;1509:96::-;1546:7;1575:24;1593:5;1575:24;:::i;:::-;1564:35;;1509:96;;;:::o;1611:122::-;1684:24;1702:5;1684:24;:::i;:::-;1677:5;1674:35;1664:63;;1723:1;1720;1713:12;1664:63;1611:122;:::o;1739:139::-;1785:5;1823:6;1810:20;1801:29;;1839:33;1866:5;1839:33;:::i;:::-;1739:139;;;;:::o;1884:117::-;1993:1;1990;1983:12;2007:117;2116:1;2113;2106:12;2130:102;2171:6;2222:2;2218:7;2213:2;2206:5;2202:14;2198:28;2188:38;;2130:102;;;:::o;2238:180::-;2286:77;2283:1;2276:88;2383:4;2380:1;2373:15;2407:4;2404:1;2397:15;2424:281;2507:27;2529:4;2507:27;:::i;:::-;2499:6;2495:40;2637:6;2625:10;2622:22;2601:18;2589:10;2586:34;2583:62;2580:88;;;2648:18;;:::i;:::-;2580:88;2688:10;2684:2;2677:22;2467:238;2424:281;;:::o;2711:129::-;2745:6;2772:20;;:::i;:::-;2762:30;;2801:33;2829:4;2821:6;2801:33;:::i;:::-;2711:129;;;:::o;2846:308::-;2908:4;2998:18;2990:6;2987:30;2984:56;;;3020:18;;:::i;:::-;2984:56;3058:29;3080:6;3058:29;:::i;:::-;3050:37;;3142:4;3136;3132:15;3124:23;;2846:308;;;:::o;3160:154::-;3244:6;3239:3;3234;3221:30;3306:1;3297:6;3292:3;3288:16;3281:27;3160:154;;;:::o;3320:412::-;3398:5;3423:66;3439:49;3481:6;3439:49;:::i;:::-;3423:66;:::i;:::-;3414:75;;3512:6;3505:5;3498:21;3550:4;3543:5;3539:16;3588:3;3579:6;3574:3;3570:16;3567:25;3564:112;;;3595:79;;:::i;:::-;3564:112;3685:41;3719:6;3714:3;3709;3685:41;:::i;:::-;3404:328;3320:412;;;;;:::o;3752:340::-;3808:5;3857:3;3850:4;3842:6;3838:17;3834:27;3824:122;;3865:79;;:::i;:::-;3824:122;3982:6;3969:20;4007:79;4082:3;4074:6;4067:4;4059:6;4055:17;4007:79;:::i;:::-;3998:88;;3814:278;3752:340;;;;:::o;4098:90::-;4132:7;4175:5;4168:13;4161:21;4150:32;;4098:90;;;:::o;4194:116::-;4264:21;4279:5;4264:21;:::i;:::-;4257:5;4254:32;4244:60;;4300:1;4297;4290:12;4244:60;4194:116;:::o;4316:133::-;4359:5;4397:6;4384:20;4375:29;;4413:30;4437:5;4413:30;:::i;:::-;4316:133;;;;:::o;4455:1265::-;4567:6;4575;4583;4591;4599;4648:3;4636:9;4627:7;4623:23;4619:33;4616:120;;;4655:79;;:::i;:::-;4616:120;4775:1;4800:53;4845:7;4836:6;4825:9;4821:22;4800:53;:::i;:::-;4790:63;;4746:117;4902:2;4928:53;4973:7;4964:6;4953:9;4949:22;4928:53;:::i;:::-;4918:63;;4873:118;5058:2;5047:9;5043:18;5030:32;5089:18;5081:6;5078:30;5075:117;;;5111:79;;:::i;:::-;5075:117;5216:63;5271:7;5262:6;5251:9;5247:22;5216:63;:::i;:::-;5206:73;;5001:288;5356:2;5345:9;5341:18;5328:32;5387:18;5379:6;5376:30;5373:117;;;5409:79;;:::i;:::-;5373:117;5514:63;5569:7;5560:6;5549:9;5545:22;5514:63;:::i;:::-;5504:73;;5299:288;5626:3;5653:50;5695:7;5686:6;5675:9;5671:22;5653:50;:::i;:::-;5643:60;;5597:116;4455:1265;;;;;;;;:::o;5726:86::-;5761:7;5801:4;5794:5;5790:16;5779:27;;5726:86;;;:::o;5818:112::-;5901:22;5917:5;5901:22;:::i;:::-;5896:3;5889:35;5818:112;;:::o;5936:214::-;6025:4;6063:2;6052:9;6048:18;6040:26;;6076:67;6140:1;6129:9;6125:17;6116:6;6076:67;:::i;:::-;5936:214;;;;:::o;6156:474::-;6224:6;6232;6281:2;6269:9;6260:7;6256:23;6252:32;6249:119;;;6287:79;;:::i;:::-;6249:119;6407:1;6432:53;6477:7;6468:6;6457:9;6453:22;6432:53;:::i;:::-;6422:63;;6378:117;6534:2;6560:53;6605:7;6596:6;6585:9;6581:22;6560:53;:::i;:::-;6550:63;;6505:118;6156:474;;;;;:::o;6636:118::-;6723:24;6741:5;6723:24;:::i;:::-;6718:3;6711:37;6636:118;;:::o;6760:99::-;6812:6;6846:5;6840:12;6830:22;;6760:99;;;:::o;6865:169::-;6949:11;6983:6;6978:3;6971:19;7023:4;7018:3;7014:14;6999:29;;6865:169;;;;:::o;7040:307::-;7108:1;7118:113;7132:6;7129:1;7126:13;7118:113;;;7217:1;7212:3;7208:11;7202:18;7198:1;7193:3;7189:11;7182:39;7154:2;7151:1;7147:10;7142:15;;7118:113;;;7249:6;7246:1;7243:13;7240:101;;;7329:1;7320:6;7315:3;7311:16;7304:27;7240:101;7089:258;7040:307;;;:::o;7353:364::-;7441:3;7469:39;7502:5;7469:39;:::i;:::-;7524:71;7588:6;7583:3;7524:71;:::i;:::-;7517:78;;7604:52;7649:6;7644:3;7637:4;7630:5;7626:16;7604:52;:::i;:::-;7681:29;7703:6;7681:29;:::i;:::-;7676:3;7672:39;7665:46;;7445:272;7353:364;;;;:::o;7723:89::-;7759:7;7799:6;7792:5;7788:18;7777:29;;7723:89;;;:::o;7818:115::-;7903:23;7920:5;7903:23;:::i;:::-;7898:3;7891:36;7818:115;;:::o;7939:1601::-;8371:4;8409:3;8398:9;8394:19;8386:27;;8423:71;8491:1;8480:9;8476:17;8467:6;8423:71;:::i;:::-;8504:72;8572:2;8561:9;8557:18;8548:6;8504:72;:::i;:::-;8586;8654:2;8643:9;8639:18;8630:6;8586:72;:::i;:::-;8668;8736:2;8725:9;8721:18;8712:6;8668:72;:::i;:::-;8750:73;8818:3;8807:9;8803:19;8794:6;8750:73;:::i;:::-;8871:9;8865:4;8861:20;8855:3;8844:9;8840:19;8833:49;8899:78;8972:4;8963:6;8899:78;:::i;:::-;8891:86;;8987:73;9055:3;9044:9;9040:19;9031:6;8987:73;:::i;:::-;9108:9;9102:4;9098:20;9092:3;9081:9;9077:19;9070:49;9136:78;9209:4;9200:6;9136:78;:::i;:::-;9128:86;;9262:9;9256:4;9252:20;9246:3;9235:9;9231:19;9224:49;9290:78;9363:4;9354:6;9290:78;:::i;:::-;9282:86;;9378:73;9446:3;9435:9;9431:19;9422:6;9378:73;:::i;:::-;9461:72;9528:3;9517:9;9513:19;9503:7;9461:72;:::i;:::-;7939:1601;;;;;;;;;;;;;;:::o;9546:117::-;9655:1;9652;9645:12;9669:117;9778:1;9775;9768:12;9792:120;9864:23;9881:5;9864:23;:::i;:::-;9857:5;9854:34;9844:62;;9902:1;9899;9892:12;9844:62;9792:120;:::o;9918:137::-;9963:5;10001:6;9988:20;9979:29;;10017:32;10043:5;10017:32;:::i;:::-;9918:137;;;;:::o;10108:2619::-;10188:5;10232:6;10220:9;10215:3;10211:19;10207:32;10204:119;;;10242:79;;:::i;:::-;10204:119;10341:23;10357:6;10341:23;:::i;:::-;10332:32;;10436:1;10476:49;10521:3;10512:6;10501:9;10497:22;10476:49;:::i;:::-;10469:4;10462:5;10458:16;10451:75;10374:163;10601:2;10642:49;10687:3;10678:6;10667:9;10663:22;10642:49;:::i;:::-;10635:4;10628:5;10624:16;10617:75;10547:156;10770:2;10811:49;10856:3;10847:6;10836:9;10832:22;10811:49;:::i;:::-;10804:4;10797:5;10793:16;10786:75;10713:159;10937:2;10978:49;11023:3;11014:6;11003:9;10999:22;10978:49;:::i;:::-;10971:4;10964:5;10960:16;10953:75;10882:157;11104:3;11146:49;11191:3;11182:6;11171:9;11167:22;11146:49;:::i;:::-;11139:4;11132:5;11128:16;11121:75;11049:158;11299:3;11288:9;11284:19;11271:33;11331:18;11323:6;11320:30;11317:117;;;11353:79;;:::i;:::-;11317:117;11473:59;11528:3;11519:6;11508:9;11504:22;11473:59;:::i;:::-;11466:4;11459:5;11455:16;11448:85;11217:327;11611:3;11653:49;11698:3;11689:6;11678:9;11674:22;11653:49;:::i;:::-;11646:4;11639:5;11635:16;11628:75;11554:160;11802:3;11791:9;11787:19;11774:33;11834:18;11826:6;11823:30;11820:117;;;11856:79;;:::i;:::-;11820:117;11976:59;12031:3;12022:6;12011:9;12007:22;11976:59;:::i;:::-;11969:4;11962:5;11958:16;11951:85;11724:323;12141:3;12130:9;12126:19;12113:33;12173:18;12165:6;12162:30;12159:117;;;12195:79;;:::i;:::-;12159:117;12317:59;12372:3;12363:6;12352:9;12348:22;12317:59;:::i;:::-;12308:6;12301:5;12297:18;12290:87;12057:331;12449:3;12493:49;12538:3;12529:6;12518:9;12514:22;12493:49;:::i;:::-;12484:6;12477:5;12473:18;12466:77;12398:156;12616:3;12660:48;12704:3;12695:6;12684:9;12680:22;12660:48;:::i;:::-;12651:6;12644:5;12640:18;12633:76;12564:156;10108:2619;;;;:::o;12733:551::-;12823:6;12872:2;12860:9;12851:7;12847:23;12843:32;12840:119;;;12878:79;;:::i;:::-;12840:119;13026:1;13015:9;13011:17;12998:31;13056:18;13048:6;13045:30;13042:117;;;13078:79;;:::i;:::-;13042:117;13183:84;13259:7;13250:6;13239:9;13235:22;13183:84;:::i;:::-;13173:94;;12969:308;12733:551;;;;:::o;13290:509::-;13359:6;13408:2;13396:9;13387:7;13383:23;13379:32;13376:119;;;13414:79;;:::i;:::-;13376:119;13562:1;13551:9;13547:17;13534:31;13592:18;13584:6;13581:30;13578:117;;;13614:79;;:::i;:::-;13578:117;13719:63;13774:7;13765:6;13754:9;13750:22;13719:63;:::i;:::-;13709:73;;13505:287;13290:509;;;;:::o;13805:109::-;13886:21;13901:5;13886:21;:::i;:::-;13881:3;13874:34;13805:109;;:::o;13920:210::-;14007:4;14045:2;14034:9;14030:18;14022:26;;14058:65;14120:1;14109:9;14105:17;14096:6;14058:65;:::i;:::-;13920:210;;;;:::o;14136:222::-;14276:34;14272:1;14264:6;14260:14;14253:58;14345:5;14340:2;14332:6;14328:15;14321:30;14136:222;:::o;14364:366::-;14506:3;14527:67;14591:2;14586:3;14527:67;:::i;:::-;14520:74;;14603:93;14692:3;14603:93;:::i;:::-;14721:2;14716:3;14712:12;14705:19;;14364:366;;;:::o;14736:419::-;14902:4;14940:2;14929:9;14925:18;14917:26;;14989:9;14983:4;14979:20;14975:1;14964:9;14960:17;14953:47;15017:131;15143:4;15017:131;:::i;:::-;15009:139;;14736:419;;;:::o;15161:180::-;15209:77;15206:1;15199:88;15306:4;15303:1;15296:15;15330:4;15327:1;15320:15;15347:320;15391:6;15428:1;15422:4;15418:12;15408:22;;15475:1;15469:4;15465:12;15496:18;15486:81;;15552:4;15544:6;15540:17;15530:27;;15486:81;15614:2;15606:6;15603:14;15583:18;15580:38;15577:84;;;15633:18;;:::i;:::-;15577:84;15398:269;15347:320;;;:::o;15673:126::-;15768:24;15786:5;15768:24;:::i;:::-;15763:3;15756:37;15673:126;;:::o;15805:123::-;15898:23;15915:5;15898:23;:::i;:::-;15893:3;15886:36;15805:123;;:::o;15934:352::-;16061:4;16099:2;16088:9;16084:18;16076:26;;16112:79;16188:1;16177:9;16173:17;16164:6;16112:79;:::i;:::-;16201:78;16275:2;16264:9;16260:18;16251:6;16201:78;:::i;:::-;15934:352;;;;;:::o;16292:143::-;16349:5;16380:6;16374:13;16365:22;;16396:33;16423:5;16396:33;:::i;:::-;16292:143;;;;:::o;16441:351::-;16511:6;16560:2;16548:9;16539:7;16535:23;16531:32;16528:119;;;16566:79;;:::i;:::-;16528:119;16686:1;16711:64;16767:7;16758:6;16747:9;16743:22;16711:64;:::i;:::-;16701:74;;16657:128;16441:351;;;;:::o;16798:176::-;16938:28;16934:1;16926:6;16922:14;16915:52;16798:176;:::o;16980:366::-;17122:3;17143:67;17207:2;17202:3;17143:67;:::i;:::-;17136:74;;17219:93;17308:3;17219:93;:::i;:::-;17337:2;17332:3;17328:12;17321:19;;16980:366;;;:::o;17352:419::-;17518:4;17556:2;17545:9;17541:18;17533:26;;17605:9;17599:4;17595:20;17591:1;17580:9;17576:17;17569:47;17633:131;17759:4;17633:131;:::i;:::-;17625:139;;17352:419;;;:::o;17777:222::-;17917:34;17913:1;17905:6;17901:14;17894:58;17986:5;17981:2;17973:6;17969:15;17962:30;17777:222;:::o;18005:366::-;18147:3;18168:67;18232:2;18227:3;18168:67;:::i;:::-;18161:74;;18244:93;18333:3;18244:93;:::i;:::-;18362:2;18357:3;18353:12;18346:19;;18005:366;;;:::o;18377:419::-;18543:4;18581:2;18570:9;18566:18;18558:26;;18630:9;18624:4;18620:20;18616:1;18605:9;18601:17;18594:47;18658:131;18784:4;18658:131;:::i;:::-;18650:139;;18377:419;;;:::o;18802:180::-;18850:77;18847:1;18840:88;18947:4;18944:1;18937:15;18971:4;18968:1;18961:15;18988:305;19028:3;19047:20;19065:1;19047:20;:::i;:::-;19042:25;;19081:20;19099:1;19081:20;:::i;:::-;19076:25;;19235:1;19167:66;19163:74;19160:1;19157:81;19154:107;;;19241:18;;:::i;:::-;19154:107;19285:1;19282;19278:9;19271:16;;18988:305;;;;:::o;19299:442::-;19448:4;19486:2;19475:9;19471:18;19463:26;;19499:71;19567:1;19556:9;19552:17;19543:6;19499:71;:::i;:::-;19580:72;19648:2;19637:9;19633:18;19624:6;19580:72;:::i;:::-;19662;19730:2;19719:9;19715:18;19706:6;19662:72;:::i;:::-;19299:442;;;;;;:::o;19747:137::-;19801:5;19832:6;19826:13;19817:22;;19848:30;19872:5;19848:30;:::i;:::-;19747:137;;;;:::o;19890:345::-;19957:6;20006:2;19994:9;19985:7;19981:23;19977:32;19974:119;;;20012:79;;:::i;:::-;19974:119;20132:1;20157:61;20210:7;20201:6;20190:9;20186:22;20157:61;:::i;:::-;20147:71;;20103:125;19890:345;;;;:::o;20241:172::-;20381:24;20377:1;20369:6;20365:14;20358:48;20241:172;:::o;20419:366::-;20561:3;20582:67;20646:2;20641:3;20582:67;:::i;:::-;20575:74;;20658:93;20747:3;20658:93;:::i;:::-;20776:2;20771:3;20767:12;20760:19;;20419:366;;;:::o;20791:419::-;20957:4;20995:2;20984:9;20980:18;20972:26;;21044:9;21038:4;21034:20;21030:1;21019:9;21015:17;21008:47;21072:131;21198:4;21072:131;:::i;:::-;21064:139;;20791:419;;;:::o;21216:157::-;21356:9;21352:1;21344:6;21340:14;21333:33;21216:157;:::o;21379:365::-;21521:3;21542:66;21606:1;21601:3;21542:66;:::i;:::-;21535:73;;21617:93;21706:3;21617:93;:::i;:::-;21735:2;21730:3;21726:12;21719:19;;21379:365;;;:::o;21750:639::-;21972:4;22010:2;21999:9;21995:18;21987:26;;22023:71;22091:1;22080:9;22076:17;22067:6;22023:71;:::i;:::-;22141:9;22135:4;22131:20;22126:2;22115:9;22111:18;22104:48;22169:131;22295:4;22169:131;:::i;:::-;22161:139;;22310:72;22378:2;22367:9;22363:18;22354:6;22310:72;:::i;:::-;21750:639;;;;;:::o;22395:159::-;22535:11;22531:1;22523:6;22519:14;22512:35;22395:159;:::o;22560:365::-;22702:3;22723:66;22787:1;22782:3;22723:66;:::i;:::-;22716:73;;22798:93;22887:3;22798:93;:::i;:::-;22916:2;22911:3;22907:12;22900:19;;22560:365;;;:::o;22931:85::-;22976:7;23005:5;22994:16;;22931:85;;;:::o;23022:60::-;23050:3;23071:5;23064:12;;23022:60;;;:::o;23088:158::-;23146:9;23179:61;23197:42;23206:32;23232:5;23206:32;:::i;:::-;23197:42;:::i;:::-;23179:61;:::i;:::-;23166:74;;23088:158;;;:::o;23252:147::-;23347:45;23386:5;23347:45;:::i;:::-;23342:3;23335:58;23252:147;;:::o;23405:655::-;23635:4;23673:2;23662:9;23658:18;23650:26;;23686:71;23754:1;23743:9;23739:17;23730:6;23686:71;:::i;:::-;23804:9;23798:4;23794:20;23789:2;23778:9;23774:18;23767:48;23832:131;23958:4;23832:131;:::i;:::-;23824:139;;23973:80;24049:2;24038:9;24034:18;24025:6;23973:80;:::i;:::-;23405:655;;;;;:::o;24066:176::-;24206:28;24202:1;24194:6;24190:14;24183:52;24066:176;:::o;24248:366::-;24390:3;24411:67;24475:2;24470:3;24411:67;:::i;:::-;24404:74;;24487:93;24576:3;24487:93;:::i;:::-;24605:2;24600:3;24596:12;24589:19;;24248:366;;;:::o;24620:419::-;24786:4;24824:2;24813:9;24809:18;24801:26;;24873:9;24867:4;24863:20;24859:1;24848:9;24844:17;24837:47;24901:131;25027:4;24901:131;:::i;:::-;24893:139;;24620:419;;;:::o;25045:167::-;25082:3;25105:22;25121:5;25105:22;:::i;:::-;25096:31;;25149:4;25142:5;25139:15;25136:41;;;25157:18;;:::i;:::-;25136:41;25204:1;25197:5;25193:13;25186:20;;25045:167;;;:::o;25218:162::-;25358:14;25354:1;25346:6;25342:14;25335:38;25218:162;:::o;25386:366::-;25528:3;25549:67;25613:2;25608:3;25549:67;:::i;:::-;25542:74;;25625:93;25714:3;25625:93;:::i;:::-;25743:2;25738:3;25734:12;25727:19;;25386:366;;;:::o;25758:419::-;25924:4;25962:2;25951:9;25947:18;25939:26;;26011:9;26005:4;26001:20;25997:1;25986:9;25982:17;25975:47;26039:131;26165:4;26039:131;:::i;:::-;26031:139;;25758:419;;;:::o;26183:233::-;26222:3;26245:24;26263:5;26245:24;:::i;:::-;26236:33;;26291:66;26284:5;26281:77;26278:103;;;26361:18;;:::i;:::-;26278:103;26408:1;26401:5;26397:13;26390:20;;26183:233;;;:::o;26422:332::-;26543:4;26581:2;26570:9;26566:18;26558:26;;26594:71;26662:1;26651:9;26647:17;26638:6;26594:71;:::i;:::-;26675:72;26743:2;26732:9;26728:18;26719:6;26675:72;:::i;:::-;26422:332;;;;;:::o;26760:181::-;26900:33;26896:1;26888:6;26884:14;26877:57;26760:181;:::o;26947:366::-;27089:3;27110:67;27174:2;27169:3;27110:67;:::i;:::-;27103:74;;27186:93;27275:3;27186:93;:::i;:::-;27304:2;27299:3;27295:12;27288:19;;26947:366;;;:::o;27319:419::-;27485:4;27523:2;27512:9;27508:18;27500:26;;27572:9;27566:4;27562:20;27558:1;27547:9;27543:17;27536:47;27600:131;27726:4;27600:131;:::i;:::-;27592:139;;27319:419;;;:::o"},"methodIdentifiers":{"InsuranceId()":"ccf46d34","claim(address,uint256,string,string,bool)":"5a514dd6","dataFromChainLink(string)":"ed80db35","insuranceDetails(uint256)":"b52078d7","insuranceRegister((address,uint256,uint256,uint256,uint256,string,uint256,string,string,uint256,uint16))":"bae5b056","lastInstallmentPaidTimestump(uint256)":"487e4661","paidInstallments(uint256)":"69cf8ad7","payInstallment(address,uint256)":"a86f678f","userInsurances(address,uint256)":"f36eeebb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"InsuranceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"massage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"InsuranceId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"insuranceRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"InsuranceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"chainlink\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"name\":\"dataFromChainLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"areaOfLand\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"seedsData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"seedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"yourAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"areaOfLand\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"seedsData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"seedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"yourAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"internalType\":\"struct insuranceRegistery.insuranceData\",\"name\":\"_insuranceData\",\"type\":\"tuple\"}],\"name\":\"insuranceRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_insuranceId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastInstallmentPaidTimestump\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidInstallments\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_insuranceId\",\"type\":\"uint256\"}],\"name\":\"payInstallment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInsurances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/insuranceRegistery.sol\":\"insuranceRegistery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/utils/Counters.sol\":{\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee\",\"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278\",\"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b\",\"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ\"]},\"contracts/Libraries/LibCalculations.sol\":{\"keccak256\":\"0x70ae252914c77fe653c01376c7227d1e5716fc4e3946954dba33548fc501bf18\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e0f38accc310fd1b3ee84efc1f4c827b9d3744774bba85f22287ae176a01bee\",\"dweb:/ipfs/QmPQEynysKKPCQnwacVd6UUxR2fx8HiYr1FrLSYpEye1JB\"]},\"contracts/insuranceRegistery.sol\":{\"keccak256\":\"0x7dee7fafaad69e50e5adf8b5e36b82392dc4ba1c4768037aaa4205812622a2f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92c5baa63201fb20061068c4b840008a1a1bf50476e01bce8c82bc23a393ef36\",\"dweb:/ipfs/QmR2A2BHCtjwdWrxsnyjCU4j1sQznUCKfiRmCM95U5w1zz\"]}},\"version\":1}"}}}}}